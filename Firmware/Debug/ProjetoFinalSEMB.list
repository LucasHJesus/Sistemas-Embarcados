
ProjetoFinalSEMB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c06c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c64  0800c210  0800c210  0001c210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce74  0800ce74  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce74  0800ce74  0001ce74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce7c  0800ce7c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce7c  0800ce7c  0001ce7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce80  0800ce80  0001ce80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ce84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  200001e4  0800d068  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  0800d068  00020904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017cd0  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ce  00000000  00000000  00037ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0003b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  0003caf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c25b  00000000  00000000  0003df90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c332  00000000  00000000  0005a1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3517  00000000  00000000  0007651d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119a34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f2c  00000000  00000000  00119a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c1f4 	.word	0x0800c1f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800c1f4 	.word	0x0800c1f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <compareValue>:

#include "app.h"
/* returns the the magnitude of value1 with respect to value2 with a
 * differential, so that the servo doesn't move without necessity*/
compare compareValue(int32_t value1,int32_t value2)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	if ((value1-TOLERANCE)>value2) return GT;	//if value1 is grater than value2
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3bc8      	subs	r3, #200	; 0xc8
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	da01      	bge.n	8000f74 <compareValue+0x18>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e007      	b.n	8000f84 <compareValue+0x28>

	if ((value2-TOLERANCE)>value1) return LT;	//if value1 is grater than value2
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	3bc8      	subs	r3, #200	; 0xc8
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	da01      	bge.n	8000f82 <compareValue+0x26>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e000      	b.n	8000f84 <compareValue+0x28>

	return EQ;									//if they are equal
 8000f82:	2300      	movs	r3, #0


}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <calculateEnergy>:
/*calculates the discrete integral of the vector spValue
 * uses a Riemann sum with a trapeze as base for the sum*/
float calculateEnergy(float spValue[MAX_COUNT])
{
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	int32_t i;
	float sum = 0.0;
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
	//goes through the spValue vector, except the last value, to avoid accessing unauthorized memory
	for (i = 0; i<(MAX_COUNT-2);i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	e031      	b.n	8001008 <calculateEnergy+0x78>
	{
		//sums old value of sum with the current value os the trapeze
		sum += (( spValue[i] + spValue[i+1])*DT ) /TOTAL_TIME;
 8000fa4:	68b8      	ldr	r0, [r7, #8]
 8000fa6:	f7ff fad7 	bl	8000558 <__aeabi_f2d>
 8000faa:	4604      	mov	r4, r0
 8000fac:	460d      	mov	r5, r1
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	ed93 7a00 	vldr	s14, [r3]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fcc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001020 <calculateEnergy+0x90>
 8000fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd4:	ee17 0a90 	vmov	r0, s15
 8000fd8:	f7ff fabe 	bl	8000558 <__aeabi_f2d>
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <calculateEnergy+0x94>)
 8000fe2:	f7ff fc3b 	bl	800085c <__aeabi_ddiv>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4620      	mov	r0, r4
 8000fec:	4629      	mov	r1, r5
 8000fee:	f7ff f955 	bl	800029c <__adddf3>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fddd 	bl	8000bb8 <__aeabi_d2f>
 8000ffe:	4603      	mov	r3, r0
 8001000:	60bb      	str	r3, [r7, #8]
	for (i = 0; i<(MAX_COUNT-2);i++)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3301      	adds	r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b39      	cmp	r3, #57	; 0x39
 800100c:	ddca      	ble.n	8000fa4 <calculateEnergy+0x14>
	}
	return sum;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	ee07 3a90 	vmov	s15, r3
}
 8001014:	eeb0 0a67 	vmov.f32	s0, s15
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bdb0      	pop	{r4, r5, r7, pc}
 800101e:	bf00      	nop
 8001020:	00000000 	.word	0x00000000
 8001024:	3fe00000 	.word	0x3fe00000

08001028 <convertToAmpere>:

float convertToAmpere(int32_t spValue)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	return (MAX_CURRENT/MAX_ADC)*spValue;
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fa7f 	bl	8000534 <__aeabi_i2d>
 8001036:	a30a      	add	r3, pc, #40	; (adr r3, 8001060 <convertToAmpere+0x38>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fae4 	bl	8000608 <__aeabi_dmul>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fdb6 	bl	8000bb8 <__aeabi_d2f>
 800104c:	4603      	mov	r3, r0
 800104e:	ee07 3a90 	vmov	s15, r3

}
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	f3af 8000 	nop.w
 8001060:	10010010 	.word	0x10010010
 8001064:	3f200100 	.word	0x3f200100

08001068 <setup>:

void setup(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	hw_displayInit();
 800106c:	f000 f932 	bl	80012d4 <hw_displayInit>
	hw_sdInit();
 8001070:	f000 f986 	bl	8001380 <hw_sdInit>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <loop>:

void loop(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
	static int32_t temp, index = 0;
	static float spValue[MAX_COUNT];
	float energy;
	//collects data from ldrs
	int32_t ldr1Value = hw_getAnalogValue(LDR1);
 800107e:	2001      	movs	r0, #1
 8001080:	f000 f882 	bl	8001188 <hw_getAnalogValue>
 8001084:	60f8      	str	r0, [r7, #12]
	int32_t ldr2Value = hw_getAnalogValue(LDR2);
 8001086:	2002      	movs	r0, #2
 8001088:	f000 f87e 	bl	8001188 <hw_getAnalogValue>
 800108c:	60b8      	str	r0, [r7, #8]

	//check if its night or not(check light level
	if((ldr1Value<MIN_LIGHT)&&(ldr2Value<MIN_LIGHT))
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001094:	da05      	bge.n	80010a2 <loop+0x2a>
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800109c:	da01      	bge.n	80010a2 <loop+0x2a>
	{
		hw_servoMoveToZero();
 800109e:	f000 f901 	bl	80012a4 <hw_servoMoveToZero>
	}
	//compare data collected
	compare comparison = compareValue(ldr1Value,ldr2Value);
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff ff59 	bl	8000f5c <compareValue>
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]

	//move servo accordingly
	hw_moveServo(comparison);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f8df 	bl	8001274 <hw_moveServo>

	//collect data from solar panel
	temp = hw_getAnalogValue(SOLARPANEL);
 80010b6:	2000      	movs	r0, #0
 80010b8:	f000 f866 	bl	8001188 <hw_getAnalogValue>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a19      	ldr	r2, [pc, #100]	; (8001124 <loop+0xac>)
 80010c0:	6013      	str	r3, [r2, #0]
	spValue[index] = OUTPUT_TENSION * convertToAmpere(temp);
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <loop+0xac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ffae 	bl	8001028 <convertToAmpere>
 80010cc:	eef0 7a40 	vmov.f32	s15, s0
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <loop+0xb0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80010d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010dc:	4a13      	ldr	r2, [pc, #76]	; (800112c <loop+0xb4>)
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	edc3 7a00 	vstr	s15, [r3]
	index+=1;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <loop+0xb0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <loop+0xb0>)
 80010ee:	6013      	str	r3, [r2, #0]

	/*after 30min(60 data collection cycles) calculated
	energy generated and store it in sd-card*/
	if (index == MAX_COUNT)
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <loop+0xb0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b3c      	cmp	r3, #60	; 0x3c
 80010f6:	d10f      	bne.n	8001118 <loop+0xa0>
	{
		//calculate energy
		energy = calculateEnergy(spValue);
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <loop+0xb4>)
 80010fa:	f7ff ff49 	bl	8000f90 <calculateEnergy>
 80010fe:	ed87 0a00 	vstr	s0, [r7]
		//store in sd-card
		hw_sdStore(energy);
 8001102:	ed97 0a00 	vldr	s0, [r7]
 8001106:	f000 f94d 	bl	80013a4 <hw_sdStore>
		//show on display
		hw_displayShow(energy);
 800110a:	ed97 0a00 	vldr	s0, [r7]
 800110e:	f000 f913 	bl	8001338 <hw_displayShow>

		index = 0;
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <loop+0xb0>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
	}


	//sets the processor in wait for interruption mode
	hw_sleep();
 8001118:	f000 f80a 	bl	8001130 <hw_sleep>
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000200 	.word	0x20000200
 8001128:	20000204 	.word	0x20000204
 800112c:	20000208 	.word	0x20000208

08001130 <hw_sleep>:
extern I2C_HandleTypeDef hi2c1;//I2C instance
extern SD_HandleTypeDef hsd;//sd card instance

//Activates the timer to wake up the processor and enters wait for interuption mode
void hw_sleep(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <hw_sleep+0x10>)
 8001136:	f004 f9cb 	bl	80054d0 <HAL_TIM_Base_Start_IT>
	__WFI();
 800113a:	bf30      	wfi
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000418 	.word	0x20000418

08001144 <hw_adcChannelConfig>:

/*configures wich one of the three channels the ADC will convert
Recives a int32_t that specifies the channel*/
void hw_adcChannelConfig(int32_t channel)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	//create a ADC_ChannelConfTypeDef object and fills it
	ADC_ChannelConfTypeDef sConfig = {0};
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800115e:	2301      	movs	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]

	//configures the channel
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <hw_adcChannelConfig+0x40>)
 800116e:	f001 fa59 	bl	8002624 <HAL_ADC_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <hw_adcChannelConfig+0x38>
	{
		Error_Handler();
 8001178:	f000 fba4 	bl	80018c4 <Error_Handler>
	}
}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200002f8 	.word	0x200002f8

08001188 <hw_getAnalogValue>:

/* recieves an ADC channel to read
 * returns a int32_t between 0 and 4095 informing the ADC read value */
int32_t hw_getAnalogValue(analog entry)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	//variables to set the channel and store the read value
	int32_t channels[] ={ADC_CHANNEL_1,ADC_CHANNEL_2,ADC_CHANNEL_3};
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <hw_getAnalogValue+0x4c>)
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	ca07      	ldmia	r2, {r0, r1, r2}
 800119a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int32_t adcValue;

	//channel configuration
	hw_adcChannelConfig(channels[entry]);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	3318      	adds	r3, #24
 80011a4:	443b      	add	r3, r7
 80011a6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ffca 	bl	8001144 <hw_adcChannelConfig>

	//ADC read by polling
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80011b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <hw_getAnalogValue+0x50>)
 80011b6:	f001 f99d 	bl	80024f4 <HAL_ADC_PollForConversion>
	adcValue = HAL_ADC_GetValue(&hadc1);
 80011ba:	4807      	ldr	r0, [pc, #28]	; (80011d8 <hw_getAnalogValue+0x50>)
 80011bc:	f001 fa25 	bl	800260a <HAL_ADC_GetValue>
 80011c0:	4603      	mov	r3, r0
 80011c2:	617b      	str	r3, [r7, #20]
	HAL_ADC_Stop(&hadc1);
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <hw_getAnalogValue+0x50>)
 80011c6:	f001 f962 	bl	800248e <HAL_ADC_Stop>

	return adcValue;
 80011ca:	697b      	ldr	r3, [r7, #20]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	0800c210 	.word	0x0800c210
 80011d8:	200002f8 	.word	0x200002f8
 80011dc:	00000000 	.word	0x00000000

080011e0 <hw_rotate>:

/*Uses the PWM to rotate the servo, recives the direction in wich to rotate*/
void hw_rotate(int32_t side)
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	//get CCR and ARR
	int32_t CCR = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_4);
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <hw_rotate+0x90>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	617b      	str	r3, [r7, #20]
	int32_t ARR = __HAL_TIM_GET_AUTORELOAD(&htim3);
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <hw_rotate+0x90>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	613b      	str	r3, [r7, #16]

	//calculates duty new cicle and corresponding ARR value(uses the old to calculate)
	float newDutyCicle = (CCR/ARR) + side * DUTY_CICLE_STEP ;
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f997 	bl	8000534 <__aeabi_i2d>
 8001206:	4604      	mov	r4, r0
 8001208:	460d      	mov	r5, r1
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff f992 	bl	8000534 <__aeabi_i2d>
 8001210:	a315      	add	r3, pc, #84	; (adr r3, 8001268 <hw_rotate+0x88>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff f9f7 	bl	8000608 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4620      	mov	r0, r4
 8001220:	4629      	mov	r1, r5
 8001222:	f7ff f83b 	bl	800029c <__adddf3>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fcc3 	bl	8000bb8 <__aeabi_d2f>
 8001232:	4603      	mov	r3, r0
 8001234:	60fb      	str	r3, [r7, #12]
	int32_t newCCR = (int32_t) ARR * newDutyCicle;
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001240:	edd7 7a03 	vldr	s15, [r7, #12]
 8001244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124c:	ee17 3a90 	vmov	r3, s15
 8001250:	60bb      	str	r3, [r7, #8]

	//sets CCR to newCCR
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,newCCR);
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <hw_rotate+0x90>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	641a      	str	r2, [r3, #64]	; 0x40
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bdb0      	pop	{r4, r5, r7, pc}
 8001262:	bf00      	nop
 8001264:	f3af 8000 	nop.w
 8001268:	47ae147b 	.word	0x47ae147b
 800126c:	3f747ae1 	.word	0x3f747ae1
 8001270:	20000460 	.word	0x20000460

08001274 <hw_moveServo>:

/*Moves the servo in a direction dependent on the side*/
void hw_moveServo(int32_t side)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	//in case side is none
	if (!side) return;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <hw_moveServo+0x26>
	//moves in LDR1's direction
	if (side == LDR1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d103      	bne.n	8001290 <hw_moveServo+0x1c>
	{
		hw_rotate(UP);
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff ffa9 	bl	80011e0 <hw_rotate>
 800128e:	e005      	b.n	800129c <hw_moveServo+0x28>
	}
	//moves in LDR2's direction
	else
	{
		hw_rotate(DOWN);
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ffa4 	bl	80011e0 <hw_rotate>
 8001298:	e000      	b.n	800129c <hw_moveServo+0x28>
	if (!side) return;
 800129a:	bf00      	nop
	}
}
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <hw_servoMoveToZero>:
/*Moves servo to the start position*/
void hw_servoMoveToZero(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
	//get ARR
	int32_t ARR = __HAL_TIM_GET_AUTORELOAD(&htim3);
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <hw_servoMoveToZero+0x2c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	607b      	str	r3, [r7, #4]
	//Caculate CCR
	int32_t newCCR = (int32_t) ARR * MIN_DUTY_CICLE;
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	4413      	add	r3, r2
 80012ba:	603b      	str	r3, [r7, #0]
	//set CCR
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,newCCR);
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <hw_servoMoveToZero+0x2c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	20000460 	.word	0x20000460

080012d4 <hw_displayInit>:
/*Gets the display ready to use*/
void hw_displayInit(void)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
	//first and third line strings
	char string1[] = "Energia gerada";
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <hw_displayInit+0x58>)
 80012dc:	f107 0408 	add.w	r4, r7, #8
 80012e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e2:	c407      	stmia	r4!, {r0, r1, r2}
 80012e4:	8023      	strh	r3, [r4, #0]
 80012e6:	3402      	adds	r4, #2
 80012e8:	0c1b      	lsrs	r3, r3, #16
 80012ea:	7023      	strb	r3, [r4, #0]
	char string2[] = "w/h";
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <hw_displayInit+0x5c>)
 80012ee:	607b      	str	r3, [r7, #4]

	//start the display
	ssd1306_Init();
 80012f0:	f000 fdf2 	bl	8001ed8 <ssd1306_Init>

	//set cursor to first line and writes first message
	ssd1306_SetCursor(5, 5);
 80012f4:	2105      	movs	r1, #5
 80012f6:	2005      	movs	r0, #5
 80012f8:	f000 ffa6 	bl	8002248 <ssd1306_SetCursor>
	ssd1306_WriteString(string1, Font_7x10, White);
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <hw_displayInit+0x60>)
 80012fe:	f107 0008 	add.w	r0, r7, #8
 8001302:	2301      	movs	r3, #1
 8001304:	ca06      	ldmia	r2, {r1, r2}
 8001306:	f000 ff79 	bl	80021fc <ssd1306_WriteString>

	//set cursor to third line and writes third message
	ssd1306_SetCursor(5,25);
 800130a:	2119      	movs	r1, #25
 800130c:	2005      	movs	r0, #5
 800130e:	f000 ff9b 	bl	8002248 <ssd1306_SetCursor>
	ssd1306_WriteString(string2, Font_7x10, White);
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <hw_displayInit+0x60>)
 8001314:	1d38      	adds	r0, r7, #4
 8001316:	2301      	movs	r3, #1
 8001318:	ca06      	ldmia	r2, {r1, r2}
 800131a:	f000 ff6f 	bl	80021fc <ssd1306_WriteString>

	//updates screen
	ssd1306_UpdateScreen();
 800131e:	f000 fe69 	bl	8001ff4 <ssd1306_UpdateScreen>

}
 8001322:	bf00      	nop
 8001324:	371c      	adds	r7, #28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd90      	pop	{r4, r7, pc}
 800132a:	bf00      	nop
 800132c:	0800c21c 	.word	0x0800c21c
 8001330:	00682f77 	.word	0x00682f77
 8001334:	20000004 	.word	0x20000004

08001338 <hw_displayShow>:

/* shows value on display*/
void hw_displayShow(float energy)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	ed87 0a01 	vstr	s0, [r7, #4]
	//convert float to char
	char energyChar[16];
	sprintf(energyChar,"%f",energy);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff f908 	bl	8000558 <__aeabi_f2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	f107 0008 	add.w	r0, r7, #8
 8001350:	4909      	ldr	r1, [pc, #36]	; (8001378 <hw_displayShow+0x40>)
 8001352:	f008 fce5 	bl	8009d20 <siprintf>

	//set cursor to second line and writes energy production
	ssd1306_SetCursor(5,15);
 8001356:	210f      	movs	r1, #15
 8001358:	2005      	movs	r0, #5
 800135a:	f000 ff75 	bl	8002248 <ssd1306_SetCursor>
	ssd1306_WriteString(energyChar,Font_7x10 , White);
 800135e:	4a07      	ldr	r2, [pc, #28]	; (800137c <hw_displayShow+0x44>)
 8001360:	f107 0008 	add.w	r0, r7, #8
 8001364:	2301      	movs	r3, #1
 8001366:	ca06      	ldmia	r2, {r1, r2}
 8001368:	f000 ff48 	bl	80021fc <ssd1306_WriteString>

	//updates screen
	ssd1306_UpdateScreen();
 800136c:	f000 fe42 	bl	8001ff4 <ssd1306_UpdateScreen>
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	0800c22c 	.word	0x0800c22c
 800137c:	20000004 	.word	0x20000004

08001380 <hw_sdInit>:

/*gets the sd card ready to use*/
void hw_sdInit(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8001386:	af00      	add	r7, sp, #0
	//mounts the sd card
    FATFS fs;
    f_mount(&fs, DEFAUT_PATH, DEFAUT_MOUNT);
 8001388:	463b      	mov	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	4904      	ldr	r1, [pc, #16]	; (80013a0 <hw_sdInit+0x20>)
 800138e:	4618      	mov	r0, r3
 8001390:	f007 fb9e 	bl	8008ad0 <f_mount>
}
 8001394:	bf00      	nop
 8001396:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	0800c230 	.word	0x0800c230

080013a4 <hw_sdStore>:

//writes data to the sd card
void hw_sdStore(float energy)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80013b0:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80013b4:	ed83 0a00 	vstr	s0, [r3]
	//in case the sd card isn't connected, doesn't try to write
	if (!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12)) return;
 80013b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013bc:	4822      	ldr	r0, [pc, #136]	; (8001448 <hw_sdStore+0xa4>)
 80013be:	f001 fdf5 	bl	8002fac <HAL_GPIO_ReadPin>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d039      	beq.n	800143c <hw_sdStore+0x98>
	//FATFS variables, used to write to a .txt
	FATFS fs;
	FIL file;
	UINT bw;

	char fileName[] = "out.txt";
 80013c8:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80013cc:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80013d0:	4a1e      	ldr	r2, [pc, #120]	; (800144c <hw_sdStore+0xa8>)
 80013d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d6:	e883 0003 	stmia.w	r3, {r0, r1}
	char energyChar[16];

	//data conversion from float to string
	sprintf(energyChar,"%f",energy);
 80013da:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80013de:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	f7ff f8b8 	bl	8000558 <__aeabi_f2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	f107 000c 	add.w	r0, r7, #12
 80013f0:	4917      	ldr	r1, [pc, #92]	; (8001450 <hw_sdStore+0xac>)
 80013f2:	f008 fc95 	bl	8009d20 <siprintf>

	/*writes to the sd card, mount the card, opens the file,
	writes data, closes the file and unmounts the card*/
	f_mount(&fs, DEFAUT_PATH, DEFAUT_MOUNT);
 80013f6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80013fa:	2200      	movs	r2, #0
 80013fc:	4915      	ldr	r1, [pc, #84]	; (8001454 <hw_sdStore+0xb0>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f007 fb66 	bl	8008ad0 <f_mount>
	f_open(&file, fileName, FA_WRITE | FA_CREATE_ALWAYS);
 8001404:	f107 011c 	add.w	r1, r7, #28
 8001408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140c:	220a      	movs	r2, #10
 800140e:	4618      	mov	r0, r3
 8001410:	f007 fba4 	bl	8008b5c <f_open>
	f_write(&file, energyChar, SIZE, &bw);
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	f107 010c 	add.w	r1, r7, #12
 800141c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001420:	220a      	movs	r2, #10
 8001422:	f007 fd59 	bl	8008ed8 <f_write>
	f_close(&file);
 8001426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142a:	4618      	mov	r0, r3
 800142c:	f007 ff47 	bl	80092be <f_close>
	f_unmount(DEFAUT_PATH);
 8001430:	2200      	movs	r2, #0
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <hw_sdStore+0xb0>)
 8001434:	2000      	movs	r0, #0
 8001436:	f007 fb4b 	bl	8008ad0 <f_mount>
 800143a:	e000      	b.n	800143e <hw_sdStore+0x9a>
	if (!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12)) return;
 800143c:	bf00      	nop
}
 800143e:	f507 6791 	add.w	r7, r7, #1160	; 0x488
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40020400 	.word	0x40020400
 800144c:	0800c234 	.word	0x0800c234
 8001450:	0800c22c 	.word	0x0800c22c
 8001454:	0800c230 	.word	0x0800c230

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145c:	f000 ff3e 	bl	80022dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001460:	f000 f814 	bl	800148c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001464:	f000 f9e4 	bl	8001830 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001468:	f000 f8ca 	bl	8001600 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 800146c:	f000 f8f6 	bl	800165c <MX_SDIO_SD_Init>
  MX_TIM3_Init();
 8001470:	f000 f968 	bl	8001744 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001474:	f000 f872 	bl	800155c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001478:	f000 f912 	bl	80016a0 <MX_TIM1_Init>
  MX_FATFS_Init();
 800147c:	f005 fc44 	bl	8006d08 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001480:	f7ff fdf2 	bl	8001068 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001484:	f7ff fdf8 	bl	8001078 <loop>
  {
 8001488:	e7fc      	b.n	8001484 <main+0x2c>
	...

0800148c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b094      	sub	sp, #80	; 0x50
 8001490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	2230      	movs	r2, #48	; 0x30
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f007 ffce 	bl	800943c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <SystemClock_Config+0xc8>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a26      	ldr	r2, [pc, #152]	; (8001554 <SystemClock_Config+0xc8>)
 80014ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <SystemClock_Config+0xc8>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <SystemClock_Config+0xcc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a20      	ldr	r2, [pc, #128]	; (8001558 <SystemClock_Config+0xcc>)
 80014d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <SystemClock_Config+0xcc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f2:	2302      	movs	r3, #2
 80014f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80014fc:	230c      	movs	r3, #12
 80014fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001500:	2360      	movs	r3, #96	; 0x60
 8001502:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001504:	2302      	movs	r3, #2
 8001506:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001508:	2305      	movs	r3, #5
 800150a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150c:	f107 0320 	add.w	r3, r7, #32
 8001510:	4618      	mov	r0, r3
 8001512:	f002 f9bf 	bl	8003894 <HAL_RCC_OscConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800151c:	f000 f9d2 	bl	80018c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001520:	230f      	movs	r3, #15
 8001522:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001524:	2302      	movs	r3, #2
 8001526:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001530:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001534:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2101      	movs	r1, #1
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fc21 	bl	8003d84 <HAL_RCC_ClockConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001548:	f000 f9bc 	bl	80018c4 <Error_Handler>
  }
}
 800154c:	bf00      	nop
 800154e:	3750      	adds	r7, #80	; 0x50
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800
 8001558:	40007000 	.word	0x40007000

0800155c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001562:	463b      	mov	r3, r7
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001570:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <MX_ADC1_Init+0x9c>)
 8001572:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001576:	2200      	movs	r2, #0
 8001578:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <MX_ADC1_Init+0x98>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001588:	2200      	movs	r2, #0
 800158a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <MX_ADC1_Init+0x98>)
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001596:	2200      	movs	r2, #0
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <MX_ADC1_Init+0x98>)
 800159c:	4a17      	ldr	r2, [pc, #92]	; (80015fc <MX_ADC1_Init+0xa0>)
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ba:	480e      	ldr	r0, [pc, #56]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015bc:	f000 ff24 	bl	8002408 <HAL_ADC_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015c6:	f000 f97d 	bl	80018c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d6:	463b      	mov	r3, r7
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015dc:	f001 f822 	bl	8002624 <HAL_ADC_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80015e6:	f000 f96d 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200002f8 	.word	0x200002f8
 80015f8:	40012000 	.word	0x40012000
 80015fc:	0f000001 	.word	0x0f000001

08001600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_I2C1_Init+0x50>)
 8001606:	4a13      	ldr	r2, [pc, #76]	; (8001654 <MX_I2C1_Init+0x54>)
 8001608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_I2C1_Init+0x50>)
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <MX_I2C1_Init+0x58>)
 800160e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_I2C1_Init+0x50>)
 800161e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_I2C1_Init+0x50>)
 800163e:	f001 fccd 	bl	8002fdc <HAL_I2C_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001648:	f000 f93c 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000340 	.word	0x20000340
 8001654:	40005400 	.word	0x40005400
 8001658:	00061a80 	.word	0x00061a80

0800165c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <MX_SDIO_SD_Init+0x3c>)
 8001662:	4a0e      	ldr	r2, [pc, #56]	; (800169c <MX_SDIO_SD_Init+0x40>)
 8001664:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_SDIO_SD_Init+0x3c>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <MX_SDIO_SD_Init+0x3c>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_SDIO_SD_Init+0x3c>)
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <MX_SDIO_SD_Init+0x3c>)
 800167a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800167e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <MX_SDIO_SD_Init+0x3c>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <MX_SDIO_SD_Init+0x3c>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000394 	.word	0x20000394
 800169c:	40012c00 	.word	0x40012c00

080016a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	463b      	mov	r3, r7
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <MX_TIM1_Init+0x9c>)
 80016be:	4a20      	ldr	r2, [pc, #128]	; (8001740 <MX_TIM1_Init+0xa0>)
 80016c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 59999;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <MX_TIM1_Init+0x9c>)
 80016c4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80016c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <MX_TIM1_Init+0x9c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62499;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_TIM1_Init+0x9c>)
 80016d2:	f24f 4223 	movw	r2, #62499	; 0xf423
 80016d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_TIM1_Init+0x9c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <MX_TIM1_Init+0x9c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_TIM1_Init+0x9c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016ea:	4814      	ldr	r0, [pc, #80]	; (800173c <MX_TIM1_Init+0x9c>)
 80016ec:	f003 fea1 	bl	8005432 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80016f6:	f000 f8e5 	bl	80018c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	4619      	mov	r1, r3
 8001706:	480d      	ldr	r0, [pc, #52]	; (800173c <MX_TIM1_Init+0x9c>)
 8001708:	f004 f968 	bl	80059dc <HAL_TIM_ConfigClockSource>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001712:	f000 f8d7 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800171e:	463b      	mov	r3, r7
 8001720:	4619      	mov	r1, r3
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <MX_TIM1_Init+0x9c>)
 8001724:	f004 fcfa 	bl	800611c <HAL_TIMEx_MasterConfigSynchronization>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800172e:	f000 f8c9 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000418 	.word	0x20000418
 8001740:	40010000 	.word	0x40010000

08001744 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08e      	sub	sp, #56	; 0x38
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	f107 0320 	add.w	r3, r7, #32
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
 8001770:	615a      	str	r2, [r3, #20]
 8001772:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001774:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <MX_TIM3_Init+0xe4>)
 8001776:	4a2d      	ldr	r2, [pc, #180]	; (800182c <MX_TIM3_Init+0xe8>)
 8001778:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49;
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <MX_TIM3_Init+0xe4>)
 800177c:	2231      	movs	r2, #49	; 0x31
 800177e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001780:	4b29      	ldr	r3, [pc, #164]	; (8001828 <MX_TIM3_Init+0xe4>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <MX_TIM3_Init+0xe4>)
 8001788:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800178c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <MX_TIM3_Init+0xe4>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <MX_TIM3_Init+0xe4>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800179a:	4823      	ldr	r0, [pc, #140]	; (8001828 <MX_TIM3_Init+0xe4>)
 800179c:	f003 fe49 	bl	8005432 <HAL_TIM_Base_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80017a6:	f000 f88d 	bl	80018c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b4:	4619      	mov	r1, r3
 80017b6:	481c      	ldr	r0, [pc, #112]	; (8001828 <MX_TIM3_Init+0xe4>)
 80017b8:	f004 f910 	bl	80059dc <HAL_TIM_ConfigClockSource>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80017c2:	f000 f87f 	bl	80018c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017c6:	4818      	ldr	r0, [pc, #96]	; (8001828 <MX_TIM3_Init+0xe4>)
 80017c8:	f003 fee4 	bl	8005594 <HAL_TIM_PWM_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80017d2:	f000 f877 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017de:	f107 0320 	add.w	r3, r7, #32
 80017e2:	4619      	mov	r1, r3
 80017e4:	4810      	ldr	r0, [pc, #64]	; (8001828 <MX_TIM3_Init+0xe4>)
 80017e6:	f004 fc99 	bl	800611c <HAL_TIMEx_MasterConfigSynchronization>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017f0:	f000 f868 	bl	80018c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f4:	2360      	movs	r3, #96	; 0x60
 80017f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	220c      	movs	r2, #12
 8001808:	4619      	mov	r1, r3
 800180a:	4807      	ldr	r0, [pc, #28]	; (8001828 <MX_TIM3_Init+0xe4>)
 800180c:	f004 f824 	bl	8005858 <HAL_TIM_PWM_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001816:	f000 f855 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800181a:	4803      	ldr	r0, [pc, #12]	; (8001828 <MX_TIM3_Init+0xe4>)
 800181c:	f000 f9b4 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 8001820:	bf00      	nop
 8001822:	3738      	adds	r7, #56	; 0x38
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000460 	.word	0x20000460
 800182c:	40000400 	.word	0x40000400

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <MX_GPIO_Init+0x8c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <MX_GPIO_Init+0x8c>)
 8001850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_GPIO_Init+0x8c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <MX_GPIO_Init+0x8c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a14      	ldr	r2, [pc, #80]	; (80018bc <MX_GPIO_Init+0x8c>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_GPIO_Init+0x8c>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_GPIO_Init+0x8c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <MX_GPIO_Init+0x8c>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MX_GPIO_Init+0x8c>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800189a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	4619      	mov	r1, r3
 80018ae:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MX_GPIO_Init+0x90>)
 80018b0:	f001 f9f8 	bl	8002ca4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b4:	bf00      	nop
 80018b6:	3720      	adds	r7, #32
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020400 	.word	0x40020400

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018cc:	e7fe      	b.n	80018cc <Error_Handler+0x8>
	...

080018d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_MspInit+0x4c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_MspInit+0x4c>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_MspInit+0x4c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a17      	ldr	r2, [pc, #92]	; (800199c <HAL_ADC_MspInit+0x7c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d127      	bne.n	8001992 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <HAL_ADC_MspInit+0x80>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	4a15      	ldr	r2, [pc, #84]	; (80019a0 <HAL_ADC_MspInit+0x80>)
 800194c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001950:	6453      	str	r3, [r2, #68]	; 0x44
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <HAL_ADC_MspInit+0x80>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_ADC_MspInit+0x80>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_ADC_MspInit+0x80>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_ADC_MspInit+0x80>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = LRD1_MEASURE_Pin|LRD2_MEASURE_Pin|SP_MEASURE_Pin;
 800197a:	230e      	movs	r3, #14
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197e:	2303      	movs	r3, #3
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <HAL_ADC_MspInit+0x84>)
 800198e:	f001 f989 	bl	8002ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	3728      	adds	r7, #40	; 0x28
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40012000 	.word	0x40012000
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020000 	.word	0x40020000

080019a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a19      	ldr	r2, [pc, #100]	; (8001a2c <HAL_I2C_MspInit+0x84>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d12c      	bne.n	8001a24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_I2C_MspInit+0x88>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <HAL_I2C_MspInit+0x88>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_I2C_MspInit+0x88>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ec:	2312      	movs	r3, #18
 80019ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019f8:	2304      	movs	r3, #4
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	480c      	ldr	r0, [pc, #48]	; (8001a34 <HAL_I2C_MspInit+0x8c>)
 8001a04:	f001 f94e 	bl	8002ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_I2C_MspInit+0x88>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_I2C_MspInit+0x88>)
 8001a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a16:	6413      	str	r3, [r2, #64]	; 0x40
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_I2C_MspInit+0x88>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	; 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40005400 	.word	0x40005400
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020400 	.word	0x40020400

08001a38 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a29      	ldr	r2, [pc, #164]	; (8001afc <HAL_SD_MspInit+0xc4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d14b      	bne.n	8001af2 <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <HAL_SD_MspInit+0xc8>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	4a27      	ldr	r2, [pc, #156]	; (8001b00 <HAL_SD_MspInit+0xc8>)
 8001a64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a68:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6a:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <HAL_SD_MspInit+0xc8>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <HAL_SD_MspInit+0xc8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a20      	ldr	r2, [pc, #128]	; (8001b00 <HAL_SD_MspInit+0xc8>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <HAL_SD_MspInit+0xc8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_SD_MspInit+0xc8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a19      	ldr	r2, [pc, #100]	; (8001b00 <HAL_SD_MspInit+0xc8>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_SD_MspInit+0xc8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001aae:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <HAL_SD_MspInit+0xcc>)
 8001acc:	f001 f8ea 	bl	8002ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8001ad0:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ae2:	230c      	movs	r3, #12
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	4806      	ldr	r0, [pc, #24]	; (8001b08 <HAL_SD_MspInit+0xd0>)
 8001aee:	f001 f8d9 	bl	8002ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40012c00 	.word	0x40012c00
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020000 	.word	0x40020000
 8001b08:	40020400 	.word	0x40020400

08001b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_TIM_Base_MspInit+0x70>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d116      	bne.n	8001b4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_TIM_Base_MspInit+0x74>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <HAL_TIM_Base_MspInit+0x74>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <HAL_TIM_Base_MspInit+0x74>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	2019      	movs	r0, #25
 8001b40:	f001 f879 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b44:	2019      	movs	r0, #25
 8001b46:	f001 f892 	bl	8002c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b4a:	e012      	b.n	8001b72 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0c      	ldr	r2, [pc, #48]	; (8001b84 <HAL_TIM_Base_MspInit+0x78>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10d      	bne.n	8001b72 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_TIM_Base_MspInit+0x74>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <HAL_TIM_Base_MspInit+0x74>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_TIM_Base_MspInit+0x74>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40000400 	.word	0x40000400

08001b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <HAL_TIM_MspPostInit+0x68>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d11d      	bne.n	8001be6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_TIM_MspPostInit+0x6c>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <HAL_TIM_MspPostInit+0x6c>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_TIM_MspPostInit+0x6c>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <HAL_TIM_MspPostInit+0x70>)
 8001be2:	f001 f85f 	bl	8002ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40000400 	.word	0x40000400
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020400 	.word	0x40020400

08001bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <NMI_Handler+0x4>

08001c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <HardFault_Handler+0x4>

08001c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <MemManage_Handler+0x4>

08001c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <BusFault_Handler+0x4>

08001c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <UsageFault_Handler+0x4>

08001c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c48:	f000 fb9a 	bl	8002380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c56:	f003 fcf6 	bl	8005646 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000418 	.word	0x20000418

08001c64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return 1;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_kill>:

int _kill(int pid, int sig)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c7e:	f007 fba5 	bl	80093cc <__errno>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2216      	movs	r2, #22
 8001c86:	601a      	str	r2, [r3, #0]
  return -1;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_exit>:

void _exit (int status)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ffe7 	bl	8001c74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ca6:	e7fe      	b.n	8001ca6 <_exit+0x12>

08001ca8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	e00a      	b.n	8001cd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cba:	f3af 8000 	nop.w
 8001cbe:	4601      	mov	r1, r0
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	60ba      	str	r2, [r7, #8]
 8001cc6:	b2ca      	uxtb	r2, r1
 8001cc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dbf0      	blt.n	8001cba <_read+0x12>
  }

  return len;
 8001cd8:	687b      	ldr	r3, [r7, #4]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e009      	b.n	8001d08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	60ba      	str	r2, [r7, #8]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbf1      	blt.n	8001cf4 <_write+0x12>
  }
  return len;
 8001d10:	687b      	ldr	r3, [r7, #4]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_close>:

int _close(int file)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d42:	605a      	str	r2, [r3, #4]
  return 0;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <_isatty>:

int _isatty(int file)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d5a:	2301      	movs	r3, #1
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f007 fb0a 	bl	80093cc <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20020000 	.word	0x20020000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	200004a8 	.word	0x200004a8
 8001dec:	20000908 	.word	0x20000908

08001df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e1a:	490e      	ldr	r1, [pc, #56]	; (8001e54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e30:	4c0b      	ldr	r4, [pc, #44]	; (8001e60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e3e:	f7ff ffd7 	bl	8001df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f007 fac9 	bl	80093d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e46:	f7ff fb07 	bl	8001458 <main>
  bx  lr    
 8001e4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e54:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e58:	0800ce84 	.word	0x0800ce84
  ldr r2, =_sbss
 8001e5c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e60:	20000904 	.word	0x20000904

08001e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>

08001e66 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af04      	add	r7, sp, #16
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	9302      	str	r3, [sp, #8]
 8001e84:	2301      	movs	r3, #1
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2178      	movs	r1, #120	; 0x78
 8001e92:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <ssd1306_WriteCommand+0x2c>)
 8001e94:	f001 f9e6 	bl	8003264 <HAL_I2C_Mem_Write>
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000340 	.word	0x20000340

08001ea4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af04      	add	r7, sp, #16
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb6:	9202      	str	r2, [sp, #8]
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	2240      	movs	r2, #64	; 0x40
 8001ec2:	2178      	movs	r1, #120	; 0x78
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <ssd1306_WriteData+0x30>)
 8001ec6:	f001 f9cd 	bl	8003264 <HAL_I2C_Mem_Write>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000340 	.word	0x20000340

08001ed8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001edc:	f7ff ffc3 	bl	8001e66 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001ee0:	2064      	movs	r0, #100	; 0x64
 8001ee2:	f000 fa6d 	bl	80023c0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f000 f9da 	bl	80022a0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001eec:	2020      	movs	r0, #32
 8001eee:	f7ff ffc1 	bl	8001e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff ffbe 	bl	8001e74 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ef8:	20b0      	movs	r0, #176	; 0xb0
 8001efa:	f7ff ffbb 	bl	8001e74 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001efe:	20c8      	movs	r0, #200	; 0xc8
 8001f00:	f7ff ffb8 	bl	8001e74 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff ffb5 	bl	8001e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001f0a:	2010      	movs	r0, #16
 8001f0c:	f7ff ffb2 	bl	8001e74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001f10:	2040      	movs	r0, #64	; 0x40
 8001f12:	f7ff ffaf 	bl	8001e74 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001f16:	20ff      	movs	r0, #255	; 0xff
 8001f18:	f000 f9ae 	bl	8002278 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001f1c:	20a1      	movs	r0, #161	; 0xa1
 8001f1e:	f7ff ffa9 	bl	8001e74 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001f22:	20a6      	movs	r0, #166	; 0xa6
 8001f24:	f7ff ffa6 	bl	8001e74 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001f28:	20a8      	movs	r0, #168	; 0xa8
 8001f2a:	f7ff ffa3 	bl	8001e74 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001f2e:	203f      	movs	r0, #63	; 0x3f
 8001f30:	f7ff ffa0 	bl	8001e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001f34:	20a4      	movs	r0, #164	; 0xa4
 8001f36:	f7ff ff9d 	bl	8001e74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001f3a:	20d3      	movs	r0, #211	; 0xd3
 8001f3c:	f7ff ff9a 	bl	8001e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff ff97 	bl	8001e74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f46:	20d5      	movs	r0, #213	; 0xd5
 8001f48:	f7ff ff94 	bl	8001e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001f4c:	20f0      	movs	r0, #240	; 0xf0
 8001f4e:	f7ff ff91 	bl	8001e74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001f52:	20d9      	movs	r0, #217	; 0xd9
 8001f54:	f7ff ff8e 	bl	8001e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001f58:	2022      	movs	r0, #34	; 0x22
 8001f5a:	f7ff ff8b 	bl	8001e74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001f5e:	20da      	movs	r0, #218	; 0xda
 8001f60:	f7ff ff88 	bl	8001e74 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001f64:	2012      	movs	r0, #18
 8001f66:	f7ff ff85 	bl	8001e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001f6a:	20db      	movs	r0, #219	; 0xdb
 8001f6c:	f7ff ff82 	bl	8001e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001f70:	2020      	movs	r0, #32
 8001f72:	f7ff ff7f 	bl	8001e74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001f76:	208d      	movs	r0, #141	; 0x8d
 8001f78:	f7ff ff7c 	bl	8001e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001f7c:	2014      	movs	r0, #20
 8001f7e:	f7ff ff79 	bl	8001e74 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001f82:	2001      	movs	r0, #1
 8001f84:	f000 f98c 	bl	80022a0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f000 f80f 	bl	8001fac <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f8e:	f000 f831 	bl	8001ff4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <ssd1306_Init+0xd0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <ssd1306_Init+0xd0>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001f9e:	4b02      	ldr	r3, [pc, #8]	; (8001fa8 <ssd1306_Init+0xd0>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	711a      	strb	r2, [r3, #4]
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200008ac 	.word	0x200008ac

08001fac <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	e00d      	b.n	8001fd8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <ssd1306_Fill+0x1a>
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	e000      	b.n	8001fc8 <ssd1306_Fill+0x1c>
 8001fc6:	21ff      	movs	r1, #255	; 0xff
 8001fc8:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <ssd1306_Fill+0x44>)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4413      	add	r3, r2
 8001fce:	460a      	mov	r2, r1
 8001fd0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fde:	d3ed      	bcc.n	8001fbc <ssd1306_Fill+0x10>
    }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	200004ac 	.word	0x200004ac

08001ff4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	71fb      	strb	r3, [r7, #7]
 8001ffe:	e016      	b.n	800202e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	3b50      	subs	r3, #80	; 0x50
 8002004:	b2db      	uxtb	r3, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ff34 	bl	8001e74 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff ff31 	bl	8001e74 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002012:	2010      	movs	r0, #16
 8002014:	f7ff ff2e 	bl	8001e74 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	01db      	lsls	r3, r3, #7
 800201c:	4a08      	ldr	r2, [pc, #32]	; (8002040 <ssd1306_UpdateScreen+0x4c>)
 800201e:	4413      	add	r3, r2
 8002020:	2180      	movs	r1, #128	; 0x80
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff3e 	bl	8001ea4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	3301      	adds	r3, #1
 800202c:	71fb      	strb	r3, [r7, #7]
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	2b07      	cmp	r3, #7
 8002032:	d9e5      	bls.n	8002000 <ssd1306_UpdateScreen+0xc>
    }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200004ac 	.word	0x200004ac

08002044 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
 800204e:	460b      	mov	r3, r1
 8002050:	71bb      	strb	r3, [r7, #6]
 8002052:	4613      	mov	r3, r2
 8002054:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db3d      	blt.n	80020da <ssd1306_DrawPixel+0x96>
 800205e:	79bb      	ldrb	r3, [r7, #6]
 8002060:	2b3f      	cmp	r3, #63	; 0x3f
 8002062:	d83a      	bhi.n	80020da <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002064:	797b      	ldrb	r3, [r7, #5]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d11a      	bne.n	80020a0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800206a:	79fa      	ldrb	r2, [r7, #7]
 800206c:	79bb      	ldrb	r3, [r7, #6]
 800206e:	08db      	lsrs	r3, r3, #3
 8002070:	b2d8      	uxtb	r0, r3
 8002072:	4603      	mov	r3, r0
 8002074:	01db      	lsls	r3, r3, #7
 8002076:	4413      	add	r3, r2
 8002078:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <ssd1306_DrawPixel+0xa4>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	b25a      	sxtb	r2, r3
 800207e:	79bb      	ldrb	r3, [r7, #6]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	2101      	movs	r1, #1
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	b25b      	sxtb	r3, r3
 800208c:	4313      	orrs	r3, r2
 800208e:	b259      	sxtb	r1, r3
 8002090:	79fa      	ldrb	r2, [r7, #7]
 8002092:	4603      	mov	r3, r0
 8002094:	01db      	lsls	r3, r3, #7
 8002096:	4413      	add	r3, r2
 8002098:	b2c9      	uxtb	r1, r1
 800209a:	4a13      	ldr	r2, [pc, #76]	; (80020e8 <ssd1306_DrawPixel+0xa4>)
 800209c:	54d1      	strb	r1, [r2, r3]
 800209e:	e01d      	b.n	80020dc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80020a0:	79fa      	ldrb	r2, [r7, #7]
 80020a2:	79bb      	ldrb	r3, [r7, #6]
 80020a4:	08db      	lsrs	r3, r3, #3
 80020a6:	b2d8      	uxtb	r0, r3
 80020a8:	4603      	mov	r3, r0
 80020aa:	01db      	lsls	r3, r3, #7
 80020ac:	4413      	add	r3, r2
 80020ae:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <ssd1306_DrawPixel+0xa4>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
 80020b2:	b25a      	sxtb	r2, r3
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	b25b      	sxtb	r3, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	b25b      	sxtb	r3, r3
 80020c6:	4013      	ands	r3, r2
 80020c8:	b259      	sxtb	r1, r3
 80020ca:	79fa      	ldrb	r2, [r7, #7]
 80020cc:	4603      	mov	r3, r0
 80020ce:	01db      	lsls	r3, r3, #7
 80020d0:	4413      	add	r3, r2
 80020d2:	b2c9      	uxtb	r1, r1
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <ssd1306_DrawPixel+0xa4>)
 80020d6:	54d1      	strb	r1, [r2, r3]
 80020d8:	e000      	b.n	80020dc <ssd1306_DrawPixel+0x98>
        return;
 80020da:	bf00      	nop
    }
}
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	200004ac 	.word	0x200004ac

080020ec <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4604      	mov	r4, r0
 80020f4:	1d38      	adds	r0, r7, #4
 80020f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80020fa:	461a      	mov	r2, r3
 80020fc:	4623      	mov	r3, r4
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	4613      	mov	r3, r2
 8002102:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	2b1f      	cmp	r3, #31
 8002108:	d902      	bls.n	8002110 <ssd1306_WriteChar+0x24>
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	2b7e      	cmp	r3, #126	; 0x7e
 800210e:	d901      	bls.n	8002114 <ssd1306_WriteChar+0x28>
        return 0;
 8002110:	2300      	movs	r3, #0
 8002112:	e06d      	b.n	80021f0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002114:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <ssd1306_WriteChar+0x10c>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	793b      	ldrb	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	2b80      	cmp	r3, #128	; 0x80
 8002120:	dc06      	bgt.n	8002130 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002122:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <ssd1306_WriteChar+0x10c>)
 8002124:	885b      	ldrh	r3, [r3, #2]
 8002126:	461a      	mov	r2, r3
 8002128:	797b      	ldrb	r3, [r7, #5]
 800212a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800212c:	2b40      	cmp	r3, #64	; 0x40
 800212e:	dd01      	ble.n	8002134 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002130:	2300      	movs	r3, #0
 8002132:	e05d      	b.n	80021f0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	e04c      	b.n	80021d4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	3b20      	subs	r3, #32
 8002140:	7979      	ldrb	r1, [r7, #5]
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4619      	mov	r1, r3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	440b      	add	r3, r1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	e034      	b.n	80021c4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d012      	beq.n	8002190 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800216a:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <ssd1306_WriteChar+0x10c>)
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4413      	add	r3, r2
 8002176:	b2d8      	uxtb	r0, r3
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <ssd1306_WriteChar+0x10c>)
 800217a:	885b      	ldrh	r3, [r3, #2]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	4413      	add	r3, r2
 8002184:	b2db      	uxtb	r3, r3
 8002186:	7bba      	ldrb	r2, [r7, #14]
 8002188:	4619      	mov	r1, r3
 800218a:	f7ff ff5b 	bl	8002044 <ssd1306_DrawPixel>
 800218e:	e016      	b.n	80021be <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <ssd1306_WriteChar+0x10c>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4413      	add	r3, r2
 800219c:	b2d8      	uxtb	r0, r3
 800219e:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <ssd1306_WriteChar+0x10c>)
 80021a0:	885b      	ldrh	r3, [r3, #2]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	b2d9      	uxtb	r1, r3
 80021ac:	7bbb      	ldrb	r3, [r7, #14]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bf0c      	ite	eq
 80021b2:	2301      	moveq	r3, #1
 80021b4:	2300      	movne	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	f7ff ff43 	bl	8002044 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3301      	adds	r3, #1
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	793b      	ldrb	r3, [r7, #4]
 80021c6:	461a      	mov	r2, r3
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d3c5      	bcc.n	800215a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3301      	adds	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	797b      	ldrb	r3, [r7, #5]
 80021d6:	461a      	mov	r2, r3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	4293      	cmp	r3, r2
 80021dc:	d3ad      	bcc.n	800213a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <ssd1306_WriteChar+0x10c>)
 80021e0:	881a      	ldrh	r2, [r3, #0]
 80021e2:	793b      	ldrb	r3, [r7, #4]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <ssd1306_WriteChar+0x10c>)
 80021ec:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3724      	adds	r7, #36	; 0x24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd90      	pop	{r4, r7, pc}
 80021f8:	200008ac 	.word	0x200008ac

080021fc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	1d38      	adds	r0, r7, #4
 8002206:	e880 0006 	stmia.w	r0, {r1, r2}
 800220a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800220c:	e012      	b.n	8002234 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	7818      	ldrb	r0, [r3, #0]
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	1d3a      	adds	r2, r7, #4
 8002216:	ca06      	ldmia	r2, {r1, r2}
 8002218:	f7ff ff68 	bl	80020ec <ssd1306_WriteChar>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d002      	beq.n	800222e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	e008      	b.n	8002240 <ssd1306_WriteString+0x44>
        }
        str++;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3301      	adds	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e8      	bne.n	800220e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	781b      	ldrb	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	460a      	mov	r2, r1
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	4613      	mov	r3, r2
 8002256:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	b29a      	uxth	r2, r3
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <ssd1306_SetCursor+0x2c>)
 800225e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002260:	79bb      	ldrb	r3, [r7, #6]
 8002262:	b29a      	uxth	r2, r3
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <ssd1306_SetCursor+0x2c>)
 8002266:	805a      	strh	r2, [r3, #2]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	200008ac 	.word	0x200008ac

08002278 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002282:	2381      	movs	r3, #129	; 0x81
 8002284:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fdf3 	bl	8001e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fdef 	bl	8001e74 <ssd1306_WriteCommand>
}
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80022b0:	23af      	movs	r3, #175	; 0xaf
 80022b2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <ssd1306_SetDisplayOn+0x38>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	715a      	strb	r2, [r3, #5]
 80022ba:	e004      	b.n	80022c6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80022bc:	23ae      	movs	r3, #174	; 0xae
 80022be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <ssd1306_SetDisplayOn+0x38>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fdd3 	bl	8001e74 <ssd1306_WriteCommand>
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200008ac 	.word	0x200008ac

080022dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_Init+0x40>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0d      	ldr	r2, [pc, #52]	; (800231c <HAL_Init+0x40>)
 80022e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_Init+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <HAL_Init+0x40>)
 80022f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_Init+0x40>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a07      	ldr	r2, [pc, #28]	; (800231c <HAL_Init+0x40>)
 80022fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002304:	2003      	movs	r0, #3
 8002306:	f000 fc8b 	bl	8002c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800230a:	200f      	movs	r0, #15
 800230c:	f000 f808 	bl	8002320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002310:	f7ff fade 	bl	80018d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023c00 	.word	0x40023c00

08002320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_InitTick+0x54>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_InitTick+0x58>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002336:	fbb3 f3f1 	udiv	r3, r3, r1
 800233a:	fbb2 f3f3 	udiv	r3, r2, r3
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fca3 	bl	8002c8a <HAL_SYSTICK_Config>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e00e      	b.n	800236c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b0f      	cmp	r3, #15
 8002352:	d80a      	bhi.n	800236a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002354:	2200      	movs	r2, #0
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	f000 fc6b 	bl	8002c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002360:	4a06      	ldr	r2, [pc, #24]	; (800237c <HAL_InitTick+0x5c>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e000      	b.n	800236c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000000 	.word	0x20000000
 8002378:	20000010 	.word	0x20000010
 800237c:	2000000c 	.word	0x2000000c

08002380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_IncTick+0x20>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_IncTick+0x24>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4413      	add	r3, r2
 8002390:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <HAL_IncTick+0x24>)
 8002392:	6013      	str	r3, [r2, #0]
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000010 	.word	0x20000010
 80023a4:	200008b4 	.word	0x200008b4

080023a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return uwTick;
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <HAL_GetTick+0x14>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	200008b4 	.word	0x200008b4

080023c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff ffee 	bl	80023a8 <HAL_GetTick>
 80023cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d005      	beq.n	80023e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_Delay+0x44>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023e6:	bf00      	nop
 80023e8:	f7ff ffde 	bl	80023a8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d8f7      	bhi.n	80023e8 <HAL_Delay+0x28>
  {
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000010 	.word	0x20000010

08002408 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e033      	b.n	8002486 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff fa7a 	bl	8001920 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	d118      	bne.n	8002478 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800244e:	f023 0302 	bic.w	r3, r3, #2
 8002452:	f043 0202 	orr.w	r2, r3, #2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fa14 	bl	8002888 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f023 0303 	bic.w	r3, r3, #3
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
 8002476:	e001      	b.n	800247c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002484:	7bfb      	ldrb	r3, [r7, #15]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_Stop+0x16>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e021      	b.n	80024e8 <HAL_ADC_Stop+0x5a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0201 	bic.w	r2, r2, #1
 80024ba:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002510:	d113      	bne.n	800253a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800251c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002520:	d10b      	bne.n	800253a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f043 0220 	orr.w	r2, r3, #32
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e063      	b.n	8002602 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800253a:	f7ff ff35 	bl	80023a8 <HAL_GetTick>
 800253e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002540:	e021      	b.n	8002586 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d01d      	beq.n	8002586 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_ADC_PollForConversion+0x6c>
 8002550:	f7ff ff2a 	bl	80023a8 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d212      	bcs.n	8002586 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b02      	cmp	r3, #2
 800256c:	d00b      	beq.n	8002586 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f043 0204 	orr.w	r2, r3, #4
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e03d      	b.n	8002602 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b02      	cmp	r3, #2
 8002592:	d1d6      	bne.n	8002542 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0212 	mvn.w	r2, #18
 800259c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d123      	bne.n	8002600 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d11f      	bne.n	8002600 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d111      	bne.n	8002600 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1c>
 800263c:	2302      	movs	r3, #2
 800263e:	e113      	b.n	8002868 <HAL_ADC_ConfigChannel+0x244>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b09      	cmp	r3, #9
 800264e:	d925      	bls.n	800269c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68d9      	ldr	r1, [r3, #12]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	3b1e      	subs	r3, #30
 8002666:	2207      	movs	r2, #7
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43da      	mvns	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	400a      	ands	r2, r1
 8002674:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68d9      	ldr	r1, [r3, #12]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	4618      	mov	r0, r3
 8002688:	4603      	mov	r3, r0
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4403      	add	r3, r0
 800268e:	3b1e      	subs	r3, #30
 8002690:	409a      	lsls	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	e022      	b.n	80026e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6919      	ldr	r1, [r3, #16]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	2207      	movs	r2, #7
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43da      	mvns	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	400a      	ands	r2, r1
 80026be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6919      	ldr	r1, [r3, #16]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	4603      	mov	r3, r0
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4403      	add	r3, r0
 80026d8:	409a      	lsls	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d824      	bhi.n	8002734 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	3b05      	subs	r3, #5
 80026fc:	221f      	movs	r2, #31
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	400a      	ands	r2, r1
 800270a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	4618      	mov	r0, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	3b05      	subs	r3, #5
 8002726:	fa00 f203 	lsl.w	r2, r0, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	635a      	str	r2, [r3, #52]	; 0x34
 8002732:	e04c      	b.n	80027ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b0c      	cmp	r3, #12
 800273a:	d824      	bhi.n	8002786 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	3b23      	subs	r3, #35	; 0x23
 800274e:	221f      	movs	r2, #31
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43da      	mvns	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	400a      	ands	r2, r1
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	4618      	mov	r0, r3
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	3b23      	subs	r3, #35	; 0x23
 8002778:	fa00 f203 	lsl.w	r2, r0, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
 8002784:	e023      	b.n	80027ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	3b41      	subs	r3, #65	; 0x41
 8002798:	221f      	movs	r2, #31
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	400a      	ands	r2, r1
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	4618      	mov	r0, r3
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	3b41      	subs	r3, #65	; 0x41
 80027c2:	fa00 f203 	lsl.w	r2, r0, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ce:	4b29      	ldr	r3, [pc, #164]	; (8002874 <HAL_ADC_ConfigChannel+0x250>)
 80027d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a28      	ldr	r2, [pc, #160]	; (8002878 <HAL_ADC_ConfigChannel+0x254>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d10f      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x1d8>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b12      	cmp	r3, #18
 80027e2:	d10b      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <HAL_ADC_ConfigChannel+0x254>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d12b      	bne.n	800285e <HAL_ADC_ConfigChannel+0x23a>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1c      	ldr	r2, [pc, #112]	; (800287c <HAL_ADC_ConfigChannel+0x258>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d003      	beq.n	8002818 <HAL_ADC_ConfigChannel+0x1f4>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b11      	cmp	r3, #17
 8002816:	d122      	bne.n	800285e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a11      	ldr	r2, [pc, #68]	; (800287c <HAL_ADC_ConfigChannel+0x258>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d111      	bne.n	800285e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_ADC_ConfigChannel+0x25c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a11      	ldr	r2, [pc, #68]	; (8002884 <HAL_ADC_ConfigChannel+0x260>)
 8002840:	fba2 2303 	umull	r2, r3, r2, r3
 8002844:	0c9a      	lsrs	r2, r3, #18
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002850:	e002      	b.n	8002858 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3b01      	subs	r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f9      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40012300 	.word	0x40012300
 8002878:	40012000 	.word	0x40012000
 800287c:	10000012 	.word	0x10000012
 8002880:	20000000 	.word	0x20000000
 8002884:	431bde83 	.word	0x431bde83

08002888 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002890:	4b79      	ldr	r3, [pc, #484]	; (8002a78 <ADC_Init+0x1f0>)
 8002892:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	021a      	lsls	r2, r3, #8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002902:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6899      	ldr	r1, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	4a58      	ldr	r2, [pc, #352]	; (8002a7c <ADC_Init+0x1f4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d022      	beq.n	8002966 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800292e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002950:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	e00f      	b.n	8002986 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002974:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002984:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0202 	bic.w	r2, r2, #2
 8002994:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6899      	ldr	r1, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	7e1b      	ldrb	r3, [r3, #24]
 80029a0:	005a      	lsls	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01b      	beq.n	80029ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	3b01      	subs	r3, #1
 80029e0:	035a      	lsls	r2, r3, #13
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	e007      	b.n	80029fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	051a      	lsls	r2, r3, #20
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6899      	ldr	r1, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a3e:	025a      	lsls	r2, r3, #9
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6899      	ldr	r1, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	029a      	lsls	r2, r3, #10
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	609a      	str	r2, [r3, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40012300 	.word	0x40012300
 8002a7c:	0f000001 	.word	0x0f000001

08002a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 0307 	and.w	r3, r3, #7
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	db0b      	blt.n	8002b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4907      	ldr	r1, [pc, #28]	; (8002b1c <__NVIC_EnableIRQ+0x38>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2001      	movs	r0, #1
 8002b06:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000e100 	.word	0xe000e100

08002b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	db0a      	blt.n	8002b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	490c      	ldr	r1, [pc, #48]	; (8002b6c <__NVIC_SetPriority+0x4c>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	440b      	add	r3, r1
 8002b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b48:	e00a      	b.n	8002b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4908      	ldr	r1, [pc, #32]	; (8002b70 <__NVIC_SetPriority+0x50>)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3b04      	subs	r3, #4
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	761a      	strb	r2, [r3, #24]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000e100 	.word	0xe000e100
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f1c3 0307 	rsb	r3, r3, #7
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	bf28      	it	cs
 8002b92:	2304      	movcs	r3, #4
 8002b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d902      	bls.n	8002ba4 <NVIC_EncodePriority+0x30>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3b03      	subs	r3, #3
 8002ba2:	e000      	b.n	8002ba6 <NVIC_EncodePriority+0x32>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43d9      	mvns	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	4313      	orrs	r3, r2
         );
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	; 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bec:	d301      	bcc.n	8002bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00f      	b.n	8002c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <SysTick_Config+0x40>)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfa:	210f      	movs	r1, #15
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f7ff ff8e 	bl	8002b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <SysTick_Config+0x40>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <SysTick_Config+0x40>)
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	e000e010 	.word	0xe000e010

08002c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ff29 	bl	8002a80 <__NVIC_SetPriorityGrouping>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c48:	f7ff ff3e 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 8002c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	6978      	ldr	r0, [r7, #20]
 8002c54:	f7ff ff8e 	bl	8002b74 <NVIC_EncodePriority>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff5d 	bl	8002b20 <__NVIC_SetPriority>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff31 	bl	8002ae4 <__NVIC_EnableIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ffa2 	bl	8002bdc <SysTick_Config>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	e159      	b.n	8002f74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	f040 8148 	bne.w	8002f6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d005      	beq.n	8002cf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d130      	bne.n	8002d58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	2203      	movs	r2, #3
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 0201 	and.w	r2, r3, #1
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d017      	beq.n	8002d94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d123      	bne.n	8002de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	08da      	lsrs	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3208      	adds	r2, #8
 8002da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	220f      	movs	r2, #15
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	08da      	lsrs	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3208      	adds	r2, #8
 8002de2:	69b9      	ldr	r1, [r7, #24]
 8002de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2203      	movs	r2, #3
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0203 	and.w	r2, r3, #3
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a2 	beq.w	8002f6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	4b57      	ldr	r3, [pc, #348]	; (8002f8c <HAL_GPIO_Init+0x2e8>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	4a56      	ldr	r2, [pc, #344]	; (8002f8c <HAL_GPIO_Init+0x2e8>)
 8002e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e38:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3a:	4b54      	ldr	r3, [pc, #336]	; (8002f8c <HAL_GPIO_Init+0x2e8>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e46:	4a52      	ldr	r2, [pc, #328]	; (8002f90 <HAL_GPIO_Init+0x2ec>)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	089b      	lsrs	r3, r3, #2
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	220f      	movs	r2, #15
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a49      	ldr	r2, [pc, #292]	; (8002f94 <HAL_GPIO_Init+0x2f0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d019      	beq.n	8002ea6 <HAL_GPIO_Init+0x202>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a48      	ldr	r2, [pc, #288]	; (8002f98 <HAL_GPIO_Init+0x2f4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_GPIO_Init+0x1fe>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a47      	ldr	r2, [pc, #284]	; (8002f9c <HAL_GPIO_Init+0x2f8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00d      	beq.n	8002e9e <HAL_GPIO_Init+0x1fa>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a46      	ldr	r2, [pc, #280]	; (8002fa0 <HAL_GPIO_Init+0x2fc>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d007      	beq.n	8002e9a <HAL_GPIO_Init+0x1f6>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a45      	ldr	r2, [pc, #276]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <HAL_GPIO_Init+0x1f2>
 8002e92:	2304      	movs	r3, #4
 8002e94:	e008      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002e96:	2307      	movs	r3, #7
 8002e98:	e006      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e004      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e002      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	f002 0203 	and.w	r2, r2, #3
 8002eae:	0092      	lsls	r2, r2, #2
 8002eb0:	4093      	lsls	r3, r2
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eb8:	4935      	ldr	r1, [pc, #212]	; (8002f90 <HAL_GPIO_Init+0x2ec>)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ec6:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <HAL_GPIO_Init+0x304>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eea:	4a2f      	ldr	r2, [pc, #188]	; (8002fa8 <HAL_GPIO_Init+0x304>)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_GPIO_Init+0x304>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f14:	4a24      	ldr	r2, [pc, #144]	; (8002fa8 <HAL_GPIO_Init+0x304>)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f1a:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <HAL_GPIO_Init+0x304>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f3e:	4a1a      	ldr	r2, [pc, #104]	; (8002fa8 <HAL_GPIO_Init+0x304>)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <HAL_GPIO_Init+0x304>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f68:	4a0f      	ldr	r2, [pc, #60]	; (8002fa8 <HAL_GPIO_Init+0x304>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3301      	adds	r3, #1
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b0f      	cmp	r3, #15
 8002f78:	f67f aea2 	bls.w	8002cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	3724      	adds	r7, #36	; 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40013800 	.word	0x40013800
 8002f94:	40020000 	.word	0x40020000
 8002f98:	40020400 	.word	0x40020400
 8002f9c:	40020800 	.word	0x40020800
 8002fa0:	40020c00 	.word	0x40020c00
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40013c00 	.word	0x40013c00

08002fac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	887b      	ldrh	r3, [r7, #2]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	e001      	b.n	8002fce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e12b      	b.n	8003246 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fe fcd0 	bl	80019a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800302e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800303e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003040:	f001 f858 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 8003044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4a81      	ldr	r2, [pc, #516]	; (8003250 <HAL_I2C_Init+0x274>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d807      	bhi.n	8003060 <HAL_I2C_Init+0x84>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a80      	ldr	r2, [pc, #512]	; (8003254 <HAL_I2C_Init+0x278>)
 8003054:	4293      	cmp	r3, r2
 8003056:	bf94      	ite	ls
 8003058:	2301      	movls	r3, #1
 800305a:	2300      	movhi	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e006      	b.n	800306e <HAL_I2C_Init+0x92>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a7d      	ldr	r2, [pc, #500]	; (8003258 <HAL_I2C_Init+0x27c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	bf94      	ite	ls
 8003068:	2301      	movls	r3, #1
 800306a:	2300      	movhi	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0e7      	b.n	8003246 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4a78      	ldr	r2, [pc, #480]	; (800325c <HAL_I2C_Init+0x280>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0c9b      	lsrs	r3, r3, #18
 8003080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4a6a      	ldr	r2, [pc, #424]	; (8003250 <HAL_I2C_Init+0x274>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d802      	bhi.n	80030b0 <HAL_I2C_Init+0xd4>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	3301      	adds	r3, #1
 80030ae:	e009      	b.n	80030c4 <HAL_I2C_Init+0xe8>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	4a69      	ldr	r2, [pc, #420]	; (8003260 <HAL_I2C_Init+0x284>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	099b      	lsrs	r3, r3, #6
 80030c2:	3301      	adds	r3, #1
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	495c      	ldr	r1, [pc, #368]	; (8003250 <HAL_I2C_Init+0x274>)
 80030e0:	428b      	cmp	r3, r1
 80030e2:	d819      	bhi.n	8003118 <HAL_I2C_Init+0x13c>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1e59      	subs	r1, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f2:	1c59      	adds	r1, r3, #1
 80030f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030f8:	400b      	ands	r3, r1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_I2C_Init+0x138>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1e59      	subs	r1, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	fbb1 f3f3 	udiv	r3, r1, r3
 800310c:	3301      	adds	r3, #1
 800310e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003112:	e051      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003114:	2304      	movs	r3, #4
 8003116:	e04f      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d111      	bne.n	8003144 <HAL_I2C_Init+0x168>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1e58      	subs	r0, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	440b      	add	r3, r1
 800312e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	e012      	b.n	800316a <HAL_I2C_Init+0x18e>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e58      	subs	r0, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	0099      	lsls	r1, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	fbb0 f3f3 	udiv	r3, r0, r3
 800315a:	3301      	adds	r3, #1
 800315c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Init+0x196>
 800316e:	2301      	movs	r3, #1
 8003170:	e022      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10e      	bne.n	8003198 <HAL_I2C_Init+0x1bc>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1e58      	subs	r0, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	440b      	add	r3, r1
 8003188:	fbb0 f3f3 	udiv	r3, r0, r3
 800318c:	3301      	adds	r3, #1
 800318e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003196:	e00f      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1e58      	subs	r0, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	0099      	lsls	r1, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	6809      	ldr	r1, [r1, #0]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6911      	ldr	r1, [r2, #16]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68d2      	ldr	r2, [r2, #12]
 80031f2:	4311      	orrs	r1, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	000186a0 	.word	0x000186a0
 8003254:	001e847f 	.word	0x001e847f
 8003258:	003d08ff 	.word	0x003d08ff
 800325c:	431bde83 	.word	0x431bde83
 8003260:	10624dd3 	.word	0x10624dd3

08003264 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	4608      	mov	r0, r1
 800326e:	4611      	mov	r1, r2
 8003270:	461a      	mov	r2, r3
 8003272:	4603      	mov	r3, r0
 8003274:	817b      	strh	r3, [r7, #10]
 8003276:	460b      	mov	r3, r1
 8003278:	813b      	strh	r3, [r7, #8]
 800327a:	4613      	mov	r3, r2
 800327c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800327e:	f7ff f893 	bl	80023a8 <HAL_GetTick>
 8003282:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b20      	cmp	r3, #32
 800328e:	f040 80d9 	bne.w	8003444 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2319      	movs	r3, #25
 8003298:	2201      	movs	r2, #1
 800329a:	496d      	ldr	r1, [pc, #436]	; (8003450 <HAL_I2C_Mem_Write+0x1ec>)
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f971 	bl	8003584 <I2C_WaitOnFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
 80032aa:	e0cc      	b.n	8003446 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_I2C_Mem_Write+0x56>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e0c5      	b.n	8003446 <HAL_I2C_Mem_Write+0x1e2>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d007      	beq.n	80032e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2221      	movs	r2, #33	; 0x21
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2240      	movs	r2, #64	; 0x40
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a3a      	ldr	r2, [r7, #32]
 800330a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a4d      	ldr	r2, [pc, #308]	; (8003454 <HAL_I2C_Mem_Write+0x1f0>)
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003322:	88f8      	ldrh	r0, [r7, #6]
 8003324:	893a      	ldrh	r2, [r7, #8]
 8003326:	8979      	ldrh	r1, [r7, #10]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	4603      	mov	r3, r0
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f890 	bl	8003458 <I2C_RequestMemoryWrite>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d052      	beq.n	80033e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e081      	b.n	8003446 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f9f2 	bl	8003730 <I2C_WaitOnTXEFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00d      	beq.n	800336e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	2b04      	cmp	r3, #4
 8003358:	d107      	bne.n	800336a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003368:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e06b      	b.n	8003446 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	781a      	ldrb	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d11b      	bne.n	80033e4 <HAL_I2C_Mem_Write+0x180>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d017      	beq.n	80033e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1aa      	bne.n	8003342 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f9de 	bl	80037b2 <I2C_WaitOnBTFFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00d      	beq.n	8003418 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	2b04      	cmp	r3, #4
 8003402:	d107      	bne.n	8003414 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003412:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e016      	b.n	8003446 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	e000      	b.n	8003446 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003444:	2302      	movs	r3, #2
  }
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	00100002 	.word	0x00100002
 8003454:	ffff0000 	.word	0xffff0000

08003458 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af02      	add	r7, sp, #8
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	4608      	mov	r0, r1
 8003462:	4611      	mov	r1, r2
 8003464:	461a      	mov	r2, r3
 8003466:	4603      	mov	r3, r0
 8003468:	817b      	strh	r3, [r7, #10]
 800346a:	460b      	mov	r3, r1
 800346c:	813b      	strh	r3, [r7, #8]
 800346e:	4613      	mov	r3, r2
 8003470:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003480:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	2200      	movs	r2, #0
 800348a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f878 	bl	8003584 <I2C_WaitOnFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00d      	beq.n	80034b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a8:	d103      	bne.n	80034b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e05f      	b.n	8003576 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034b6:	897b      	ldrh	r3, [r7, #10]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	492d      	ldr	r1, [pc, #180]	; (8003580 <I2C_RequestMemoryWrite+0x128>)
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f8b0 	bl	8003632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e04c      	b.n	8003576 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f4:	6a39      	ldr	r1, [r7, #32]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f91a 	bl	8003730 <I2C_WaitOnTXEFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2b04      	cmp	r3, #4
 8003508:	d107      	bne.n	800351a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003518:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e02b      	b.n	8003576 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003524:	893b      	ldrh	r3, [r7, #8]
 8003526:	b2da      	uxtb	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	611a      	str	r2, [r3, #16]
 800352e:	e021      	b.n	8003574 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003530:	893b      	ldrh	r3, [r7, #8]
 8003532:	0a1b      	lsrs	r3, r3, #8
 8003534:	b29b      	uxth	r3, r3
 8003536:	b2da      	uxtb	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	6a39      	ldr	r1, [r7, #32]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f8f4 	bl	8003730 <I2C_WaitOnTXEFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b04      	cmp	r3, #4
 8003554:	d107      	bne.n	8003566 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003564:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e005      	b.n	8003576 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800356a:	893b      	ldrh	r3, [r7, #8]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	00010002 	.word	0x00010002

08003584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003594:	e025      	b.n	80035e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d021      	beq.n	80035e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359e:	f7fe ff03 	bl	80023a8 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d302      	bcc.n	80035b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d116      	bne.n	80035e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f043 0220 	orr.w	r2, r3, #32
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e023      	b.n	800362a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	0c1b      	lsrs	r3, r3, #16
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d10d      	bne.n	8003608 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	43da      	mvns	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4013      	ands	r3, r2
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	e00c      	b.n	8003622 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf0c      	ite	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	2300      	movne	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	429a      	cmp	r2, r3
 8003626:	d0b6      	beq.n	8003596 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003640:	e051      	b.n	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003650:	d123      	bne.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003660:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800366a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f043 0204 	orr.w	r2, r3, #4
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e046      	b.n	8003728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d021      	beq.n	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a2:	f7fe fe81 	bl	80023a8 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d116      	bne.n	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e020      	b.n	8003728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10c      	bne.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4013      	ands	r3, r2
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf14      	ite	ne
 8003702:	2301      	movne	r3, #1
 8003704:	2300      	moveq	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	e00b      	b.n	8003722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	43da      	mvns	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4013      	ands	r3, r2
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d18d      	bne.n	8003642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800373c:	e02d      	b.n	800379a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f878 	bl	8003834 <I2C_IsAcknowledgeFailed>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e02d      	b.n	80037aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003754:	d021      	beq.n	800379a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003756:	f7fe fe27 	bl	80023a8 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	429a      	cmp	r2, r3
 8003764:	d302      	bcc.n	800376c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d116      	bne.n	800379a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e007      	b.n	80037aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a4:	2b80      	cmp	r3, #128	; 0x80
 80037a6:	d1ca      	bne.n	800373e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037be:	e02d      	b.n	800381c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f837 	bl	8003834 <I2C_IsAcknowledgeFailed>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e02d      	b.n	800382c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d6:	d021      	beq.n	800381c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d8:	f7fe fde6 	bl	80023a8 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d302      	bcc.n	80037ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d116      	bne.n	800381c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f043 0220 	orr.w	r2, r3, #32
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e007      	b.n	800382c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b04      	cmp	r3, #4
 8003828:	d1ca      	bne.n	80037c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384a:	d11b      	bne.n	8003884 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003854:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	f043 0204 	orr.w	r2, r3, #4
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e267      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d075      	beq.n	800399e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038b2:	4b88      	ldr	r3, [pc, #544]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d00c      	beq.n	80038d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038be:	4b85      	ldr	r3, [pc, #532]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d112      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ca:	4b82      	ldr	r3, [pc, #520]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d6:	d10b      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d8:	4b7e      	ldr	r3, [pc, #504]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d05b      	beq.n	800399c <HAL_RCC_OscConfig+0x108>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d157      	bne.n	800399c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e242      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f8:	d106      	bne.n	8003908 <HAL_RCC_OscConfig+0x74>
 80038fa:	4b76      	ldr	r3, [pc, #472]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a75      	ldr	r2, [pc, #468]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e01d      	b.n	8003944 <HAL_RCC_OscConfig+0xb0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x98>
 8003912:	4b70      	ldr	r3, [pc, #448]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a6f      	ldr	r2, [pc, #444]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b6d      	ldr	r3, [pc, #436]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a6c      	ldr	r2, [pc, #432]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e00b      	b.n	8003944 <HAL_RCC_OscConfig+0xb0>
 800392c:	4b69      	ldr	r3, [pc, #420]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a68      	ldr	r2, [pc, #416]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	4b66      	ldr	r3, [pc, #408]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a65      	ldr	r2, [pc, #404]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 800393e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fe fd2c 	bl	80023a8 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003954:	f7fe fd28 	bl	80023a8 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	; 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e207      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	4b5b      	ldr	r3, [pc, #364]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0xc0>
 8003972:	e014      	b.n	800399e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fe fd18 	bl	80023a8 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800397c:	f7fe fd14 	bl	80023a8 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e1f3      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398e:	4b51      	ldr	r3, [pc, #324]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0xe8>
 800399a:	e000      	b.n	800399e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d063      	beq.n	8003a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039aa:	4b4a      	ldr	r3, [pc, #296]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b6:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d11c      	bne.n	80039fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c2:	4b44      	ldr	r3, [pc, #272]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d116      	bne.n	80039fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ce:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_RCC_OscConfig+0x152>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d001      	beq.n	80039e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e1c7      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e6:	4b3b      	ldr	r3, [pc, #236]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4937      	ldr	r1, [pc, #220]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fa:	e03a      	b.n	8003a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a04:	4b34      	ldr	r3, [pc, #208]	; (8003ad8 <HAL_RCC_OscConfig+0x244>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0a:	f7fe fccd 	bl	80023a8 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a12:	f7fe fcc9 	bl	80023a8 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e1a8      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a24:	4b2b      	ldr	r3, [pc, #172]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a30:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4925      	ldr	r1, [pc, #148]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]
 8003a44:	e015      	b.n	8003a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a46:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <HAL_RCC_OscConfig+0x244>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fe fcac 	bl	80023a8 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a54:	f7fe fca8 	bl	80023a8 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e187      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a66:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d036      	beq.n	8003aec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d016      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <HAL_RCC_OscConfig+0x248>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fe fc8c 	bl	80023a8 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a94:	f7fe fc88 	bl	80023a8 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e167      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x200>
 8003ab2:	e01b      	b.n	8003aec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_RCC_OscConfig+0x248>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aba:	f7fe fc75 	bl	80023a8 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac0:	e00e      	b.n	8003ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac2:	f7fe fc71 	bl	80023a8 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d907      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e150      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	42470000 	.word	0x42470000
 8003adc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	4b88      	ldr	r3, [pc, #544]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1ea      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8097 	beq.w	8003c28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afe:	4b81      	ldr	r3, [pc, #516]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10f      	bne.n	8003b2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	4b7d      	ldr	r3, [pc, #500]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	4a7c      	ldr	r2, [pc, #496]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b18:	6413      	str	r3, [r2, #64]	; 0x40
 8003b1a:	4b7a      	ldr	r3, [pc, #488]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2a:	4b77      	ldr	r3, [pc, #476]	; (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d118      	bne.n	8003b68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b36:	4b74      	ldr	r3, [pc, #464]	; (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a73      	ldr	r2, [pc, #460]	; (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b42:	f7fe fc31 	bl	80023a8 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4a:	f7fe fc2d 	bl	80023a8 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e10c      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5c:	4b6a      	ldr	r3, [pc, #424]	; (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCC_OscConfig+0x2ea>
 8003b70:	4b64      	ldr	r3, [pc, #400]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	4a63      	ldr	r2, [pc, #396]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7c:	e01c      	b.n	8003bb8 <HAL_RCC_OscConfig+0x324>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b05      	cmp	r3, #5
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x30c>
 8003b86:	4b5f      	ldr	r3, [pc, #380]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	4a5e      	ldr	r2, [pc, #376]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	f043 0304 	orr.w	r3, r3, #4
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70
 8003b92:	4b5c      	ldr	r3, [pc, #368]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	4a5b      	ldr	r2, [pc, #364]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9e:	e00b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x324>
 8003ba0:	4b58      	ldr	r3, [pc, #352]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	4a57      	ldr	r2, [pc, #348]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bac:	4b55      	ldr	r3, [pc, #340]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	4a54      	ldr	r2, [pc, #336]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	f023 0304 	bic.w	r3, r3, #4
 8003bb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d015      	beq.n	8003bec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc0:	f7fe fbf2 	bl	80023a8 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	f7fe fbee 	bl	80023a8 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e0cb      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bde:	4b49      	ldr	r3, [pc, #292]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0ee      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x334>
 8003bea:	e014      	b.n	8003c16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bec:	f7fe fbdc 	bl	80023a8 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf4:	f7fe fbd8 	bl	80023a8 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e0b5      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0a:	4b3e      	ldr	r3, [pc, #248]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1ee      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1c:	4b39      	ldr	r3, [pc, #228]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	4a38      	ldr	r2, [pc, #224]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80a1 	beq.w	8003d74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c32:	4b34      	ldr	r3, [pc, #208]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d05c      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d141      	bne.n	8003cca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c46:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <HAL_RCC_OscConfig+0x478>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fe fbac 	bl	80023a8 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fe fba8 	bl	80023a8 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e087      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c66:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69da      	ldr	r2, [r3, #28]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	019b      	lsls	r3, r3, #6
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	085b      	lsrs	r3, r3, #1
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	041b      	lsls	r3, r3, #16
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	491b      	ldr	r1, [pc, #108]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <HAL_RCC_OscConfig+0x478>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fb81 	bl	80023a8 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fe fb7d 	bl	80023a8 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e05c      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cbc:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x416>
 8003cc8:	e054      	b.n	8003d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <HAL_RCC_OscConfig+0x478>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fe fb6a 	bl	80023a8 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fe fb66 	bl	80023a8 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e045      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x444>
 8003cf6:	e03d      	b.n	8003d74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e038      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x4ec>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d028      	beq.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d121      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d11a      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d40:	4013      	ands	r3, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d111      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	085b      	lsrs	r3, r3, #1
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800

08003d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0cc      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d98:	4b68      	ldr	r3, [pc, #416]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d90c      	bls.n	8003dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b65      	ldr	r3, [pc, #404]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b63      	ldr	r3, [pc, #396]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0b8      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d020      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd8:	4b59      	ldr	r3, [pc, #356]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4a58      	ldr	r2, [pc, #352]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003df0:	4b53      	ldr	r3, [pc, #332]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a52      	ldr	r2, [pc, #328]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dfc:	4b50      	ldr	r3, [pc, #320]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	494d      	ldr	r1, [pc, #308]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d044      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d107      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d119      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e07f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d003      	beq.n	8003e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e42:	4b3f      	ldr	r3, [pc, #252]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e06f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e52:	4b3b      	ldr	r3, [pc, #236]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e067      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e62:	4b37      	ldr	r3, [pc, #220]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f023 0203 	bic.w	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4934      	ldr	r1, [pc, #208]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e74:	f7fe fa98 	bl	80023a8 <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7c:	f7fe fa94 	bl	80023a8 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e04f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	4b2b      	ldr	r3, [pc, #172]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 020c 	and.w	r2, r3, #12
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d1eb      	bne.n	8003e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b25      	ldr	r3, [pc, #148]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d20c      	bcs.n	8003ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b22      	ldr	r3, [pc, #136]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e032      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed8:	4b19      	ldr	r3, [pc, #100]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4916      	ldr	r1, [pc, #88]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	490e      	ldr	r1, [pc, #56]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f0a:	f000 f821 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	490a      	ldr	r1, [pc, #40]	; (8003f44 <HAL_RCC_ClockConfig+0x1c0>)
 8003f1c:	5ccb      	ldrb	r3, [r1, r3]
 8003f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f26:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <HAL_RCC_ClockConfig+0x1c8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe f9f8 	bl	8002320 <HAL_InitTick>

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023c00 	.word	0x40023c00
 8003f40:	40023800 	.word	0x40023800
 8003f44:	0800c280 	.word	0x0800c280
 8003f48:	20000000 	.word	0x20000000
 8003f4c:	2000000c 	.word	0x2000000c

08003f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f54:	b090      	sub	sp, #64	; 0x40
 8003f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f60:	2300      	movs	r3, #0
 8003f62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f68:	4b59      	ldr	r3, [pc, #356]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d00d      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x40>
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	f200 80a1 	bhi.w	80040bc <HAL_RCC_GetSysClockFreq+0x16c>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x34>
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d003      	beq.n	8003f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f82:	e09b      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f84:	4b53      	ldr	r3, [pc, #332]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003f88:	e09b      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f8a:	4b53      	ldr	r3, [pc, #332]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f8e:	e098      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f90:	4b4f      	ldr	r3, [pc, #316]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f9a:	4b4d      	ldr	r3, [pc, #308]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d028      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa6:	4b4a      	ldr	r3, [pc, #296]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	099b      	lsrs	r3, r3, #6
 8003fac:	2200      	movs	r2, #0
 8003fae:	623b      	str	r3, [r7, #32]
 8003fb0:	627a      	str	r2, [r7, #36]	; 0x24
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4b47      	ldr	r3, [pc, #284]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fbc:	fb03 f201 	mul.w	r2, r3, r1
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	fb00 f303 	mul.w	r3, r0, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	4a43      	ldr	r2, [pc, #268]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fca:	fba0 1202 	umull	r1, r2, r0, r2
 8003fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fd0:	460a      	mov	r2, r1
 8003fd2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd6:	4413      	add	r3, r2
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fdc:	2200      	movs	r2, #0
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	61fa      	str	r2, [r7, #28]
 8003fe2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003fea:	f7fc fe35 	bl	8000c58 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ff6:	e053      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ff8:	4b35      	ldr	r3, [pc, #212]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	099b      	lsrs	r3, r3, #6
 8003ffe:	2200      	movs	r2, #0
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	617a      	str	r2, [r7, #20]
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800400a:	f04f 0b00 	mov.w	fp, #0
 800400e:	4652      	mov	r2, sl
 8004010:	465b      	mov	r3, fp
 8004012:	f04f 0000 	mov.w	r0, #0
 8004016:	f04f 0100 	mov.w	r1, #0
 800401a:	0159      	lsls	r1, r3, #5
 800401c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004020:	0150      	lsls	r0, r2, #5
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	ebb2 080a 	subs.w	r8, r2, sl
 800402a:	eb63 090b 	sbc.w	r9, r3, fp
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800403a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800403e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004042:	ebb2 0408 	subs.w	r4, r2, r8
 8004046:	eb63 0509 	sbc.w	r5, r3, r9
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	00eb      	lsls	r3, r5, #3
 8004054:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004058:	00e2      	lsls	r2, r4, #3
 800405a:	4614      	mov	r4, r2
 800405c:	461d      	mov	r5, r3
 800405e:	eb14 030a 	adds.w	r3, r4, sl
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	eb45 030b 	adc.w	r3, r5, fp
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004076:	4629      	mov	r1, r5
 8004078:	028b      	lsls	r3, r1, #10
 800407a:	4621      	mov	r1, r4
 800407c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004080:	4621      	mov	r1, r4
 8004082:	028a      	lsls	r2, r1, #10
 8004084:	4610      	mov	r0, r2
 8004086:	4619      	mov	r1, r3
 8004088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408a:	2200      	movs	r2, #0
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	60fa      	str	r2, [r7, #12]
 8004090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004094:	f7fc fde0 	bl	8000c58 <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4613      	mov	r3, r2
 800409e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	3301      	adds	r3, #1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80040b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040ba:	e002      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80040be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3740      	adds	r7, #64	; 0x40
 80040c8:	46bd      	mov	sp, r7
 80040ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800
 80040d4:	00f42400 	.word	0x00f42400
 80040d8:	017d7840 	.word	0x017d7840

080040dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000000 	.word	0x20000000

080040f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040f8:	f7ff fff0 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b05      	ldr	r3, [pc, #20]	; (8004114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	0a9b      	lsrs	r3, r3, #10
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	4903      	ldr	r1, [pc, #12]	; (8004118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004110:	4618      	mov	r0, r3
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40023800 	.word	0x40023800
 8004118:	0800c290 	.word	0x0800c290

0800411c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e022      	b.n	8004174 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d105      	bne.n	8004146 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fd fc79 	bl	8001a38 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2203      	movs	r2, #3
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f814 	bl	800417c <HAL_SD_InitCard>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e00a      	b.n	8004174 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800417c:	b5b0      	push	{r4, r5, r7, lr}
 800417e:	b08e      	sub	sp, #56	; 0x38
 8004180:	af04      	add	r7, sp, #16
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004184:	2300      	movs	r3, #0
 8004186:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800418c:	2300      	movs	r3, #0
 800418e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004194:	2300      	movs	r3, #0
 8004196:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004198:	2376      	movs	r3, #118	; 0x76
 800419a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681d      	ldr	r5, [r3, #0]
 80041a0:	466c      	mov	r4, sp
 80041a2:	f107 0314 	add.w	r3, r7, #20
 80041a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80041ae:	f107 0308 	add.w	r3, r7, #8
 80041b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041b4:	4628      	mov	r0, r5
 80041b6:	f002 f833 	bl	8006220 <SDIO_Init>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80041c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e04f      	b.n	800426c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80041cc:	4b29      	ldr	r3, [pc, #164]	; (8004274 <HAL_SD_InitCard+0xf8>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f002 f86b 	bl	80062b2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80041dc:	4b25      	ldr	r3, [pc, #148]	; (8004274 <HAL_SD_InitCard+0xf8>)
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80041e2:	2002      	movs	r0, #2
 80041e4:	f7fe f8ec 	bl	80023c0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 ff03 	bl	8004ff4 <SD_PowerON>
 80041ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00b      	beq.n	800420e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e02e      	b.n	800426c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fe22 	bl	8004e58 <SD_InitCard>
 8004214:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00b      	beq.n	8004234 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e01b      	b.n	800426c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800423c:	4618      	mov	r0, r3
 800423e:	f002 f8ca 	bl	80063d6 <SDMMC_CmdBlockLength>
 8004242:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00f      	beq.n	800426a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a0a      	ldr	r2, [pc, #40]	; (8004278 <HAL_SD_InitCard+0xfc>)
 8004250:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3728      	adds	r7, #40	; 0x28
 8004270:	46bd      	mov	sp, r7
 8004272:	bdb0      	pop	{r4, r5, r7, pc}
 8004274:	422580a0 	.word	0x422580a0
 8004278:	004005ff 	.word	0x004005ff

0800427c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b092      	sub	sp, #72	; 0x48
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800428a:	f7fe f88d 	bl	80023a8 <HAL_GetTick>
 800428e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d107      	bne.n	80042ae <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e1bd      	b.n	800462a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	f040 81b0 	bne.w	800461c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80042c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	441a      	add	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d907      	bls.n	80042e0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e1a4      	b.n	800462a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2203      	movs	r2, #3
 80042e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2200      	movs	r2, #0
 80042ee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d002      	beq.n	80042fe <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80042f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fa:	025b      	lsls	r3, r3, #9
 80042fc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80042fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004302:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	025b      	lsls	r3, r3, #9
 8004308:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800430a:	2390      	movs	r3, #144	; 0x90
 800430c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800430e:	2302      	movs	r3, #2
 8004310:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004312:	2300      	movs	r3, #0
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004316:	2301      	movs	r3, #1
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f107 0214 	add.w	r2, r7, #20
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f002 f82a 	bl	800637e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d90a      	bls.n	8004346 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2202      	movs	r2, #2
 8004334:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800433c:	4618      	mov	r0, r3
 800433e:	f002 f88e 	bl	800645e <SDMMC_CmdReadMultiBlock>
 8004342:	6478      	str	r0, [r7, #68]	; 0x44
 8004344:	e009      	b.n	800435a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004352:	4618      	mov	r0, r3
 8004354:	f002 f861 	bl	800641a <SDMMC_CmdReadSingleBlock>
 8004358:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800435a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800435c:	2b00      	cmp	r3, #0
 800435e:	d012      	beq.n	8004386 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a7a      	ldr	r2, [pc, #488]	; (8004550 <HAL_SD_ReadBlocks+0x2d4>)
 8004366:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800436c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436e:	431a      	orrs	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e151      	b.n	800462a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800438a:	e061      	b.n	8004450 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d03c      	beq.n	8004414 <HAL_SD_ReadBlocks+0x198>
 800439a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d039      	beq.n	8004414 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	643b      	str	r3, [r7, #64]	; 0x40
 80043a4:	e033      	b.n	800440e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f001 ff63 	bl	8006276 <SDIO_ReadFIFO>
 80043b0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80043ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043bc:	3301      	adds	r3, #1
 80043be:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80043c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c2:	3b01      	subs	r3, #1
 80043c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	0a1b      	lsrs	r3, r3, #8
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ce:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80043d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d2:	3301      	adds	r3, #1
 80043d4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80043d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d8:	3b01      	subs	r3, #1
 80043da:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80043e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e8:	3301      	adds	r3, #1
 80043ea:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80043ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ee:	3b01      	subs	r3, #1
 80043f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	0e1b      	lsrs	r3, r3, #24
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80043fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fe:	3301      	adds	r3, #1
 8004400:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004404:	3b01      	subs	r3, #1
 8004406:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800440a:	3301      	adds	r3, #1
 800440c:	643b      	str	r3, [r7, #64]	; 0x40
 800440e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004410:	2b07      	cmp	r3, #7
 8004412:	d9c8      	bls.n	80043a6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004414:	f7fd ffc8 	bl	80023a8 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004420:	429a      	cmp	r2, r3
 8004422:	d902      	bls.n	800442a <HAL_SD_ReadBlocks+0x1ae>
 8004424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004426:	2b00      	cmp	r3, #0
 8004428:	d112      	bne.n	8004450 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a48      	ldr	r2, [pc, #288]	; (8004550 <HAL_SD_ReadBlocks+0x2d4>)
 8004430:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e0ec      	b.n	800462a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004456:	f240 332a 	movw	r3, #810	; 0x32a
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d095      	beq.n	800438c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d022      	beq.n	80044b4 <HAL_SD_ReadBlocks+0x238>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d91f      	bls.n	80044b4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	2b03      	cmp	r3, #3
 800447a:	d01b      	beq.n	80044b4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f002 f853 	bl	800652c <SDMMC_CmdStopTransfer>
 8004486:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800448a:	2b00      	cmp	r3, #0
 800448c:	d012      	beq.n	80044b4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a2f      	ldr	r2, [pc, #188]	; (8004550 <HAL_SD_ReadBlocks+0x2d4>)
 8004494:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449c:	431a      	orrs	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0ba      	b.n	800462a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d012      	beq.n	80044e8 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a22      	ldr	r2, [pc, #136]	; (8004550 <HAL_SD_ReadBlocks+0x2d4>)
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	f043 0208 	orr.w	r2, r3, #8
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0a0      	b.n	800462a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d012      	beq.n	800451c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a15      	ldr	r2, [pc, #84]	; (8004550 <HAL_SD_ReadBlocks+0x2d4>)
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	f043 0202 	orr.w	r2, r3, #2
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e086      	b.n	800462a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d063      	beq.n	80045f2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a08      	ldr	r2, [pc, #32]	; (8004550 <HAL_SD_ReadBlocks+0x2d4>)
 8004530:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	f043 0220 	orr.w	r2, r3, #32
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e06c      	b.n	800462a <HAL_SD_ReadBlocks+0x3ae>
 8004550:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4618      	mov	r0, r3
 800455a:	f001 fe8c 	bl	8006276 <SDIO_ReadFIFO>
 800455e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004562:	b2da      	uxtb	r2, r3
 8004564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004566:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456a:	3301      	adds	r3, #1
 800456c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800456e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004570:	3b01      	subs	r3, #1
 8004572:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	b2da      	uxtb	r2, r3
 800457a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800457e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004580:	3301      	adds	r3, #1
 8004582:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004586:	3b01      	subs	r3, #1
 8004588:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800458a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	b2da      	uxtb	r2, r3
 8004590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004592:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004596:	3301      	adds	r3, #1
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800459a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800459c:	3b01      	subs	r3, #1
 800459e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80045a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a2:	0e1b      	lsrs	r3, r3, #24
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80045aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ac:	3301      	adds	r3, #1
 80045ae:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80045b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b2:	3b01      	subs	r3, #1
 80045b4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80045b6:	f7fd fef7 	bl	80023a8 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d902      	bls.n	80045cc <HAL_SD_ReadBlocks+0x350>
 80045c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d112      	bne.n	80045f2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a18      	ldr	r2, [pc, #96]	; (8004634 <HAL_SD_ReadBlocks+0x3b8>)
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e01b      	b.n	800462a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <HAL_SD_ReadBlocks+0x38a>
 8004600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1a6      	bne.n	8004554 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f240 523a 	movw	r2, #1338	; 0x53a
 800460e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	e006      	b.n	800462a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
  }
}
 800462a:	4618      	mov	r0, r3
 800462c:	3748      	adds	r7, #72	; 0x48
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	004005ff 	.word	0x004005ff

08004638 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b092      	sub	sp, #72	; 0x48
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004646:	f7fd feaf 	bl	80023a8 <HAL_GetTick>
 800464a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d107      	bne.n	800466a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e166      	b.n	8004938 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b01      	cmp	r3, #1
 8004674:	f040 8159 	bne.w	800492a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800467e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	441a      	add	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	429a      	cmp	r2, r3
 800468a:	d907      	bls.n	800469c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e14d      	b.n	8004938 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2203      	movs	r2, #3
 80046a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2200      	movs	r2, #0
 80046aa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d002      	beq.n	80046ba <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80046b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b6:	025b      	lsls	r3, r3, #9
 80046b8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80046ba:	f04f 33ff 	mov.w	r3, #4294967295
 80046be:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	025b      	lsls	r3, r3, #9
 80046c4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80046c6:	2390      	movs	r3, #144	; 0x90
 80046c8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80046ca:	2300      	movs	r3, #0
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80046d2:	2301      	movs	r3, #1
 80046d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f107 0218 	add.w	r2, r7, #24
 80046de:	4611      	mov	r1, r2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f001 fe4c 	bl	800637e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d90a      	bls.n	8004702 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046f8:	4618      	mov	r0, r3
 80046fa:	f001 fef4 	bl	80064e6 <SDMMC_CmdWriteMultiBlock>
 80046fe:	6478      	str	r0, [r7, #68]	; 0x44
 8004700:	e009      	b.n	8004716 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2210      	movs	r2, #16
 8004706:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800470e:	4618      	mov	r0, r3
 8004710:	f001 fec7 	bl	80064a2 <SDMMC_CmdWriteSingleBlock>
 8004714:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004718:	2b00      	cmp	r3, #0
 800471a:	d012      	beq.n	8004742 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a87      	ldr	r2, [pc, #540]	; (8004940 <HAL_SD_WriteBlocks+0x308>)
 8004722:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800472a:	431a      	orrs	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e0fa      	b.n	8004938 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004746:	e065      	b.n	8004814 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d040      	beq.n	80047d8 <HAL_SD_WriteBlocks+0x1a0>
 8004756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d03d      	beq.n	80047d8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800475c:	2300      	movs	r3, #0
 800475e:	643b      	str	r3, [r7, #64]	; 0x40
 8004760:	e037      	b.n	80047d2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476a:	3301      	adds	r3, #1
 800476c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800476e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004770:	3b01      	subs	r3, #1
 8004772:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	021a      	lsls	r2, r3, #8
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004782:	3301      	adds	r3, #1
 8004784:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004788:	3b01      	subs	r3, #1
 800478a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800478c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	041a      	lsls	r2, r3, #16
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479a:	3301      	adds	r3, #1
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800479e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a0:	3b01      	subs	r3, #1
 80047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80047a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	061a      	lsls	r2, r3, #24
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80047b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b2:	3301      	adds	r3, #1
 80047b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80047b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b8:	3b01      	subs	r3, #1
 80047ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f107 0214 	add.w	r2, r7, #20
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f001 fd62 	bl	8006290 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80047cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ce:	3301      	adds	r3, #1
 80047d0:	643b      	str	r3, [r7, #64]	; 0x40
 80047d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d4:	2b07      	cmp	r3, #7
 80047d6:	d9c4      	bls.n	8004762 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80047d8:	f7fd fde6 	bl	80023a8 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d902      	bls.n	80047ee <HAL_SD_WriteBlocks+0x1b6>
 80047e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d112      	bne.n	8004814 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a53      	ldr	r2, [pc, #332]	; (8004940 <HAL_SD_WriteBlocks+0x308>)
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e091      	b.n	8004938 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800481a:	f240 331a 	movw	r3, #794	; 0x31a
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d091      	beq.n	8004748 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482e:	2b00      	cmp	r3, #0
 8004830:	d022      	beq.n	8004878 <HAL_SD_WriteBlocks+0x240>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d91f      	bls.n	8004878 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	2b03      	cmp	r3, #3
 800483e:	d01b      	beq.n	8004878 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f001 fe71 	bl	800652c <SDMMC_CmdStopTransfer>
 800484a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800484c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800484e:	2b00      	cmp	r3, #0
 8004850:	d012      	beq.n	8004878 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a3a      	ldr	r2, [pc, #232]	; (8004940 <HAL_SD_WriteBlocks+0x308>)
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004860:	431a      	orrs	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e05f      	b.n	8004938 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d012      	beq.n	80048ac <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a2d      	ldr	r2, [pc, #180]	; (8004940 <HAL_SD_WriteBlocks+0x308>)
 800488c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	f043 0208 	orr.w	r2, r3, #8
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e045      	b.n	8004938 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d012      	beq.n	80048e0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a20      	ldr	r2, [pc, #128]	; (8004940 <HAL_SD_WriteBlocks+0x308>)
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	f043 0202 	orr.w	r2, r3, #2
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e02b      	b.n	8004938 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d012      	beq.n	8004914 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a13      	ldr	r2, [pc, #76]	; (8004940 <HAL_SD_WriteBlocks+0x308>)
 80048f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	f043 0210 	orr.w	r2, r3, #16
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e011      	b.n	8004938 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f240 523a 	movw	r2, #1338	; 0x53a
 800491c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	e006      	b.n	8004938 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
  }
}
 8004938:	4618      	mov	r0, r3
 800493a:	3748      	adds	r7, #72	; 0x48
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	004005ff 	.word	0x004005ff

08004944 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004952:	0f9b      	lsrs	r3, r3, #30
 8004954:	b2da      	uxtb	r2, r3
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800495e:	0e9b      	lsrs	r3, r3, #26
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	b2da      	uxtb	r2, r3
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004970:	0e1b      	lsrs	r3, r3, #24
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	b2da      	uxtb	r2, r3
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004982:	0c1b      	lsrs	r3, r3, #16
 8004984:	b2da      	uxtb	r2, r3
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800498e:	0a1b      	lsrs	r3, r3, #8
 8004990:	b2da      	uxtb	r2, r3
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800499a:	b2da      	uxtb	r2, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049a4:	0d1b      	lsrs	r3, r3, #20
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c2:	0bdb      	lsrs	r3, r3, #15
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049d4:	0b9b      	lsrs	r3, r3, #14
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e6:	0b5b      	lsrs	r3, r3, #13
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049f8:	0b1b      	lsrs	r3, r3, #12
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d163      	bne.n	8004adc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a18:	009a      	lsls	r2, r3, #2
 8004a1a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a1e:	4013      	ands	r3, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004a24:	0f92      	lsrs	r2, r2, #30
 8004a26:	431a      	orrs	r2, r3
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a30:	0edb      	lsrs	r3, r3, #27
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a42:	0e1b      	lsrs	r3, r3, #24
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a54:	0d5b      	lsrs	r3, r3, #21
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a66:	0c9b      	lsrs	r3, r3, #18
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a78:	0bdb      	lsrs	r3, r3, #15
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	7e1b      	ldrb	r3, [r3, #24]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004aa6:	fb03 f202 	mul.w	r2, r3, r2
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	7a1b      	ldrb	r3, [r3, #8]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	2201      	movs	r2, #1
 8004aba:	409a      	lsls	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004ac8:	0a52      	lsrs	r2, r2, #9
 8004aca:	fb03 f202 	mul.w	r2, r3, r2
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ad8:	661a      	str	r2, [r3, #96]	; 0x60
 8004ada:	e031      	b.n	8004b40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d11d      	bne.n	8004b20 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ae8:	041b      	lsls	r3, r3, #16
 8004aea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af2:	0c1b      	lsrs	r3, r3, #16
 8004af4:	431a      	orrs	r2, r3
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	3301      	adds	r3, #1
 8004b00:	029a      	lsls	r2, r3, #10
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b14:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	661a      	str	r2, [r3, #96]	; 0x60
 8004b1e:	e00f      	b.n	8004b40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a58      	ldr	r2, [pc, #352]	; (8004c88 <HAL_SD_GetCardCSD+0x344>)
 8004b26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e09d      	b.n	8004c7c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b44:	0b9b      	lsrs	r3, r3, #14
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b56:	09db      	lsrs	r3, r3, #7
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	0fdb      	lsrs	r3, r3, #31
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	0f5b      	lsrs	r3, r3, #29
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	0e9b      	lsrs	r3, r3, #26
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	0d9b      	lsrs	r3, r3, #22
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	0d5b      	lsrs	r3, r3, #21
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd6:	0c1b      	lsrs	r3, r3, #16
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bea:	0bdb      	lsrs	r3, r3, #15
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	0b9b      	lsrs	r3, r3, #14
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	0b5b      	lsrs	r3, r3, #13
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	0b1b      	lsrs	r3, r3, #12
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	0a9b      	lsrs	r3, r3, #10
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	0a1b      	lsrs	r3, r3, #8
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	004005ff 	.word	0x004005ff

08004c8c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004ce4:	b5b0      	push	{r4, r5, r7, lr}
 8004ce6:	b08e      	sub	sp, #56	; 0x38
 8004ce8:	af04      	add	r7, sp, #16
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d02e      	beq.n	8004d62 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0a:	d106      	bne.n	8004d1a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	639a      	str	r2, [r3, #56]	; 0x38
 8004d18:	e029      	b.n	8004d6e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d20:	d10a      	bne.n	8004d38 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fa1c 	bl	8005160 <SD_WideBus_Enable>
 8004d28:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38
 8004d36:	e01a      	b.n	8004d6e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fa59 	bl	80051f6 <SD_WideBus_Disable>
 8004d44:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
 8004d52:	e00c      	b.n	8004d6e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38
 8004d60:	e005      	b.n	8004d6e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a26      	ldr	r2, [pc, #152]	; (8004e14 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d8c:	e01f      	b.n	8004dce <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681d      	ldr	r5, [r3, #0]
 8004db4:	466c      	mov	r4, sp
 8004db6:	f107 0314 	add.w	r3, r7, #20
 8004dba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004dbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004dc2:	f107 0308 	add.w	r3, r7, #8
 8004dc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f001 fa29 	bl	8006220 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 fafd 	bl	80063d6 <SDMMC_CmdBlockLength>
 8004ddc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00c      	beq.n	8004dfe <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a0a      	ldr	r2, [pc, #40]	; (8004e14 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3728      	adds	r7, #40	; 0x28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bdb0      	pop	{r4, r5, r7, pc}
 8004e12:	bf00      	nop
 8004e14:	004005ff 	.word	0x004005ff

08004e18 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004e24:	f107 030c 	add.w	r3, r7, #12
 8004e28:	4619      	mov	r1, r3
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f970 	bl	8005110 <SD_SendStatus>
 8004e30:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	0a5b      	lsrs	r3, r3, #9
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004e4e:	693b      	ldr	r3, [r7, #16]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004e58:	b5b0      	push	{r4, r5, r7, lr}
 8004e5a:	b094      	sub	sp, #80	; 0x50
 8004e5c:	af04      	add	r7, sp, #16
 8004e5e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004e60:	2301      	movs	r3, #1
 8004e62:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f001 fa30 	bl	80062ce <SDIO_GetPowerState>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d102      	bne.n	8004e7a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004e74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004e78:	e0b8      	b.n	8004fec <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d02f      	beq.n	8004ee2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 fc5a 	bl	8006740 <SDMMC_CmdSendCID>
 8004e8c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <SD_InitCard+0x40>
    {
      return errorstate;
 8004e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e96:	e0a9      	b.n	8004fec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 fa5a 	bl	8006358 <SDIO_GetResponse>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2104      	movs	r1, #4
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 fa51 	bl	8006358 <SDIO_GetResponse>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2108      	movs	r1, #8
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 fa48 	bl	8006358 <SDIO_GetResponse>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	210c      	movs	r1, #12
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f001 fa3f 	bl	8006358 <SDIO_GetResponse>
 8004eda:	4602      	mov	r2, r0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d00d      	beq.n	8004f06 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f107 020e 	add.w	r2, r7, #14
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f001 fc60 	bl	80067ba <SDMMC_CmdSetRelAdd>
 8004efa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <SD_InitCard+0xae>
    {
      return errorstate;
 8004f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f04:	e072      	b.n	8004fec <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d036      	beq.n	8004f7c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004f0e:	89fb      	ldrh	r3, [r7, #14]
 8004f10:	461a      	mov	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1e:	041b      	lsls	r3, r3, #16
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	f001 fc2a 	bl	800677c <SDMMC_CmdSendCSD>
 8004f28:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f32:	e05b      	b.n	8004fec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f001 fa0c 	bl	8006358 <SDIO_GetResponse>
 8004f40:	4602      	mov	r2, r0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2104      	movs	r1, #4
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 fa03 	bl	8006358 <SDIO_GetResponse>
 8004f52:	4602      	mov	r2, r0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2108      	movs	r1, #8
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 f9fa 	bl	8006358 <SDIO_GetResponse>
 8004f64:	4602      	mov	r2, r0
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	210c      	movs	r1, #12
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 f9f1 	bl	8006358 <SDIO_GetResponse>
 8004f76:	4602      	mov	r2, r0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2104      	movs	r1, #4
 8004f82:	4618      	mov	r0, r3
 8004f84:	f001 f9e8 	bl	8006358 <SDIO_GetResponse>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	0d1a      	lsrs	r2, r3, #20
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004f90:	f107 0310 	add.w	r3, r7, #16
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff fcd4 	bl	8004944 <HAL_SD_GetCardCSD>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004fa6:	e021      	b.n	8004fec <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6819      	ldr	r1, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb0:	041b      	lsls	r3, r3, #16
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	461c      	mov	r4, r3
 8004fb6:	4615      	mov	r5, r2
 8004fb8:	4622      	mov	r2, r4
 8004fba:	462b      	mov	r3, r5
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	f001 fad7 	bl	8006570 <SDMMC_CmdSelDesel>
 8004fc2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <SD_InitCard+0x176>
  {
    return errorstate;
 8004fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fcc:	e00e      	b.n	8004fec <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681d      	ldr	r5, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	466c      	mov	r4, sp
 8004fd6:	f103 0210 	add.w	r2, r3, #16
 8004fda:	ca07      	ldmia	r2, {r0, r1, r2}
 8004fdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	f001 f91b 	bl	8006220 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3740      	adds	r7, #64	; 0x40
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bdb0      	pop	{r4, r5, r7, pc}

08004ff4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4618      	mov	r0, r3
 800500e:	f001 fad2 	bl	80065b6 <SDMMC_CmdGoIdleState>
 8005012:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <SD_PowerON+0x2a>
  {
    return errorstate;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	e072      	b.n	8005104 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f001 fae5 	bl	80065f2 <SDMMC_CmdOperCond>
 8005028:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00d      	beq.n	800504c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f001 fabb 	bl	80065b6 <SDMMC_CmdGoIdleState>
 8005040:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d004      	beq.n	8005052 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	e05b      	b.n	8005104 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005056:	2b01      	cmp	r3, #1
 8005058:	d137      	bne.n	80050ca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2100      	movs	r1, #0
 8005060:	4618      	mov	r0, r3
 8005062:	f001 fae5 	bl	8006630 <SDMMC_CmdAppCommand>
 8005066:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d02d      	beq.n	80050ca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800506e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005072:	e047      	b.n	8005104 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2100      	movs	r1, #0
 800507a:	4618      	mov	r0, r3
 800507c:	f001 fad8 	bl	8006630 <SDMMC_CmdAppCommand>
 8005080:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <SD_PowerON+0x98>
    {
      return errorstate;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	e03b      	b.n	8005104 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	491e      	ldr	r1, [pc, #120]	; (800510c <SD_PowerON+0x118>)
 8005092:	4618      	mov	r0, r3
 8005094:	f001 faee 	bl	8006674 <SDMMC_CmdAppOperCommand>
 8005098:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80050a4:	e02e      	b.n	8005104 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2100      	movs	r1, #0
 80050ac:	4618      	mov	r0, r3
 80050ae:	f001 f953 	bl	8006358 <SDIO_GetResponse>
 80050b2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	0fdb      	lsrs	r3, r3, #31
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <SD_PowerON+0xcc>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <SD_PowerON+0xce>
 80050c0:	2300      	movs	r3, #0
 80050c2:	613b      	str	r3, [r7, #16]

    count++;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	3301      	adds	r3, #1
 80050c8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d802      	bhi.n	80050da <SD_PowerON+0xe6>
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0cc      	beq.n	8005074 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d902      	bls.n	80050ea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80050e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050e8:	e00c      	b.n	8005104 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	645a      	str	r2, [r3, #68]	; 0x44
 80050fa:	e002      	b.n	8005102 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	c1100000 	.word	0xc1100000

08005110 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d102      	bne.n	8005126 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005120:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005124:	e018      	b.n	8005158 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512e:	041b      	lsls	r3, r3, #16
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f001 fb62 	bl	80067fc <SDMMC_CmdSendStatus>
 8005138:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	e009      	b.n	8005158 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2100      	movs	r1, #0
 800514a:	4618      	mov	r0, r3
 800514c:	f001 f904 	bl	8006358 <SDIO_GetResponse>
 8005150:	4602      	mov	r2, r0
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	2300      	movs	r3, #0
 800516e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f001 f8ee 	bl	8006358 <SDIO_GetResponse>
 800517c:	4603      	mov	r3, r0
 800517e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005182:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005186:	d102      	bne.n	800518e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005188:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800518c:	e02f      	b.n	80051ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800518e:	f107 030c 	add.w	r3, r7, #12
 8005192:	4619      	mov	r1, r3
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f879 	bl	800528c <SD_FindSCR>
 800519a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	e023      	b.n	80051ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01c      	beq.n	80051ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b8:	041b      	lsls	r3, r3, #16
 80051ba:	4619      	mov	r1, r3
 80051bc:	4610      	mov	r0, r2
 80051be:	f001 fa37 	bl	8006630 <SDMMC_CmdAppCommand>
 80051c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	e00f      	b.n	80051ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2102      	movs	r1, #2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 fa70 	bl	80066ba <SDMMC_CmdBusWidth>
 80051da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	e003      	b.n	80051ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e001      	b.n	80051ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80051ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b086      	sub	sp, #24
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	2300      	movs	r3, #0
 8005204:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2100      	movs	r1, #0
 800520c:	4618      	mov	r0, r3
 800520e:	f001 f8a3 	bl	8006358 <SDIO_GetResponse>
 8005212:	4603      	mov	r3, r0
 8005214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800521c:	d102      	bne.n	8005224 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800521e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005222:	e02f      	b.n	8005284 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005224:	f107 030c 	add.w	r3, r7, #12
 8005228:	4619      	mov	r1, r3
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f82e 	bl	800528c <SD_FindSCR>
 8005230:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	e023      	b.n	8005284 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d01c      	beq.n	8005280 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800524e:	041b      	lsls	r3, r3, #16
 8005250:	4619      	mov	r1, r3
 8005252:	4610      	mov	r0, r2
 8005254:	f001 f9ec 	bl	8006630 <SDMMC_CmdAppCommand>
 8005258:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	e00f      	b.n	8005284 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f001 fa25 	bl	80066ba <SDMMC_CmdBusWidth>
 8005270:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	e003      	b.n	8005284 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800527c:	2300      	movs	r3, #0
 800527e:	e001      	b.n	8005284 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005280:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800528c:	b590      	push	{r4, r7, lr}
 800528e:	b08f      	sub	sp, #60	; 0x3c
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005296:	f7fd f887 	bl	80023a8 <HAL_GetTick>
 800529a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80052a0:	2300      	movs	r3, #0
 80052a2:	60bb      	str	r3, [r7, #8]
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2108      	movs	r1, #8
 80052b2:	4618      	mov	r0, r3
 80052b4:	f001 f88f 	bl	80063d6 <SDMMC_CmdBlockLength>
 80052b8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	e0b2      	b.n	800542a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	4619      	mov	r1, r3
 80052d0:	4610      	mov	r0, r2
 80052d2:	f001 f9ad 	bl	8006630 <SDMMC_CmdAppCommand>
 80052d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	e0a3      	b.n	800542a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80052e2:	f04f 33ff 	mov.w	r3, #4294967295
 80052e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80052e8:	2308      	movs	r3, #8
 80052ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80052ec:	2330      	movs	r3, #48	; 0x30
 80052ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80052f0:	2302      	movs	r3, #2
 80052f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f107 0210 	add.w	r2, r7, #16
 8005304:	4611      	mov	r1, r2
 8005306:	4618      	mov	r0, r3
 8005308:	f001 f839 	bl	800637e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f001 f9f4 	bl	80066fe <SDMMC_CmdSendSCR>
 8005316:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	2b00      	cmp	r3, #0
 800531c:	d02a      	beq.n	8005374 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	e083      	b.n	800542a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00f      	beq.n	8005350 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6819      	ldr	r1, [r3, #0]
 8005334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	f107 0208 	add.w	r2, r7, #8
 800533c:	18d4      	adds	r4, r2, r3
 800533e:	4608      	mov	r0, r1
 8005340:	f000 ff99 	bl	8006276 <SDIO_ReadFIFO>
 8005344:	4603      	mov	r3, r0
 8005346:	6023      	str	r3, [r4, #0]
      index++;
 8005348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534a:	3301      	adds	r3, #1
 800534c:	637b      	str	r3, [r7, #52]	; 0x34
 800534e:	e006      	b.n	800535e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005356:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d012      	beq.n	8005384 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800535e:	f7fd f823 	bl	80023a8 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536c:	d102      	bne.n	8005374 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800536e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005372:	e05a      	b.n	800542a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0cf      	beq.n	8005322 <SD_FindSCR+0x96>
 8005382:	e000      	b.n	8005386 <SD_FindSCR+0xfa>
      break;
 8005384:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2208      	movs	r2, #8
 800539a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800539c:	2308      	movs	r3, #8
 800539e:	e044      	b.n	800542a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2202      	movs	r2, #2
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80053b6:	2302      	movs	r3, #2
 80053b8:	e037      	b.n	800542a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2220      	movs	r2, #32
 80053ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80053d0:	2320      	movs	r3, #32
 80053d2:	e02a      	b.n	800542a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f240 523a 	movw	r2, #1338	; 0x53a
 80053dc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	061a      	lsls	r2, r3, #24
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	0a1b      	lsrs	r3, r3, #8
 80053f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80053f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	0e1b      	lsrs	r3, r3, #24
 80053fa:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	601a      	str	r2, [r3, #0]
    scr++;
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	3304      	adds	r3, #4
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	061a      	lsls	r2, r3, #24
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005412:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	0a1b      	lsrs	r3, r3, #8
 8005418:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800541c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	0e1b      	lsrs	r3, r3, #24
 8005422:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	373c      	adds	r7, #60	; 0x3c
 800542e:	46bd      	mov	sp, r7
 8005430:	bd90      	pop	{r4, r7, pc}

08005432 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e041      	b.n	80054c8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d106      	bne.n	800545e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7fc fb57 	bl	8001b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3304      	adds	r3, #4
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f000 fbad 	bl	8005bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d001      	beq.n	80054e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e044      	b.n	8005572 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1e      	ldr	r2, [pc, #120]	; (8005580 <HAL_TIM_Base_Start_IT+0xb0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d018      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x6c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005512:	d013      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x6c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1a      	ldr	r2, [pc, #104]	; (8005584 <HAL_TIM_Base_Start_IT+0xb4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00e      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x6c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a19      	ldr	r2, [pc, #100]	; (8005588 <HAL_TIM_Base_Start_IT+0xb8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d009      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x6c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a17      	ldr	r2, [pc, #92]	; (800558c <HAL_TIM_Base_Start_IT+0xbc>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x6c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a16      	ldr	r2, [pc, #88]	; (8005590 <HAL_TIM_Base_Start_IT+0xc0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d111      	bne.n	8005560 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b06      	cmp	r3, #6
 800554c:	d010      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0201 	orr.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555e:	e007      	b.n	8005570 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	40014000 	.word	0x40014000

08005594 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e041      	b.n	800562a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f839 	bl	8005632 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f000 fafc 	bl	8005bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b02      	cmp	r3, #2
 800565a:	d122      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b02      	cmp	r3, #2
 8005668:	d11b      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f06f 0202 	mvn.w	r2, #2
 8005672:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fa82 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 800568e:	e005      	b.n	800569c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fa74 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fa85 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d122      	bne.n	80056f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d11b      	bne.n	80056f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f06f 0204 	mvn.w	r2, #4
 80056c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fa58 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 80056e2:	e005      	b.n	80056f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fa4a 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa5b 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b08      	cmp	r3, #8
 8005702:	d122      	bne.n	800574a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b08      	cmp	r3, #8
 8005710:	d11b      	bne.n	800574a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f06f 0208 	mvn.w	r2, #8
 800571a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2204      	movs	r2, #4
 8005720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fa2e 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 8005736:	e005      	b.n	8005744 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fa20 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fa31 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b10      	cmp	r3, #16
 8005756:	d122      	bne.n	800579e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b10      	cmp	r3, #16
 8005764:	d11b      	bne.n	800579e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f06f 0210 	mvn.w	r2, #16
 800576e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2208      	movs	r2, #8
 8005774:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fa04 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 800578a:	e005      	b.n	8005798 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f9f6 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa07 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d10e      	bne.n	80057ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d107      	bne.n	80057ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f06f 0201 	mvn.w	r2, #1
 80057c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f9d0 	bl	8005b6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d4:	2b80      	cmp	r3, #128	; 0x80
 80057d6:	d10e      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e2:	2b80      	cmp	r3, #128	; 0x80
 80057e4:	d107      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fd0b 	bl	800620c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	d10e      	bne.n	8005822 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	d107      	bne.n	8005822 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800581a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f9cc 	bl	8005bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b20      	cmp	r3, #32
 800582e:	d10e      	bne.n	800584e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b20      	cmp	r3, #32
 800583c:	d107      	bne.n	800584e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f06f 0220 	mvn.w	r2, #32
 8005846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fcd5 	bl	80061f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005872:	2302      	movs	r3, #2
 8005874:	e0ae      	b.n	80059d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b0c      	cmp	r3, #12
 8005882:	f200 809f 	bhi.w	80059c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005886:	a201      	add	r2, pc, #4	; (adr r2, 800588c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	080058c1 	.word	0x080058c1
 8005890:	080059c5 	.word	0x080059c5
 8005894:	080059c5 	.word	0x080059c5
 8005898:	080059c5 	.word	0x080059c5
 800589c:	08005901 	.word	0x08005901
 80058a0:	080059c5 	.word	0x080059c5
 80058a4:	080059c5 	.word	0x080059c5
 80058a8:	080059c5 	.word	0x080059c5
 80058ac:	08005943 	.word	0x08005943
 80058b0:	080059c5 	.word	0x080059c5
 80058b4:	080059c5 	.word	0x080059c5
 80058b8:	080059c5 	.word	0x080059c5
 80058bc:	08005983 	.word	0x08005983
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fa02 	bl	8005cd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0208 	orr.w	r2, r2, #8
 80058da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0204 	bic.w	r2, r2, #4
 80058ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6999      	ldr	r1, [r3, #24]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	619a      	str	r2, [r3, #24]
      break;
 80058fe:	e064      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fa48 	bl	8005d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800591a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800592a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6999      	ldr	r1, [r3, #24]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	021a      	lsls	r2, r3, #8
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	619a      	str	r2, [r3, #24]
      break;
 8005940:	e043      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fa93 	bl	8005e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f042 0208 	orr.w	r2, r2, #8
 800595c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0204 	bic.w	r2, r2, #4
 800596c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69d9      	ldr	r1, [r3, #28]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	61da      	str	r2, [r3, #28]
      break;
 8005980:	e023      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fadd 	bl	8005f48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800599c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69d9      	ldr	r1, [r3, #28]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	021a      	lsls	r2, r3, #8
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	61da      	str	r2, [r3, #28]
      break;
 80059c2:	e002      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	75fb      	strb	r3, [r7, #23]
      break;
 80059c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_TIM_ConfigClockSource+0x1c>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e0b4      	b.n	8005b62 <HAL_TIM_ConfigClockSource+0x186>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a30:	d03e      	beq.n	8005ab0 <HAL_TIM_ConfigClockSource+0xd4>
 8005a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a36:	f200 8087 	bhi.w	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3e:	f000 8086 	beq.w	8005b4e <HAL_TIM_ConfigClockSource+0x172>
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a46:	d87f      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a48:	2b70      	cmp	r3, #112	; 0x70
 8005a4a:	d01a      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0xa6>
 8005a4c:	2b70      	cmp	r3, #112	; 0x70
 8005a4e:	d87b      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a50:	2b60      	cmp	r3, #96	; 0x60
 8005a52:	d050      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x11a>
 8005a54:	2b60      	cmp	r3, #96	; 0x60
 8005a56:	d877      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a58:	2b50      	cmp	r3, #80	; 0x50
 8005a5a:	d03c      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0xfa>
 8005a5c:	2b50      	cmp	r3, #80	; 0x50
 8005a5e:	d873      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a60:	2b40      	cmp	r3, #64	; 0x40
 8005a62:	d058      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x13a>
 8005a64:	2b40      	cmp	r3, #64	; 0x40
 8005a66:	d86f      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a68:	2b30      	cmp	r3, #48	; 0x30
 8005a6a:	d064      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a6c:	2b30      	cmp	r3, #48	; 0x30
 8005a6e:	d86b      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d060      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d867      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d05c      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	d05a      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a80:	e062      	b.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6899      	ldr	r1, [r3, #8]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f000 fb23 	bl	80060dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	609a      	str	r2, [r3, #8]
      break;
 8005aae:	e04f      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	6899      	ldr	r1, [r3, #8]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f000 fb0c 	bl	80060dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ad2:	609a      	str	r2, [r3, #8]
      break;
 8005ad4:	e03c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6859      	ldr	r1, [r3, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f000 fa80 	bl	8005fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2150      	movs	r1, #80	; 0x50
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fad9 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005af4:	e02c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6859      	ldr	r1, [r3, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	461a      	mov	r2, r3
 8005b04:	f000 fa9f 	bl	8006046 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2160      	movs	r1, #96	; 0x60
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fac9 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005b14:	e01c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6859      	ldr	r1, [r3, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	461a      	mov	r2, r3
 8005b24:	f000 fa60 	bl	8005fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2140      	movs	r1, #64	; 0x40
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fab9 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005b34:	e00c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f000 fab0 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005b46:	e003      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b4c:	e000      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a34      	ldr	r2, [pc, #208]	; (8005cb4 <TIM_Base_SetConfig+0xe4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00f      	beq.n	8005c08 <TIM_Base_SetConfig+0x38>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bee:	d00b      	beq.n	8005c08 <TIM_Base_SetConfig+0x38>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a31      	ldr	r2, [pc, #196]	; (8005cb8 <TIM_Base_SetConfig+0xe8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_Base_SetConfig+0x38>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a30      	ldr	r2, [pc, #192]	; (8005cbc <TIM_Base_SetConfig+0xec>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_Base_SetConfig+0x38>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a2f      	ldr	r2, [pc, #188]	; (8005cc0 <TIM_Base_SetConfig+0xf0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d108      	bne.n	8005c1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a25      	ldr	r2, [pc, #148]	; (8005cb4 <TIM_Base_SetConfig+0xe4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d01b      	beq.n	8005c5a <TIM_Base_SetConfig+0x8a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c28:	d017      	beq.n	8005c5a <TIM_Base_SetConfig+0x8a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a22      	ldr	r2, [pc, #136]	; (8005cb8 <TIM_Base_SetConfig+0xe8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <TIM_Base_SetConfig+0x8a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a21      	ldr	r2, [pc, #132]	; (8005cbc <TIM_Base_SetConfig+0xec>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00f      	beq.n	8005c5a <TIM_Base_SetConfig+0x8a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a20      	ldr	r2, [pc, #128]	; (8005cc0 <TIM_Base_SetConfig+0xf0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00b      	beq.n	8005c5a <TIM_Base_SetConfig+0x8a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a1f      	ldr	r2, [pc, #124]	; (8005cc4 <TIM_Base_SetConfig+0xf4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <TIM_Base_SetConfig+0x8a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a1e      	ldr	r2, [pc, #120]	; (8005cc8 <TIM_Base_SetConfig+0xf8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d003      	beq.n	8005c5a <TIM_Base_SetConfig+0x8a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1d      	ldr	r2, [pc, #116]	; (8005ccc <TIM_Base_SetConfig+0xfc>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d108      	bne.n	8005c6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a08      	ldr	r2, [pc, #32]	; (8005cb4 <TIM_Base_SetConfig+0xe4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d103      	bne.n	8005ca0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	615a      	str	r2, [r3, #20]
}
 8005ca6:	bf00      	nop
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40000400 	.word	0x40000400
 8005cbc:	40000800 	.word	0x40000800
 8005cc0:	40000c00 	.word	0x40000c00
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40014400 	.word	0x40014400
 8005ccc:	40014800 	.word	0x40014800

08005cd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f023 0201 	bic.w	r2, r3, #1
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 0302 	bic.w	r3, r3, #2
 8005d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a1c      	ldr	r2, [pc, #112]	; (8005d98 <TIM_OC1_SetConfig+0xc8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d10c      	bne.n	8005d46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f023 0308 	bic.w	r3, r3, #8
 8005d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f023 0304 	bic.w	r3, r3, #4
 8005d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a13      	ldr	r2, [pc, #76]	; (8005d98 <TIM_OC1_SetConfig+0xc8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d111      	bne.n	8005d72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	621a      	str	r2, [r3, #32]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	40010000 	.word	0x40010000

08005d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f023 0210 	bic.w	r2, r3, #16
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	021b      	lsls	r3, r3, #8
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 0320 	bic.w	r3, r3, #32
 8005de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a1e      	ldr	r2, [pc, #120]	; (8005e70 <TIM_OC2_SetConfig+0xd4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d10d      	bne.n	8005e18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a15      	ldr	r2, [pc, #84]	; (8005e70 <TIM_OC2_SetConfig+0xd4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d113      	bne.n	8005e48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40010000 	.word	0x40010000

08005e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0303 	bic.w	r3, r3, #3
 8005eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a1d      	ldr	r2, [pc, #116]	; (8005f44 <TIM_OC3_SetConfig+0xd0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d10d      	bne.n	8005eee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	021b      	lsls	r3, r3, #8
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a14      	ldr	r2, [pc, #80]	; (8005f44 <TIM_OC3_SetConfig+0xd0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d113      	bne.n	8005f1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	621a      	str	r2, [r3, #32]
}
 8005f38:	bf00      	nop
 8005f3a:	371c      	adds	r7, #28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	40010000 	.word	0x40010000

08005f48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	031b      	lsls	r3, r3, #12
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a10      	ldr	r2, [pc, #64]	; (8005fe4 <TIM_OC4_SetConfig+0x9c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d109      	bne.n	8005fbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	019b      	lsls	r3, r3, #6
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	621a      	str	r2, [r3, #32]
}
 8005fd6:	bf00      	nop
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40010000 	.word	0x40010000

08005fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f023 0201 	bic.w	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f023 030a 	bic.w	r3, r3, #10
 8006024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006046:	b480      	push	{r7}
 8006048:	b087      	sub	sp, #28
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0210 	bic.w	r2, r3, #16
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	031b      	lsls	r3, r3, #12
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006082:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f043 0307 	orr.w	r3, r3, #7
 80060c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	609a      	str	r2, [r3, #8]
}
 80060d0:	bf00      	nop
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	021a      	lsls	r2, r3, #8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	431a      	orrs	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4313      	orrs	r3, r2
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	609a      	str	r2, [r3, #8]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006130:	2302      	movs	r3, #2
 8006132:	e050      	b.n	80061d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1c      	ldr	r2, [pc, #112]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d018      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006180:	d013      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00e      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a16      	ldr	r2, [pc, #88]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d009      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a15      	ldr	r2, [pc, #84]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a13      	ldr	r2, [pc, #76]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d10c      	bne.n	80061c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40000800 	.word	0x40000800
 80061f0:	40000c00 	.word	0x40000c00
 80061f4:	40014000 	.word	0x40014000

080061f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006220:	b084      	sub	sp, #16
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	f107 001c 	add.w	r0, r7, #28
 800622e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006236:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006238:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800623a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800623e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006242:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006246:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800624a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800625a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	b004      	add	sp, #16
 8006274:	4770      	bx	lr

08006276 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2203      	movs	r2, #3
 80062be:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0303 	and.w	r3, r3, #3
}
 80062de:	4618      	mov	r0, r3
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80062f4:	2300      	movs	r3, #0
 80062f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006308:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800630e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006314:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4313      	orrs	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006324:	f023 030f 	bic.w	r3, r3, #15
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	b2db      	uxtb	r3, r3
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3314      	adds	r3, #20
 8006366:	461a      	mov	r2, r3
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	4413      	add	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
}  
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800637e:	b480      	push	{r7}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80063a4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80063aa:	431a      	orrs	r2, r3
                       Data->DPSM);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80063b0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0

}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b088      	sub	sp, #32
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80063e4:	2310      	movs	r3, #16
 80063e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063e8:	2340      	movs	r3, #64	; 0x40
 80063ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063f6:	f107 0308 	add.w	r3, r7, #8
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff ff74 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006402:	f241 3288 	movw	r2, #5000	; 0x1388
 8006406:	2110      	movs	r1, #16
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fa19 	bl	8006840 <SDMMC_GetCmdResp1>
 800640e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006410:	69fb      	ldr	r3, [r7, #28]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3720      	adds	r7, #32
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b088      	sub	sp, #32
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006428:	2311      	movs	r3, #17
 800642a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800642c:	2340      	movs	r3, #64	; 0x40
 800642e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006438:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800643a:	f107 0308 	add.w	r3, r7, #8
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff ff52 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006446:	f241 3288 	movw	r2, #5000	; 0x1388
 800644a:	2111      	movs	r1, #17
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f9f7 	bl	8006840 <SDMMC_GetCmdResp1>
 8006452:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006454:	69fb      	ldr	r3, [r7, #28]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3720      	adds	r7, #32
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b088      	sub	sp, #32
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800646c:	2312      	movs	r3, #18
 800646e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006470:	2340      	movs	r3, #64	; 0x40
 8006472:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006474:	2300      	movs	r3, #0
 8006476:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800647c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800647e:	f107 0308 	add.w	r3, r7, #8
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff ff30 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800648a:	f241 3288 	movw	r2, #5000	; 0x1388
 800648e:	2112      	movs	r1, #18
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f9d5 	bl	8006840 <SDMMC_GetCmdResp1>
 8006496:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006498:	69fb      	ldr	r3, [r7, #28]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3720      	adds	r7, #32
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b088      	sub	sp, #32
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80064b0:	2318      	movs	r3, #24
 80064b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064b4:	2340      	movs	r3, #64	; 0x40
 80064b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064c2:	f107 0308 	add.w	r3, r7, #8
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff ff0e 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80064ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d2:	2118      	movs	r1, #24
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f9b3 	bl	8006840 <SDMMC_GetCmdResp1>
 80064da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064dc:	69fb      	ldr	r3, [r7, #28]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3720      	adds	r7, #32
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b088      	sub	sp, #32
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80064f4:	2319      	movs	r3, #25
 80064f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064f8:	2340      	movs	r3, #64	; 0x40
 80064fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064fc:	2300      	movs	r3, #0
 80064fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006504:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006506:	f107 0308 	add.w	r3, r7, #8
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff feec 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006512:	f241 3288 	movw	r2, #5000	; 0x1388
 8006516:	2119      	movs	r1, #25
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f991 	bl	8006840 <SDMMC_GetCmdResp1>
 800651e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006520:	69fb      	ldr	r3, [r7, #28]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3720      	adds	r7, #32
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006538:	230c      	movs	r3, #12
 800653a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800653c:	2340      	movs	r3, #64	; 0x40
 800653e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006540:	2300      	movs	r3, #0
 8006542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006548:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800654a:	f107 0308 	add.w	r3, r7, #8
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff feca 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006556:	4a05      	ldr	r2, [pc, #20]	; (800656c <SDMMC_CmdStopTransfer+0x40>)
 8006558:	210c      	movs	r1, #12
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f970 	bl	8006840 <SDMMC_GetCmdResp1>
 8006560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006562:	69fb      	ldr	r3, [r7, #28]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3720      	adds	r7, #32
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	05f5e100 	.word	0x05f5e100

08006570 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08a      	sub	sp, #40	; 0x28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006580:	2307      	movs	r3, #7
 8006582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006584:	2340      	movs	r3, #64	; 0x40
 8006586:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006588:	2300      	movs	r3, #0
 800658a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800658c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006590:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006592:	f107 0310 	add.w	r3, r7, #16
 8006596:	4619      	mov	r1, r3
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7ff fea6 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800659e:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a2:	2107      	movs	r1, #7
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f94b 	bl	8006840 <SDMMC_GetCmdResp1>
 80065aa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3728      	adds	r7, #40	; 0x28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b088      	sub	sp, #32
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80065c6:	2300      	movs	r3, #0
 80065c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065d4:	f107 0308 	add.w	r3, r7, #8
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff fe85 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fb65 	bl	8006cb0 <SDMMC_GetCmdError>
 80065e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065e8:	69fb      	ldr	r3, [r7, #28]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3720      	adds	r7, #32
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b088      	sub	sp, #32
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80065fa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80065fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006600:	2308      	movs	r3, #8
 8006602:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006604:	2340      	movs	r3, #64	; 0x40
 8006606:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800660c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006610:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006612:	f107 0308 	add.w	r3, r7, #8
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff fe66 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 faf8 	bl	8006c14 <SDMMC_GetCmdResp7>
 8006624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006626:	69fb      	ldr	r3, [r7, #28]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3720      	adds	r7, #32
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800663e:	2337      	movs	r3, #55	; 0x37
 8006640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006642:	2340      	movs	r3, #64	; 0x40
 8006644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006646:	2300      	movs	r3, #0
 8006648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800664a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800664e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006650:	f107 0308 	add.w	r3, r7, #8
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff fe47 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800665c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006660:	2137      	movs	r1, #55	; 0x37
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f8ec 	bl	8006840 <SDMMC_GetCmdResp1>
 8006668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800666a:	69fb      	ldr	r3, [r7, #28]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3720      	adds	r7, #32
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006688:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800668a:	2329      	movs	r3, #41	; 0x29
 800668c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800668e:	2340      	movs	r3, #64	; 0x40
 8006690:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800669a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800669c:	f107 0308 	add.w	r3, r7, #8
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff fe21 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f9ff 	bl	8006aac <SDMMC_GetCmdResp3>
 80066ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066b0:	69fb      	ldr	r3, [r7, #28]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3720      	adds	r7, #32
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b088      	sub	sp, #32
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80066c8:	2306      	movs	r3, #6
 80066ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066cc:	2340      	movs	r3, #64	; 0x40
 80066ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066d0:	2300      	movs	r3, #0
 80066d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066da:	f107 0308 	add.w	r3, r7, #8
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7ff fe02 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80066e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ea:	2106      	movs	r1, #6
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f8a7 	bl	8006840 <SDMMC_GetCmdResp1>
 80066f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066f4:	69fb      	ldr	r3, [r7, #28]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3720      	adds	r7, #32
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b088      	sub	sp, #32
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800670a:	2333      	movs	r3, #51	; 0x33
 800670c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800670e:	2340      	movs	r3, #64	; 0x40
 8006710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800671a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800671c:	f107 0308 	add.w	r3, r7, #8
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff fde1 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006728:	f241 3288 	movw	r2, #5000	; 0x1388
 800672c:	2133      	movs	r1, #51	; 0x33
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f886 	bl	8006840 <SDMMC_GetCmdResp1>
 8006734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006736:	69fb      	ldr	r3, [r7, #28]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3720      	adds	r7, #32
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800674c:	2302      	movs	r3, #2
 800674e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006750:	23c0      	movs	r3, #192	; 0xc0
 8006752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006754:	2300      	movs	r3, #0
 8006756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800675c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800675e:	f107 0308 	add.w	r3, r7, #8
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7ff fdc0 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f956 	bl	8006a1c <SDMMC_GetCmdResp2>
 8006770:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006772:	69fb      	ldr	r3, [r7, #28]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3720      	adds	r7, #32
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800678a:	2309      	movs	r3, #9
 800678c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800678e:	23c0      	movs	r3, #192	; 0xc0
 8006790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006792:	2300      	movs	r3, #0
 8006794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800679a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800679c:	f107 0308 	add.w	r3, r7, #8
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff fda1 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f937 	bl	8006a1c <SDMMC_GetCmdResp2>
 80067ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067b0:	69fb      	ldr	r3, [r7, #28]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3720      	adds	r7, #32
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b088      	sub	sp, #32
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80067c8:	2303      	movs	r3, #3
 80067ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067cc:	2340      	movs	r3, #64	; 0x40
 80067ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067d0:	2300      	movs	r3, #0
 80067d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067da:	f107 0308 	add.w	r3, r7, #8
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff fd82 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	2103      	movs	r1, #3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f99c 	bl	8006b28 <SDMMC_GetCmdResp6>
 80067f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067f2:	69fb      	ldr	r3, [r7, #28]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3720      	adds	r7, #32
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800680a:	230d      	movs	r3, #13
 800680c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800680e:	2340      	movs	r3, #64	; 0x40
 8006810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006812:	2300      	movs	r3, #0
 8006814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800681a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800681c:	f107 0308 	add.w	r3, r7, #8
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7ff fd61 	bl	80062ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006828:	f241 3288 	movw	r2, #5000	; 0x1388
 800682c:	210d      	movs	r1, #13
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f806 	bl	8006840 <SDMMC_GetCmdResp1>
 8006834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006836:	69fb      	ldr	r3, [r7, #28]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3720      	adds	r7, #32
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	460b      	mov	r3, r1
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800684e:	4b70      	ldr	r3, [pc, #448]	; (8006a10 <SDMMC_GetCmdResp1+0x1d0>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a70      	ldr	r2, [pc, #448]	; (8006a14 <SDMMC_GetCmdResp1+0x1d4>)
 8006854:	fba2 2303 	umull	r2, r3, r2, r3
 8006858:	0a5a      	lsrs	r2, r3, #9
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	fb02 f303 	mul.w	r3, r2, r3
 8006860:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	1e5a      	subs	r2, r3, #1
 8006866:	61fa      	str	r2, [r7, #28]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d102      	bne.n	8006872 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800686c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006870:	e0c9      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006876:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800687e:	2b00      	cmp	r3, #0
 8006880:	d0ef      	beq.n	8006862 <SDMMC_GetCmdResp1+0x22>
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1ea      	bne.n	8006862 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d004      	beq.n	80068a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2204      	movs	r2, #4
 800689c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800689e:	2304      	movs	r3, #4
 80068a0:	e0b1      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e0a6      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	22c5      	movs	r2, #197	; 0xc5
 80068bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff fd3d 	bl	800633e <SDIO_GetCommandResponse>
 80068c4:	4603      	mov	r3, r0
 80068c6:	461a      	mov	r2, r3
 80068c8:	7afb      	ldrb	r3, [r7, #11]
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d001      	beq.n	80068d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e099      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80068d2:	2100      	movs	r1, #0
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f7ff fd3f 	bl	8006358 <SDIO_GetResponse>
 80068da:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	4b4e      	ldr	r3, [pc, #312]	; (8006a18 <SDMMC_GetCmdResp1+0x1d8>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e08d      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	da02      	bge.n	80068f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80068f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068f4:	e087      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006900:	2340      	movs	r3, #64	; 0x40
 8006902:	e080      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800690e:	2380      	movs	r3, #128	; 0x80
 8006910:	e079      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800691c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006920:	e071      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800692c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006930:	e069      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800693c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006940:	e061      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800694c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006950:	e059      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800695c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006960:	e051      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800696c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006970:	e049      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800697c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006980:	e041      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800698c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006990:	e039      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800699c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069a0:	e031      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80069ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069b0:	e029      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80069bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069c0:	e021      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80069cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80069d0:	e019      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80069dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80069e0:	e011      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80069ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80069f0:	e009      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80069fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006a00:	e001      	b.n	8006a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006a02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3720      	adds	r7, #32
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000000 	.word	0x20000000
 8006a14:	10624dd3 	.word	0x10624dd3
 8006a18:	fdffe008 	.word	0xfdffe008

08006a1c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a24:	4b1f      	ldr	r3, [pc, #124]	; (8006aa4 <SDMMC_GetCmdResp2+0x88>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1f      	ldr	r2, [pc, #124]	; (8006aa8 <SDMMC_GetCmdResp2+0x8c>)
 8006a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2e:	0a5b      	lsrs	r3, r3, #9
 8006a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a34:	fb02 f303 	mul.w	r3, r2, r3
 8006a38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	1e5a      	subs	r2, r3, #1
 8006a3e:	60fa      	str	r2, [r7, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d102      	bne.n	8006a4a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a48:	e026      	b.n	8006a98 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d0ef      	beq.n	8006a3a <SDMMC_GetCmdResp2+0x1e>
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1ea      	bne.n	8006a3a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d004      	beq.n	8006a7a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2204      	movs	r2, #4
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a76:	2304      	movs	r3, #4
 8006a78:	e00e      	b.n	8006a98 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d004      	beq.n	8006a90 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e003      	b.n	8006a98 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	22c5      	movs	r2, #197	; 0xc5
 8006a94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	20000000 	.word	0x20000000
 8006aa8:	10624dd3 	.word	0x10624dd3

08006aac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ab4:	4b1a      	ldr	r3, [pc, #104]	; (8006b20 <SDMMC_GetCmdResp3+0x74>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1a      	ldr	r2, [pc, #104]	; (8006b24 <SDMMC_GetCmdResp3+0x78>)
 8006aba:	fba2 2303 	umull	r2, r3, r2, r3
 8006abe:	0a5b      	lsrs	r3, r3, #9
 8006ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac4:	fb02 f303 	mul.w	r3, r2, r3
 8006ac8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	1e5a      	subs	r2, r3, #1
 8006ace:	60fa      	str	r2, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d102      	bne.n	8006ada <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ad4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ad8:	e01b      	b.n	8006b12 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ade:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0ef      	beq.n	8006aca <SDMMC_GetCmdResp3+0x1e>
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1ea      	bne.n	8006aca <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d004      	beq.n	8006b0a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2204      	movs	r2, #4
 8006b04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b06:	2304      	movs	r3, #4
 8006b08:	e003      	b.n	8006b12 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	22c5      	movs	r2, #197	; 0xc5
 8006b0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20000000 	.word	0x20000000
 8006b24:	10624dd3 	.word	0x10624dd3

08006b28 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	460b      	mov	r3, r1
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b36:	4b35      	ldr	r3, [pc, #212]	; (8006c0c <SDMMC_GetCmdResp6+0xe4>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a35      	ldr	r2, [pc, #212]	; (8006c10 <SDMMC_GetCmdResp6+0xe8>)
 8006b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b40:	0a5b      	lsrs	r3, r3, #9
 8006b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b46:	fb02 f303 	mul.w	r3, r2, r3
 8006b4a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	1e5a      	subs	r2, r3, #1
 8006b50:	61fa      	str	r2, [r7, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d102      	bne.n	8006b5c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b5a:	e052      	b.n	8006c02 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b60:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0ef      	beq.n	8006b4c <SDMMC_GetCmdResp6+0x24>
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1ea      	bne.n	8006b4c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d004      	beq.n	8006b8c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2204      	movs	r2, #4
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b88:	2304      	movs	r3, #4
 8006b8a:	e03a      	b.n	8006c02 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e02f      	b.n	8006c02 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f7ff fbcb 	bl	800633e <SDIO_GetCommandResponse>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	461a      	mov	r2, r3
 8006bac:	7afb      	ldrb	r3, [r7, #11]
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d001      	beq.n	8006bb6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e025      	b.n	8006c02 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	22c5      	movs	r2, #197	; 0xc5
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff fbca 	bl	8006358 <SDIO_GetResponse>
 8006bc4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d106      	bne.n	8006bde <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	0c1b      	lsrs	r3, r3, #16
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e011      	b.n	8006c02 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bec:	e009      	b.n	8006c02 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bfc:	e001      	b.n	8006c02 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3720      	adds	r7, #32
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000000 	.word	0x20000000
 8006c10:	10624dd3 	.word	0x10624dd3

08006c14 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c1c:	4b22      	ldr	r3, [pc, #136]	; (8006ca8 <SDMMC_GetCmdResp7+0x94>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a22      	ldr	r2, [pc, #136]	; (8006cac <SDMMC_GetCmdResp7+0x98>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	0a5b      	lsrs	r3, r3, #9
 8006c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2c:	fb02 f303 	mul.w	r3, r2, r3
 8006c30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1e5a      	subs	r2, r3, #1
 8006c36:	60fa      	str	r2, [r7, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d102      	bne.n	8006c42 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c40:	e02c      	b.n	8006c9c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0ef      	beq.n	8006c32 <SDMMC_GetCmdResp7+0x1e>
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1ea      	bne.n	8006c32 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d004      	beq.n	8006c72 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c6e:	2304      	movs	r3, #4
 8006c70:	e014      	b.n	8006c9c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d004      	beq.n	8006c88 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e009      	b.n	8006c9c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2240      	movs	r2, #64	; 0x40
 8006c98:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006c9a:	2300      	movs	r3, #0
  
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	20000000 	.word	0x20000000
 8006cac:	10624dd3 	.word	0x10624dd3

08006cb0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006cb8:	4b11      	ldr	r3, [pc, #68]	; (8006d00 <SDMMC_GetCmdError+0x50>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a11      	ldr	r2, [pc, #68]	; (8006d04 <SDMMC_GetCmdError+0x54>)
 8006cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc2:	0a5b      	lsrs	r3, r3, #9
 8006cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc8:	fb02 f303 	mul.w	r3, r2, r3
 8006ccc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	1e5a      	subs	r2, r3, #1
 8006cd2:	60fa      	str	r2, [r7, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d102      	bne.n	8006cde <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006cd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006cdc:	e009      	b.n	8006cf2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0f1      	beq.n	8006cce <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	22c5      	movs	r2, #197	; 0xc5
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	20000000 	.word	0x20000000
 8006d04:	10624dd3 	.word	0x10624dd3

08006d08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006d0c:	4904      	ldr	r1, [pc, #16]	; (8006d20 <MX_FATFS_Init+0x18>)
 8006d0e:	4805      	ldr	r0, [pc, #20]	; (8006d24 <MX_FATFS_Init+0x1c>)
 8006d10:	f002 fb4c 	bl	80093ac <FATFS_LinkDriver>
 8006d14:	4603      	mov	r3, r0
 8006d16:	461a      	mov	r2, r3
 8006d18:	4b03      	ldr	r3, [pc, #12]	; (8006d28 <MX_FATFS_Init+0x20>)
 8006d1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006d1c:	bf00      	nop
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	200008bc 	.word	0x200008bc
 8006d24:	0800ca04 	.word	0x0800ca04
 8006d28:	200008b8 	.word	0x200008b8

08006d2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006d30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006d46:	f000 f879 	bl	8006e3c <BSP_SD_IsDetected>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d001      	beq.n	8006d54 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e012      	b.n	8006d7a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006d54:	480b      	ldr	r0, [pc, #44]	; (8006d84 <BSP_SD_Init+0x48>)
 8006d56:	f7fd f9e1 	bl	800411c <HAL_SD_Init>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006d5e:	79fb      	ldrb	r3, [r7, #7]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d109      	bne.n	8006d78 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006d64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d68:	4806      	ldr	r0, [pc, #24]	; (8006d84 <BSP_SD_Init+0x48>)
 8006d6a:	f7fd ffbb 	bl	8004ce4 <HAL_SD_ConfigWideBusOperation>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006d78:	79fb      	ldrb	r3, [r7, #7]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000394 	.word	0x20000394

08006d88 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	68f9      	ldr	r1, [r7, #12]
 8006da4:	4806      	ldr	r0, [pc, #24]	; (8006dc0 <BSP_SD_ReadBlocks+0x38>)
 8006da6:	f7fd fa69 	bl	800427c <HAL_SD_ReadBlocks>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000394 	.word	0x20000394

08006dc4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	68f9      	ldr	r1, [r7, #12]
 8006de0:	4806      	ldr	r0, [pc, #24]	; (8006dfc <BSP_SD_WriteBlocks+0x38>)
 8006de2:	f7fd fc29 	bl	8004638 <HAL_SD_WriteBlocks>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000394 	.word	0x20000394

08006e00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006e04:	4805      	ldr	r0, [pc, #20]	; (8006e1c <BSP_SD_GetCardState+0x1c>)
 8006e06:	f7fe f807 	bl	8004e18 <HAL_SD_GetCardState>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	bf14      	ite	ne
 8006e10:	2301      	movne	r3, #1
 8006e12:	2300      	moveq	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20000394 	.word	0x20000394

08006e20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	4803      	ldr	r0, [pc, #12]	; (8006e38 <BSP_SD_GetCardInfo+0x18>)
 8006e2c:	f7fd ff2e 	bl	8004c8c <HAL_SD_GetCardInfo>
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20000394 	.word	0x20000394

08006e3c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006e42:	2301      	movs	r3, #1
 8006e44:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006e46:	f000 f80b 	bl	8006e60 <BSP_PlatformIsDetected>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006e50:	2300      	movs	r3, #0
 8006e52:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006e54:	79fb      	ldrb	r3, [r7, #7]
 8006e56:	b2db      	uxtb	r3, r3
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006e66:	2301      	movs	r3, #1
 8006e68:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e6e:	4806      	ldr	r0, [pc, #24]	; (8006e88 <BSP_PlatformIsDetected+0x28>)
 8006e70:	f7fc f89c 	bl	8002fac <HAL_GPIO_ReadPin>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006e7e:	79fb      	ldrb	r3, [r7, #7]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	40020400 	.word	0x40020400

08006e8c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006e96:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <SD_CheckStatus+0x38>)
 8006e98:	2201      	movs	r2, #1
 8006e9a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006e9c:	f7ff ffb0 	bl	8006e00 <BSP_SD_GetCardState>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d107      	bne.n	8006eb6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006ea6:	4b07      	ldr	r3, [pc, #28]	; (8006ec4 <SD_CheckStatus+0x38>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f023 0301 	bic.w	r3, r3, #1
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <SD_CheckStatus+0x38>)
 8006eb4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006eb6:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <SD_CheckStatus+0x38>)
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	b2db      	uxtb	r3, r3
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20000011 	.word	0x20000011

08006ec8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006ed2:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <SD_initialize+0x38>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006ed8:	f7ff ff30 	bl	8006d3c <BSP_SD_Init>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d107      	bne.n	8006ef2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7ff ffd1 	bl	8006e8c <SD_CheckStatus>
 8006eea:	4603      	mov	r3, r0
 8006eec:	461a      	mov	r2, r3
 8006eee:	4b04      	ldr	r3, [pc, #16]	; (8006f00 <SD_initialize+0x38>)
 8006ef0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006ef2:	4b03      	ldr	r3, [pc, #12]	; (8006f00 <SD_initialize+0x38>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	b2db      	uxtb	r3, r3
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	20000011 	.word	0x20000011

08006f04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff ffbb 	bl	8006e8c <SD_CheckStatus>
 8006f16:	4603      	mov	r3, r0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006f34:	f04f 33ff 	mov.w	r3, #4294967295
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	68b8      	ldr	r0, [r7, #8]
 8006f3e:	f7ff ff23 	bl	8006d88 <BSP_SD_ReadBlocks>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d107      	bne.n	8006f58 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006f48:	bf00      	nop
 8006f4a:	f7ff ff59 	bl	8006e00 <BSP_SD_GetCardState>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1fa      	bne.n	8006f4a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
 8006f6e:	4603      	mov	r3, r0
 8006f70:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006f76:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	68b8      	ldr	r0, [r7, #8]
 8006f80:	f7ff ff20 	bl	8006dc4 <BSP_SD_WriteBlocks>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d107      	bne.n	8006f9a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006f8a:	bf00      	nop
 8006f8c:	f7ff ff38 	bl	8006e00 <BSP_SD_GetCardState>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1fa      	bne.n	8006f8c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08c      	sub	sp, #48	; 0x30
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	603a      	str	r2, [r7, #0]
 8006fae:	71fb      	strb	r3, [r7, #7]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006fba:	4b25      	ldr	r3, [pc, #148]	; (8007050 <SD_ioctl+0xac>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <SD_ioctl+0x28>
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e03c      	b.n	8007046 <SD_ioctl+0xa2>

  switch (cmd)
 8006fcc:	79bb      	ldrb	r3, [r7, #6]
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d834      	bhi.n	800703c <SD_ioctl+0x98>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <SD_ioctl+0x34>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08006fe9 	.word	0x08006fe9
 8006fdc:	08006ff1 	.word	0x08006ff1
 8006fe0:	08007009 	.word	0x08007009
 8006fe4:	08007023 	.word	0x08007023
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006fee:	e028      	b.n	8007042 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006ff0:	f107 030c 	add.w	r3, r7, #12
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff ff13 	bl	8006e20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007006:	e01c      	b.n	8007042 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007008:	f107 030c 	add.w	r3, r7, #12
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff ff07 	bl	8006e20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	b29a      	uxth	r2, r3
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007020:	e00f      	b.n	8007042 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007022:	f107 030c 	add.w	r3, r7, #12
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff fefa 	bl	8006e20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	0a5a      	lsrs	r2, r3, #9
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800703a:	e002      	b.n	8007042 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800703c:	2304      	movs	r3, #4
 800703e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007042:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007046:	4618      	mov	r0, r3
 8007048:	3730      	adds	r7, #48	; 0x30
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20000011 	.word	0x20000011

08007054 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	4a08      	ldr	r2, [pc, #32]	; (8007084 <disk_status+0x30>)
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	79fa      	ldrb	r2, [r7, #7]
 800706c:	4905      	ldr	r1, [pc, #20]	; (8007084 <disk_status+0x30>)
 800706e:	440a      	add	r2, r1
 8007070:	7a12      	ldrb	r2, [r2, #8]
 8007072:	4610      	mov	r0, r2
 8007074:	4798      	blx	r3
 8007076:	4603      	mov	r3, r0
 8007078:	73fb      	strb	r3, [r7, #15]
  return stat;
 800707a:	7bfb      	ldrb	r3, [r7, #15]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	200008e8 	.word	0x200008e8

08007088 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	4603      	mov	r3, r0
 8007090:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	4a0d      	ldr	r2, [pc, #52]	; (80070d0 <disk_initialize+0x48>)
 800709a:	5cd3      	ldrb	r3, [r2, r3]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d111      	bne.n	80070c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	4a0b      	ldr	r2, [pc, #44]	; (80070d0 <disk_initialize+0x48>)
 80070a4:	2101      	movs	r1, #1
 80070a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	4a09      	ldr	r2, [pc, #36]	; (80070d0 <disk_initialize+0x48>)
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	79fa      	ldrb	r2, [r7, #7]
 80070b6:	4906      	ldr	r1, [pc, #24]	; (80070d0 <disk_initialize+0x48>)
 80070b8:	440a      	add	r2, r1
 80070ba:	7a12      	ldrb	r2, [r2, #8]
 80070bc:	4610      	mov	r0, r2
 80070be:	4798      	blx	r3
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	200008e8 	.word	0x200008e8

080070d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80070d4:	b590      	push	{r4, r7, lr}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	607a      	str	r2, [r7, #4]
 80070de:	603b      	str	r3, [r7, #0]
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	4a0a      	ldr	r2, [pc, #40]	; (8007110 <disk_read+0x3c>)
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	689c      	ldr	r4, [r3, #8]
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	4a07      	ldr	r2, [pc, #28]	; (8007110 <disk_read+0x3c>)
 80070f4:	4413      	add	r3, r2
 80070f6:	7a18      	ldrb	r0, [r3, #8]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	47a0      	blx	r4
 8007100:	4603      	mov	r3, r0
 8007102:	75fb      	strb	r3, [r7, #23]
  return res;
 8007104:	7dfb      	ldrb	r3, [r7, #23]
}
 8007106:	4618      	mov	r0, r3
 8007108:	371c      	adds	r7, #28
 800710a:	46bd      	mov	sp, r7
 800710c:	bd90      	pop	{r4, r7, pc}
 800710e:	bf00      	nop
 8007110:	200008e8 	.word	0x200008e8

08007114 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007114:	b590      	push	{r4, r7, lr}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	607a      	str	r2, [r7, #4]
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	4a0a      	ldr	r2, [pc, #40]	; (8007150 <disk_write+0x3c>)
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	68dc      	ldr	r4, [r3, #12]
 8007130:	7bfb      	ldrb	r3, [r7, #15]
 8007132:	4a07      	ldr	r2, [pc, #28]	; (8007150 <disk_write+0x3c>)
 8007134:	4413      	add	r3, r2
 8007136:	7a18      	ldrb	r0, [r3, #8]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	47a0      	blx	r4
 8007140:	4603      	mov	r3, r0
 8007142:	75fb      	strb	r3, [r7, #23]
  return res;
 8007144:	7dfb      	ldrb	r3, [r7, #23]
}
 8007146:	4618      	mov	r0, r3
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	bd90      	pop	{r4, r7, pc}
 800714e:	bf00      	nop
 8007150:	200008e8 	.word	0x200008e8

08007154 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	4603      	mov	r3, r0
 800715c:	603a      	str	r2, [r7, #0]
 800715e:	71fb      	strb	r3, [r7, #7]
 8007160:	460b      	mov	r3, r1
 8007162:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	4a09      	ldr	r2, [pc, #36]	; (800718c <disk_ioctl+0x38>)
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	79fa      	ldrb	r2, [r7, #7]
 8007172:	4906      	ldr	r1, [pc, #24]	; (800718c <disk_ioctl+0x38>)
 8007174:	440a      	add	r2, r1
 8007176:	7a10      	ldrb	r0, [r2, #8]
 8007178:	79b9      	ldrb	r1, [r7, #6]
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	4798      	blx	r3
 800717e:	4603      	mov	r3, r0
 8007180:	73fb      	strb	r3, [r7, #15]
  return res;
 8007182:	7bfb      	ldrb	r3, [r7, #15]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	200008e8 	.word	0x200008e8

08007190 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3301      	adds	r3, #1
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80071a0:	89fb      	ldrh	r3, [r7, #14]
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	b21a      	sxth	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	b21b      	sxth	r3, r3
 80071ac:	4313      	orrs	r3, r2
 80071ae:	b21b      	sxth	r3, r3
 80071b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80071b2:	89fb      	ldrh	r3, [r7, #14]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	3303      	adds	r3, #3
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	021b      	lsls	r3, r3, #8
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	3202      	adds	r2, #2
 80071d8:	7812      	ldrb	r2, [r2, #0]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	021b      	lsls	r3, r3, #8
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	3201      	adds	r2, #1
 80071e6:	7812      	ldrb	r2, [r2, #0]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	021b      	lsls	r3, r3, #8
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	7812      	ldrb	r2, [r2, #0]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]
	return rv;
 80071f8:	68fb      	ldr	r3, [r7, #12]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	460b      	mov	r3, r1
 8007210:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	887a      	ldrh	r2, [r7, #2]
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	887b      	ldrh	r3, [r7, #2]
 8007220:	0a1b      	lsrs	r3, r3, #8
 8007222:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	607a      	str	r2, [r7, #4]
 800722a:	887a      	ldrh	r2, [r7, #2]
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	701a      	strb	r2, [r3, #0]
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	b2d2      	uxtb	r2, r2
 8007250:	701a      	strb	r2, [r3, #0]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	0a1b      	lsrs	r3, r3, #8
 8007256:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	607a      	str	r2, [r7, #4]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	0a1b      	lsrs	r3, r3, #8
 8007268:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	683a      	ldr	r2, [r7, #0]
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	0a1b      	lsrs	r3, r3, #8
 800727a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	b2d2      	uxtb	r2, r2
 8007286:	701a      	strb	r2, [r3, #0]
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00d      	beq.n	80072ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	1c53      	adds	r3, r2, #1
 80072b2:	613b      	str	r3, [r7, #16]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	1c59      	adds	r1, r3, #1
 80072b8:	6179      	str	r1, [r7, #20]
 80072ba:	7812      	ldrb	r2, [r2, #0]
 80072bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	607b      	str	r3, [r7, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1f1      	bne.n	80072ae <mem_cpy+0x1a>
	}
}
 80072ca:	bf00      	nop
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80072d6:	b480      	push	{r7}
 80072d8:	b087      	sub	sp, #28
 80072da:	af00      	add	r7, sp, #0
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	617a      	str	r2, [r7, #20]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	607b      	str	r3, [r7, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1f3      	bne.n	80072e6 <mem_set+0x10>
}
 80072fe:	bf00      	nop
 8007300:	bf00      	nop
 8007302:	371c      	adds	r7, #28
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800730c:	b480      	push	{r7}
 800730e:	b089      	sub	sp, #36	; 0x24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	61fb      	str	r3, [r7, #28]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	61fa      	str	r2, [r7, #28]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	4619      	mov	r1, r3
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	61ba      	str	r2, [r7, #24]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	1acb      	subs	r3, r1, r3
 8007338:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3b01      	subs	r3, #1
 800733e:	607b      	str	r3, [r7, #4]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <mem_cmp+0x40>
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d0eb      	beq.n	8007324 <mem_cmp+0x18>

	return r;
 800734c:	697b      	ldr	r3, [r7, #20]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3724      	adds	r7, #36	; 0x24
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007364:	e002      	b.n	800736c <chk_chr+0x12>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3301      	adds	r3, #1
 800736a:	607b      	str	r3, [r7, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d005      	beq.n	8007380 <chk_chr+0x26>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	4293      	cmp	r3, r2
 800737e:	d1f2      	bne.n	8007366 <chk_chr+0xc>
	return *str;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	781b      	ldrb	r3, [r3, #0]
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800739a:	2300      	movs	r3, #0
 800739c:	60bb      	str	r3, [r7, #8]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e029      	b.n	80073f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80073a4:	4a27      	ldr	r2, [pc, #156]	; (8007444 <chk_lock+0xb4>)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	4413      	add	r3, r2
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d01d      	beq.n	80073ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80073b2:	4a24      	ldr	r2, [pc, #144]	; (8007444 <chk_lock+0xb4>)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	4413      	add	r3, r2
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d116      	bne.n	80073f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80073c4:	4a1f      	ldr	r2, [pc, #124]	; (8007444 <chk_lock+0xb4>)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	4413      	add	r3, r2
 80073cc:	3304      	adds	r3, #4
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d10c      	bne.n	80073f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80073d8:	4a1a      	ldr	r2, [pc, #104]	; (8007444 <chk_lock+0xb4>)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	011b      	lsls	r3, r3, #4
 80073de:	4413      	add	r3, r2
 80073e0:	3308      	adds	r3, #8
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d102      	bne.n	80073f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80073ec:	e007      	b.n	80073fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80073ee:	2301      	movs	r3, #1
 80073f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3301      	adds	r3, #1
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d9d2      	bls.n	80073a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d109      	bne.n	8007418 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d102      	bne.n	8007410 <chk_lock+0x80>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d101      	bne.n	8007414 <chk_lock+0x84>
 8007410:	2300      	movs	r3, #0
 8007412:	e010      	b.n	8007436 <chk_lock+0xa6>
 8007414:	2312      	movs	r3, #18
 8007416:	e00e      	b.n	8007436 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d108      	bne.n	8007430 <chk_lock+0xa0>
 800741e:	4a09      	ldr	r2, [pc, #36]	; (8007444 <chk_lock+0xb4>)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	011b      	lsls	r3, r3, #4
 8007424:	4413      	add	r3, r2
 8007426:	330c      	adds	r3, #12
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800742e:	d101      	bne.n	8007434 <chk_lock+0xa4>
 8007430:	2310      	movs	r3, #16
 8007432:	e000      	b.n	8007436 <chk_lock+0xa6>
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	200008c8 	.word	0x200008c8

08007448 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800744e:	2300      	movs	r3, #0
 8007450:	607b      	str	r3, [r7, #4]
 8007452:	e002      	b.n	800745a <enq_lock+0x12>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3301      	adds	r3, #1
 8007458:	607b      	str	r3, [r7, #4]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d806      	bhi.n	800746e <enq_lock+0x26>
 8007460:	4a09      	ldr	r2, [pc, #36]	; (8007488 <enq_lock+0x40>)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	011b      	lsls	r3, r3, #4
 8007466:	4413      	add	r3, r2
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1f2      	bne.n	8007454 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b02      	cmp	r3, #2
 8007472:	bf14      	ite	ne
 8007474:	2301      	movne	r3, #1
 8007476:	2300      	moveq	r3, #0
 8007478:	b2db      	uxtb	r3, r3
}
 800747a:	4618      	mov	r0, r3
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	200008c8 	.word	0x200008c8

0800748c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	e01f      	b.n	80074dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800749c:	4a41      	ldr	r2, [pc, #260]	; (80075a4 <inc_lock+0x118>)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	4413      	add	r3, r2
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d113      	bne.n	80074d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80074ae:	4a3d      	ldr	r2, [pc, #244]	; (80075a4 <inc_lock+0x118>)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	4413      	add	r3, r2
 80074b6:	3304      	adds	r3, #4
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80074be:	429a      	cmp	r2, r3
 80074c0:	d109      	bne.n	80074d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80074c2:	4a38      	ldr	r2, [pc, #224]	; (80075a4 <inc_lock+0x118>)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	011b      	lsls	r3, r3, #4
 80074c8:	4413      	add	r3, r2
 80074ca:	3308      	adds	r3, #8
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d006      	beq.n	80074e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3301      	adds	r3, #1
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d9dc      	bls.n	800749c <inc_lock+0x10>
 80074e2:	e000      	b.n	80074e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80074e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d132      	bne.n	8007552 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	e002      	b.n	80074f8 <inc_lock+0x6c>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d806      	bhi.n	800750c <inc_lock+0x80>
 80074fe:	4a29      	ldr	r2, [pc, #164]	; (80075a4 <inc_lock+0x118>)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	011b      	lsls	r3, r3, #4
 8007504:	4413      	add	r3, r2
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1f2      	bne.n	80074f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b02      	cmp	r3, #2
 8007510:	d101      	bne.n	8007516 <inc_lock+0x8a>
 8007512:	2300      	movs	r3, #0
 8007514:	e040      	b.n	8007598 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	4922      	ldr	r1, [pc, #136]	; (80075a4 <inc_lock+0x118>)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	011b      	lsls	r3, r3, #4
 8007520:	440b      	add	r3, r1
 8007522:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	491e      	ldr	r1, [pc, #120]	; (80075a4 <inc_lock+0x118>)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	440b      	add	r3, r1
 8007530:	3304      	adds	r3, #4
 8007532:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	695a      	ldr	r2, [r3, #20]
 8007538:	491a      	ldr	r1, [pc, #104]	; (80075a4 <inc_lock+0x118>)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	440b      	add	r3, r1
 8007540:	3308      	adds	r3, #8
 8007542:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007544:	4a17      	ldr	r2, [pc, #92]	; (80075a4 <inc_lock+0x118>)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	011b      	lsls	r3, r3, #4
 800754a:	4413      	add	r3, r2
 800754c:	330c      	adds	r3, #12
 800754e:	2200      	movs	r2, #0
 8007550:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d009      	beq.n	800756c <inc_lock+0xe0>
 8007558:	4a12      	ldr	r2, [pc, #72]	; (80075a4 <inc_lock+0x118>)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	4413      	add	r3, r2
 8007560:	330c      	adds	r3, #12
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <inc_lock+0xe0>
 8007568:	2300      	movs	r3, #0
 800756a:	e015      	b.n	8007598 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d108      	bne.n	8007584 <inc_lock+0xf8>
 8007572:	4a0c      	ldr	r2, [pc, #48]	; (80075a4 <inc_lock+0x118>)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	011b      	lsls	r3, r3, #4
 8007578:	4413      	add	r3, r2
 800757a:	330c      	adds	r3, #12
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	3301      	adds	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	e001      	b.n	8007588 <inc_lock+0xfc>
 8007584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007588:	4906      	ldr	r1, [pc, #24]	; (80075a4 <inc_lock+0x118>)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	440b      	add	r3, r1
 8007590:	330c      	adds	r3, #12
 8007592:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3301      	adds	r3, #1
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	200008c8 	.word	0x200008c8

080075a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	607b      	str	r3, [r7, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d825      	bhi.n	8007608 <dec_lock+0x60>
		n = Files[i].ctr;
 80075bc:	4a17      	ldr	r2, [pc, #92]	; (800761c <dec_lock+0x74>)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	4413      	add	r3, r2
 80075c4:	330c      	adds	r3, #12
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80075ca:	89fb      	ldrh	r3, [r7, #14]
 80075cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075d0:	d101      	bne.n	80075d6 <dec_lock+0x2e>
 80075d2:	2300      	movs	r3, #0
 80075d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80075d6:	89fb      	ldrh	r3, [r7, #14]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <dec_lock+0x3a>
 80075dc:	89fb      	ldrh	r3, [r7, #14]
 80075de:	3b01      	subs	r3, #1
 80075e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80075e2:	4a0e      	ldr	r2, [pc, #56]	; (800761c <dec_lock+0x74>)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	011b      	lsls	r3, r3, #4
 80075e8:	4413      	add	r3, r2
 80075ea:	330c      	adds	r3, #12
 80075ec:	89fa      	ldrh	r2, [r7, #14]
 80075ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80075f0:	89fb      	ldrh	r3, [r7, #14]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d105      	bne.n	8007602 <dec_lock+0x5a>
 80075f6:	4a09      	ldr	r2, [pc, #36]	; (800761c <dec_lock+0x74>)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	4413      	add	r3, r2
 80075fe:	2200      	movs	r2, #0
 8007600:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	737b      	strb	r3, [r7, #13]
 8007606:	e001      	b.n	800760c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007608:	2302      	movs	r3, #2
 800760a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800760c:	7b7b      	ldrb	r3, [r7, #13]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	200008c8 	.word	0x200008c8

08007620 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	e010      	b.n	8007650 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800762e:	4a0d      	ldr	r2, [pc, #52]	; (8007664 <clear_lock+0x44>)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	4413      	add	r3, r2
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	429a      	cmp	r2, r3
 800763c:	d105      	bne.n	800764a <clear_lock+0x2a>
 800763e:	4a09      	ldr	r2, [pc, #36]	; (8007664 <clear_lock+0x44>)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	4413      	add	r3, r2
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3301      	adds	r3, #1
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d9eb      	bls.n	800762e <clear_lock+0xe>
	}
}
 8007656:	bf00      	nop
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	200008c8 	.word	0x200008c8

08007668 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	78db      	ldrb	r3, [r3, #3]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d034      	beq.n	80076e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	7858      	ldrb	r0, [r3, #1]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800768c:	2301      	movs	r3, #1
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	f7ff fd40 	bl	8007114 <disk_write>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800769a:	2301      	movs	r3, #1
 800769c:	73fb      	strb	r3, [r7, #15]
 800769e:	e022      	b.n	80076e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	1ad2      	subs	r2, r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d217      	bcs.n	80076e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	789b      	ldrb	r3, [r3, #2]
 80076ba:	613b      	str	r3, [r7, #16]
 80076bc:	e010      	b.n	80076e0 <sync_window+0x78>
					wsect += fs->fsize;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	4413      	add	r3, r2
 80076c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	7858      	ldrb	r0, [r3, #1]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076d2:	2301      	movs	r3, #1
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	f7ff fd1d 	bl	8007114 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	3b01      	subs	r3, #1
 80076de:	613b      	str	r3, [r7, #16]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d8eb      	bhi.n	80076be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	429a      	cmp	r2, r3
 8007706:	d01b      	beq.n	8007740 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7ff ffad 	bl	8007668 <sync_window>
 800770e:	4603      	mov	r3, r0
 8007710:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d113      	bne.n	8007740 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	7858      	ldrb	r0, [r3, #1]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007722:	2301      	movs	r3, #1
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	f7ff fcd5 	bl	80070d4 <disk_read>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d004      	beq.n	800773a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007730:	f04f 33ff 	mov.w	r3, #4294967295
 8007734:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007736:	2301      	movs	r3, #1
 8007738:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007740:	7bfb      	ldrb	r3, [r7, #15]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff ff87 	bl	8007668 <sync_window>
 800775a:	4603      	mov	r3, r0
 800775c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d158      	bne.n	8007816 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b03      	cmp	r3, #3
 800776a:	d148      	bne.n	80077fe <sync_fs+0xb2>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	791b      	ldrb	r3, [r3, #4]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d144      	bne.n	80077fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3330      	adds	r3, #48	; 0x30
 8007778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800777c:	2100      	movs	r1, #0
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff fda9 	bl	80072d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3330      	adds	r3, #48	; 0x30
 8007788:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800778c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007790:	4618      	mov	r0, r3
 8007792:	f7ff fd38 	bl	8007206 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3330      	adds	r3, #48	; 0x30
 800779a:	4921      	ldr	r1, [pc, #132]	; (8007820 <sync_fs+0xd4>)
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff fd4d 	bl	800723c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	3330      	adds	r3, #48	; 0x30
 80077a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80077aa:	491e      	ldr	r1, [pc, #120]	; (8007824 <sync_fs+0xd8>)
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff fd45 	bl	800723c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3330      	adds	r3, #48	; 0x30
 80077b6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	4619      	mov	r1, r3
 80077c0:	4610      	mov	r0, r2
 80077c2:	f7ff fd3b 	bl	800723c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	3330      	adds	r3, #48	; 0x30
 80077ca:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	4619      	mov	r1, r3
 80077d4:	4610      	mov	r0, r2
 80077d6:	f7ff fd31 	bl	800723c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	7858      	ldrb	r0, [r3, #1]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f2:	2301      	movs	r3, #1
 80077f4:	f7ff fc8e 	bl	8007114 <disk_write>
			fs->fsi_flag = 0;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	785b      	ldrb	r3, [r3, #1]
 8007802:	2200      	movs	r2, #0
 8007804:	2100      	movs	r1, #0
 8007806:	4618      	mov	r0, r3
 8007808:	f7ff fca4 	bl	8007154 <disk_ioctl>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <sync_fs+0xca>
 8007812:	2301      	movs	r3, #1
 8007814:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007816:	7bfb      	ldrb	r3, [r7, #15]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	41615252 	.word	0x41615252
 8007824:	61417272 	.word	0x61417272

08007828 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	3b02      	subs	r3, #2
 8007836:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	3b02      	subs	r3, #2
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d301      	bcc.n	8007848 <clust2sect+0x20>
 8007844:	2300      	movs	r3, #0
 8007846:	e008      	b.n	800785a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	895b      	ldrh	r3, [r3, #10]
 800784c:	461a      	mov	r2, r3
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	fb03 f202 	mul.w	r2, r3, r2
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	4413      	add	r3, r2
}
 800785a:	4618      	mov	r0, r3
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b086      	sub	sp, #24
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d904      	bls.n	8007886 <get_fat+0x20>
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d302      	bcc.n	800788c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007886:	2301      	movs	r3, #1
 8007888:	617b      	str	r3, [r7, #20]
 800788a:	e08f      	b.n	80079ac <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800788c:	f04f 33ff 	mov.w	r3, #4294967295
 8007890:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b03      	cmp	r3, #3
 8007898:	d062      	beq.n	8007960 <get_fat+0xfa>
 800789a:	2b03      	cmp	r3, #3
 800789c:	dc7c      	bgt.n	8007998 <get_fat+0x132>
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d002      	beq.n	80078a8 <get_fat+0x42>
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d042      	beq.n	800792c <get_fat+0xc6>
 80078a6:	e077      	b.n	8007998 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	085b      	lsrs	r3, r3, #1
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	4413      	add	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	6a1a      	ldr	r2, [r3, #32]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	0a5b      	lsrs	r3, r3, #9
 80078be:	4413      	add	r3, r2
 80078c0:	4619      	mov	r1, r3
 80078c2:	6938      	ldr	r0, [r7, #16]
 80078c4:	f7ff ff14 	bl	80076f0 <move_window>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d167      	bne.n	800799e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	60fa      	str	r2, [r7, #12]
 80078d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4413      	add	r3, r2
 80078dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	6a1a      	ldr	r2, [r3, #32]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	0a5b      	lsrs	r3, r3, #9
 80078ea:	4413      	add	r3, r2
 80078ec:	4619      	mov	r1, r3
 80078ee:	6938      	ldr	r0, [r7, #16]
 80078f0:	f7ff fefe 	bl	80076f0 <move_window>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d153      	bne.n	80079a2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	4413      	add	r3, r2
 8007904:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007908:	021b      	lsls	r3, r3, #8
 800790a:	461a      	mov	r2, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4313      	orrs	r3, r2
 8007910:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <get_fat+0xbc>
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	091b      	lsrs	r3, r3, #4
 8007920:	e002      	b.n	8007928 <get_fat+0xc2>
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007928:	617b      	str	r3, [r7, #20]
			break;
 800792a:	e03f      	b.n	80079ac <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	6a1a      	ldr	r2, [r3, #32]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	0a1b      	lsrs	r3, r3, #8
 8007934:	4413      	add	r3, r2
 8007936:	4619      	mov	r1, r3
 8007938:	6938      	ldr	r0, [r7, #16]
 800793a:	f7ff fed9 	bl	80076f0 <move_window>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d130      	bne.n	80079a6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007952:	4413      	add	r3, r2
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff fc1b 	bl	8007190 <ld_word>
 800795a:	4603      	mov	r3, r0
 800795c:	617b      	str	r3, [r7, #20]
			break;
 800795e:	e025      	b.n	80079ac <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	6a1a      	ldr	r2, [r3, #32]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	09db      	lsrs	r3, r3, #7
 8007968:	4413      	add	r3, r2
 800796a:	4619      	mov	r1, r3
 800796c:	6938      	ldr	r0, [r7, #16]
 800796e:	f7ff febf 	bl	80076f0 <move_window>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d118      	bne.n	80079aa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007986:	4413      	add	r3, r2
 8007988:	4618      	mov	r0, r3
 800798a:	f7ff fc19 	bl	80071c0 <ld_dword>
 800798e:	4603      	mov	r3, r0
 8007990:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007994:	617b      	str	r3, [r7, #20]
			break;
 8007996:	e009      	b.n	80079ac <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007998:	2301      	movs	r3, #1
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	e006      	b.n	80079ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800799e:	bf00      	nop
 80079a0:	e004      	b.n	80079ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079a2:	bf00      	nop
 80079a4:	e002      	b.n	80079ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80079a6:	bf00      	nop
 80079a8:	e000      	b.n	80079ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80079aa:	bf00      	nop
		}
	}

	return val;
 80079ac:	697b      	ldr	r3, [r7, #20]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80079b6:	b590      	push	{r4, r7, lr}
 80079b8:	b089      	sub	sp, #36	; 0x24
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80079c2:	2302      	movs	r3, #2
 80079c4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	f240 80d2 	bls.w	8007b72 <put_fat+0x1bc>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	f080 80cc 	bcs.w	8007b72 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b03      	cmp	r3, #3
 80079e0:	f000 8096 	beq.w	8007b10 <put_fat+0x15a>
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	f300 80cd 	bgt.w	8007b84 <put_fat+0x1ce>
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d002      	beq.n	80079f4 <put_fat+0x3e>
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d06e      	beq.n	8007ad0 <put_fat+0x11a>
 80079f2:	e0c7      	b.n	8007b84 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	61bb      	str	r3, [r7, #24]
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	085b      	lsrs	r3, r3, #1
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	4413      	add	r3, r2
 8007a00:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a1a      	ldr	r2, [r3, #32]
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	0a5b      	lsrs	r3, r3, #9
 8007a0a:	4413      	add	r3, r2
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f7ff fe6e 	bl	80076f0 <move_window>
 8007a14:	4603      	mov	r3, r0
 8007a16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a18:	7ffb      	ldrb	r3, [r7, #31]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f040 80ab 	bne.w	8007b76 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	1c59      	adds	r1, r3, #1
 8007a2a:	61b9      	str	r1, [r7, #24]
 8007a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a30:	4413      	add	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00d      	beq.n	8007a5a <put_fat+0xa4>
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	b25b      	sxtb	r3, r3
 8007a44:	f003 030f 	and.w	r3, r3, #15
 8007a48:	b25a      	sxtb	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	011b      	lsls	r3, r3, #4
 8007a50:	b25b      	sxtb	r3, r3
 8007a52:	4313      	orrs	r3, r2
 8007a54:	b25b      	sxtb	r3, r3
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	e001      	b.n	8007a5e <put_fat+0xa8>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2201      	movs	r2, #1
 8007a66:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a1a      	ldr	r2, [r3, #32]
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	0a5b      	lsrs	r3, r3, #9
 8007a70:	4413      	add	r3, r2
 8007a72:	4619      	mov	r1, r3
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f7ff fe3b 	bl	80076f0 <move_window>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a7e:	7ffb      	ldrb	r3, [r7, #31]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d17a      	bne.n	8007b7a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a90:	4413      	add	r3, r2
 8007a92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <put_fat+0xf0>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	091b      	lsrs	r3, r3, #4
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	e00e      	b.n	8007ac4 <put_fat+0x10e>
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	b25b      	sxtb	r3, r3
 8007aac:	f023 030f 	bic.w	r3, r3, #15
 8007ab0:	b25a      	sxtb	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	0a1b      	lsrs	r3, r3, #8
 8007ab6:	b25b      	sxtb	r3, r3
 8007ab8:	f003 030f 	and.w	r3, r3, #15
 8007abc:	b25b      	sxtb	r3, r3
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	b25b      	sxtb	r3, r3
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2201      	movs	r2, #1
 8007acc:	70da      	strb	r2, [r3, #3]
			break;
 8007ace:	e059      	b.n	8007b84 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a1a      	ldr	r2, [r3, #32]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	0a1b      	lsrs	r3, r3, #8
 8007ad8:	4413      	add	r3, r2
 8007ada:	4619      	mov	r1, r3
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f7ff fe07 	bl	80076f0 <move_window>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ae6:	7ffb      	ldrb	r3, [r7, #31]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d148      	bne.n	8007b7e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007afa:	4413      	add	r3, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	b292      	uxth	r2, r2
 8007b00:	4611      	mov	r1, r2
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff fb7f 	bl	8007206 <st_word>
			fs->wflag = 1;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	70da      	strb	r2, [r3, #3]
			break;
 8007b0e:	e039      	b.n	8007b84 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a1a      	ldr	r2, [r3, #32]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	09db      	lsrs	r3, r3, #7
 8007b18:	4413      	add	r3, r2
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f7ff fde7 	bl	80076f0 <move_window>
 8007b22:	4603      	mov	r3, r0
 8007b24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b26:	7ffb      	ldrb	r3, [r7, #31]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d12a      	bne.n	8007b82 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007b40:	4413      	add	r3, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff fb3c 	bl	80071c0 <ld_dword>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b4e:	4323      	orrs	r3, r4
 8007b50:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007b60:	4413      	add	r3, r2
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7ff fb69 	bl	800723c <st_dword>
			fs->wflag = 1;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	70da      	strb	r2, [r3, #3]
			break;
 8007b70:	e008      	b.n	8007b84 <put_fat+0x1ce>
		}
	}
 8007b72:	bf00      	nop
 8007b74:	e006      	b.n	8007b84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007b76:	bf00      	nop
 8007b78:	e004      	b.n	8007b84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007b7a:	bf00      	nop
 8007b7c:	e002      	b.n	8007b84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007b7e:	bf00      	nop
 8007b80:	e000      	b.n	8007b84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007b82:	bf00      	nop
	return res;
 8007b84:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3724      	adds	r7, #36	; 0x24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd90      	pop	{r4, r7, pc}

08007b8e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b088      	sub	sp, #32
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d904      	bls.n	8007bb4 <remove_chain+0x26>
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d301      	bcc.n	8007bb8 <remove_chain+0x2a>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	e04b      	b.n	8007c50 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00c      	beq.n	8007bd8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	69b8      	ldr	r0, [r7, #24]
 8007bc6:	f7ff fef6 	bl	80079b6 <put_fat>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007bce:	7ffb      	ldrb	r3, [r7, #31]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <remove_chain+0x4a>
 8007bd4:	7ffb      	ldrb	r3, [r7, #31]
 8007bd6:	e03b      	b.n	8007c50 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007bd8:	68b9      	ldr	r1, [r7, #8]
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7ff fe43 	bl	8007866 <get_fat>
 8007be0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d031      	beq.n	8007c4c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d101      	bne.n	8007bf2 <remove_chain+0x64>
 8007bee:	2302      	movs	r3, #2
 8007bf0:	e02e      	b.n	8007c50 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf8:	d101      	bne.n	8007bfe <remove_chain+0x70>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e028      	b.n	8007c50 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007bfe:	2200      	movs	r2, #0
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	69b8      	ldr	r0, [r7, #24]
 8007c04:	f7ff fed7 	bl	80079b6 <put_fat>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007c0c:	7ffb      	ldrb	r3, [r7, #31]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <remove_chain+0x88>
 8007c12:	7ffb      	ldrb	r3, [r7, #31]
 8007c14:	e01c      	b.n	8007c50 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	691a      	ldr	r2, [r3, #16]
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	3b02      	subs	r3, #2
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d20b      	bcs.n	8007c3c <remove_chain+0xae>
			fs->free_clst++;
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	791b      	ldrb	r3, [r3, #4]
 8007c32:	f043 0301 	orr.w	r3, r3, #1
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d3c6      	bcc.n	8007bd8 <remove_chain+0x4a>
 8007c4a:	e000      	b.n	8007c4e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007c4c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3720      	adds	r7, #32
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10d      	bne.n	8007c8a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d004      	beq.n	8007c84 <create_chain+0x2c>
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d31b      	bcc.n	8007cbc <create_chain+0x64>
 8007c84:	2301      	movs	r3, #1
 8007c86:	61bb      	str	r3, [r7, #24]
 8007c88:	e018      	b.n	8007cbc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7ff fdea 	bl	8007866 <get_fat>
 8007c92:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d801      	bhi.n	8007c9e <create_chain+0x46>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e070      	b.n	8007d80 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca4:	d101      	bne.n	8007caa <create_chain+0x52>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	e06a      	b.n	8007d80 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d201      	bcs.n	8007cb8 <create_chain+0x60>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	e063      	b.n	8007d80 <create_chain+0x128>
		scl = clst;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	69fa      	ldr	r2, [r7, #28]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d307      	bcc.n	8007ce0 <create_chain+0x88>
				ncl = 2;
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007cd4:	69fa      	ldr	r2, [r7, #28]
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d901      	bls.n	8007ce0 <create_chain+0x88>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	e04f      	b.n	8007d80 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007ce0:	69f9      	ldr	r1, [r7, #28]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7ff fdbf 	bl	8007866 <get_fat>
 8007ce8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00e      	beq.n	8007d0e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d003      	beq.n	8007cfe <create_chain+0xa6>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfc:	d101      	bne.n	8007d02 <create_chain+0xaa>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	e03e      	b.n	8007d80 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d1da      	bne.n	8007cc0 <create_chain+0x68>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	e038      	b.n	8007d80 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007d0e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007d10:	f04f 32ff 	mov.w	r2, #4294967295
 8007d14:	69f9      	ldr	r1, [r7, #28]
 8007d16:	6938      	ldr	r0, [r7, #16]
 8007d18:	f7ff fe4d 	bl	80079b6 <put_fat>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d109      	bne.n	8007d3a <create_chain+0xe2>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d006      	beq.n	8007d3a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007d2c:	69fa      	ldr	r2, [r7, #28]
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6938      	ldr	r0, [r7, #16]
 8007d32:	f7ff fe40 	bl	80079b6 <put_fat>
 8007d36:	4603      	mov	r3, r0
 8007d38:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d116      	bne.n	8007d6e <create_chain+0x116>
		fs->last_clst = ncl;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	69fa      	ldr	r2, [r7, #28]
 8007d44:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	691a      	ldr	r2, [r3, #16]
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	3b02      	subs	r3, #2
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d804      	bhi.n	8007d5e <create_chain+0x106>
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	1e5a      	subs	r2, r3, #1
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	791b      	ldrb	r3, [r3, #4]
 8007d62:	f043 0301 	orr.w	r3, r3, #1
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	711a      	strb	r2, [r3, #4]
 8007d6c:	e007      	b.n	8007d7e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d102      	bne.n	8007d7a <create_chain+0x122>
 8007d74:	f04f 33ff 	mov.w	r3, #4294967295
 8007d78:	e000      	b.n	8007d7c <create_chain+0x124>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007d7e:	69fb      	ldr	r3, [r7, #28]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3720      	adds	r7, #32
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	0a5b      	lsrs	r3, r3, #9
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	8952      	ldrh	r2, [r2, #10]
 8007da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	1d1a      	adds	r2, r3, #4
 8007db2:	613a      	str	r2, [r7, #16]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d101      	bne.n	8007dc2 <clmt_clust+0x3a>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e010      	b.n	8007de4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d307      	bcc.n	8007dda <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	617b      	str	r3, [r7, #20]
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007dd8:	e7e9      	b.n	8007dae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007dda:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	4413      	add	r3, r2
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	371c      	adds	r7, #28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e06:	d204      	bcs.n	8007e12 <dir_sdi+0x22>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	f003 031f 	and.w	r3, r3, #31
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007e12:	2302      	movs	r3, #2
 8007e14:	e063      	b.n	8007ede <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d106      	bne.n	8007e36 <dir_sdi+0x46>
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d902      	bls.n	8007e36 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10c      	bne.n	8007e56 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	095b      	lsrs	r3, r3, #5
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	8912      	ldrh	r2, [r2, #8]
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d301      	bcc.n	8007e4c <dir_sdi+0x5c>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e048      	b.n	8007ede <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	61da      	str	r2, [r3, #28]
 8007e54:	e029      	b.n	8007eaa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	895b      	ldrh	r3, [r3, #10]
 8007e5a:	025b      	lsls	r3, r3, #9
 8007e5c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007e5e:	e019      	b.n	8007e94 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6979      	ldr	r1, [r7, #20]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff fcfe 	bl	8007866 <get_fat>
 8007e6a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e72:	d101      	bne.n	8007e78 <dir_sdi+0x88>
 8007e74:	2301      	movs	r3, #1
 8007e76:	e032      	b.n	8007ede <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d904      	bls.n	8007e88 <dir_sdi+0x98>
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d301      	bcc.n	8007e8c <dir_sdi+0x9c>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e028      	b.n	8007ede <dir_sdi+0xee>
			ofs -= csz;
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d2e1      	bcs.n	8007e60 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007e9c:	6979      	ldr	r1, [r7, #20]
 8007e9e:	6938      	ldr	r0, [r7, #16]
 8007ea0:	f7ff fcc2 	bl	8007828 <clust2sect>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <dir_sdi+0xcc>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e010      	b.n	8007ede <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	69da      	ldr	r2, [r3, #28]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	0a5b      	lsrs	r3, r3, #9
 8007ec4:	441a      	add	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed6:	441a      	add	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b086      	sub	sp, #24
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	3320      	adds	r3, #32
 8007efc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <dir_next+0x28>
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f0c:	d301      	bcc.n	8007f12 <dir_next+0x2c>
 8007f0e:	2304      	movs	r3, #4
 8007f10:	e0aa      	b.n	8008068 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f040 8098 	bne.w	800804e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10b      	bne.n	8007f48 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	8912      	ldrh	r2, [r2, #8]
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	f0c0 8088 	bcc.w	800804e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	61da      	str	r2, [r3, #28]
 8007f44:	2304      	movs	r3, #4
 8007f46:	e08f      	b.n	8008068 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	0a5b      	lsrs	r3, r3, #9
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	8952      	ldrh	r2, [r2, #10]
 8007f50:	3a01      	subs	r2, #1
 8007f52:	4013      	ands	r3, r2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d17a      	bne.n	800804e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	4610      	mov	r0, r2
 8007f62:	f7ff fc80 	bl	8007866 <get_fat>
 8007f66:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d801      	bhi.n	8007f72 <dir_next+0x8c>
 8007f6e:	2302      	movs	r3, #2
 8007f70:	e07a      	b.n	8008068 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f78:	d101      	bne.n	8007f7e <dir_next+0x98>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e074      	b.n	8008068 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d358      	bcc.n	800803a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d104      	bne.n	8007f98 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	61da      	str	r2, [r3, #28]
 8007f94:	2304      	movs	r3, #4
 8007f96:	e067      	b.n	8008068 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	f7ff fe59 	bl	8007c58 <create_chain>
 8007fa6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <dir_next+0xcc>
 8007fae:	2307      	movs	r3, #7
 8007fb0:	e05a      	b.n	8008068 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d101      	bne.n	8007fbc <dir_next+0xd6>
 8007fb8:	2302      	movs	r3, #2
 8007fba:	e055      	b.n	8008068 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc2:	d101      	bne.n	8007fc8 <dir_next+0xe2>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e04f      	b.n	8008068 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f7ff fb4d 	bl	8007668 <sync_window>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <dir_next+0xf2>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e047      	b.n	8008068 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3330      	adds	r3, #48	; 0x30
 8007fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7ff f977 	bl	80072d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007fe8:	2300      	movs	r3, #0
 8007fea:	613b      	str	r3, [r7, #16]
 8007fec:	6979      	ldr	r1, [r7, #20]
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f7ff fc1a 	bl	8007828 <clust2sect>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ffa:	e012      	b.n	8008022 <dir_next+0x13c>
						fs->wflag = 1;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2201      	movs	r2, #1
 8008000:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f7ff fb30 	bl	8007668 <sync_window>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <dir_next+0x12c>
 800800e:	2301      	movs	r3, #1
 8008010:	e02a      	b.n	8008068 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	3301      	adds	r3, #1
 8008016:	613b      	str	r3, [r7, #16]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	62da      	str	r2, [r3, #44]	; 0x2c
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	895b      	ldrh	r3, [r3, #10]
 8008026:	461a      	mov	r2, r3
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	4293      	cmp	r3, r2
 800802c:	d3e6      	bcc.n	8007ffc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	1ad2      	subs	r2, r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008040:	6979      	ldr	r1, [r7, #20]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f7ff fbf0 	bl	8007828 <clust2sect>
 8008048:	4602      	mov	r2, r0
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008060:	441a      	add	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3718      	adds	r7, #24
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008080:	2100      	movs	r1, #0
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7ff feb4 	bl	8007df0 <dir_sdi>
 8008088:	4603      	mov	r3, r0
 800808a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d12b      	bne.n	80080ea <dir_alloc+0x7a>
		n = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	4619      	mov	r1, r3
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff fb27 	bl	80076f0 <move_window>
 80080a2:	4603      	mov	r3, r0
 80080a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d11d      	bne.n	80080e8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2be5      	cmp	r3, #229	; 0xe5
 80080b4:	d004      	beq.n	80080c0 <dir_alloc+0x50>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d107      	bne.n	80080d0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	3301      	adds	r3, #1
 80080c4:	613b      	str	r3, [r7, #16]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d102      	bne.n	80080d4 <dir_alloc+0x64>
 80080ce:	e00c      	b.n	80080ea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80080d0:	2300      	movs	r3, #0
 80080d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80080d4:	2101      	movs	r1, #1
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff ff05 	bl	8007ee6 <dir_next>
 80080dc:	4603      	mov	r3, r0
 80080de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80080e0:	7dfb      	ldrb	r3, [r7, #23]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0d7      	beq.n	8008096 <dir_alloc+0x26>
 80080e6:	e000      	b.n	80080ea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80080e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	d101      	bne.n	80080f4 <dir_alloc+0x84>
 80080f0:	2307      	movs	r3, #7
 80080f2:	75fb      	strb	r3, [r7, #23]
	return res;
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	331a      	adds	r3, #26
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff f83f 	bl	8007190 <ld_word>
 8008112:	4603      	mov	r3, r0
 8008114:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	2b03      	cmp	r3, #3
 800811c:	d109      	bne.n	8008132 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	3314      	adds	r3, #20
 8008122:	4618      	mov	r0, r3
 8008124:	f7ff f834 	bl	8007190 <ld_word>
 8008128:	4603      	mov	r3, r0
 800812a:	041b      	lsls	r3, r3, #16
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	4313      	orrs	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008132:	68fb      	ldr	r3, [r7, #12]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	331a      	adds	r3, #26
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	b292      	uxth	r2, r2
 8008150:	4611      	mov	r1, r2
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff f857 	bl	8007206 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	2b03      	cmp	r3, #3
 800815e:	d109      	bne.n	8008174 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f103 0214 	add.w	r2, r3, #20
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	0c1b      	lsrs	r3, r3, #16
 800816a:	b29b      	uxth	r3, r3
 800816c:	4619      	mov	r1, r3
 800816e:	4610      	mov	r0, r2
 8008170:	f7ff f849 	bl	8007206 <st_word>
	}
}
 8008174:	bf00      	nop
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800818a:	2100      	movs	r1, #0
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff fe2f 	bl	8007df0 <dir_sdi>
 8008192:	4603      	mov	r3, r0
 8008194:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008196:	7dfb      	ldrb	r3, [r7, #23]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <dir_find+0x24>
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	e03e      	b.n	800821e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	4619      	mov	r1, r3
 80081a6:	6938      	ldr	r0, [r7, #16]
 80081a8:	f7ff faa2 	bl	80076f0 <move_window>
 80081ac:	4603      	mov	r3, r0
 80081ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d12f      	bne.n	8008216 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d102      	bne.n	80081ca <dir_find+0x4e>
 80081c4:	2304      	movs	r3, #4
 80081c6:	75fb      	strb	r3, [r7, #23]
 80081c8:	e028      	b.n	800821c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	330b      	adds	r3, #11
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	330b      	adds	r3, #11
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10a      	bne.n	8008202 <dir_find+0x86>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a18      	ldr	r0, [r3, #32]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3324      	adds	r3, #36	; 0x24
 80081f4:	220b      	movs	r2, #11
 80081f6:	4619      	mov	r1, r3
 80081f8:	f7ff f888 	bl	800730c <mem_cmp>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00b      	beq.n	800821a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008202:	2100      	movs	r1, #0
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff fe6e 	bl	8007ee6 <dir_next>
 800820a:	4603      	mov	r3, r0
 800820c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0c5      	beq.n	80081a0 <dir_find+0x24>
 8008214:	e002      	b.n	800821c <dir_find+0xa0>
		if (res != FR_OK) break;
 8008216:	bf00      	nop
 8008218:	e000      	b.n	800821c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800821a:	bf00      	nop

	return res;
 800821c:	7dfb      	ldrb	r3, [r7, #23]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008234:	2101      	movs	r1, #1
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff ff1a 	bl	8008070 <dir_alloc>
 800823c:	4603      	mov	r3, r0
 800823e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d11c      	bne.n	8008280 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	4619      	mov	r1, r3
 800824c:	68b8      	ldr	r0, [r7, #8]
 800824e:	f7ff fa4f 	bl	80076f0 <move_window>
 8008252:	4603      	mov	r3, r0
 8008254:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d111      	bne.n	8008280 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	2220      	movs	r2, #32
 8008262:	2100      	movs	r1, #0
 8008264:	4618      	mov	r0, r3
 8008266:	f7ff f836 	bl	80072d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a18      	ldr	r0, [r3, #32]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	3324      	adds	r3, #36	; 0x24
 8008272:	220b      	movs	r2, #11
 8008274:	4619      	mov	r1, r3
 8008276:	f7ff f80d 	bl	8007294 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2201      	movs	r2, #1
 800827e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008280:	7bfb      	ldrb	r3, [r7, #15]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b088      	sub	sp, #32
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3324      	adds	r3, #36	; 0x24
 80082a0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80082a2:	220b      	movs	r2, #11
 80082a4:	2120      	movs	r1, #32
 80082a6:	68b8      	ldr	r0, [r7, #8]
 80082a8:	f7ff f815 	bl	80072d6 <mem_set>
	si = i = 0; ni = 8;
 80082ac:	2300      	movs	r3, #0
 80082ae:	613b      	str	r3, [r7, #16]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	61fb      	str	r3, [r7, #28]
 80082b4:	2308      	movs	r3, #8
 80082b6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	61fa      	str	r2, [r7, #28]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	4413      	add	r3, r2
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80082c6:	7efb      	ldrb	r3, [r7, #27]
 80082c8:	2b20      	cmp	r3, #32
 80082ca:	d94e      	bls.n	800836a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80082cc:	7efb      	ldrb	r3, [r7, #27]
 80082ce:	2b2f      	cmp	r3, #47	; 0x2f
 80082d0:	d006      	beq.n	80082e0 <create_name+0x54>
 80082d2:	7efb      	ldrb	r3, [r7, #27]
 80082d4:	2b5c      	cmp	r3, #92	; 0x5c
 80082d6:	d110      	bne.n	80082fa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80082d8:	e002      	b.n	80082e0 <create_name+0x54>
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	3301      	adds	r3, #1
 80082de:	61fb      	str	r3, [r7, #28]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	4413      	add	r3, r2
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b2f      	cmp	r3, #47	; 0x2f
 80082ea:	d0f6      	beq.n	80082da <create_name+0x4e>
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	4413      	add	r3, r2
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b5c      	cmp	r3, #92	; 0x5c
 80082f6:	d0f0      	beq.n	80082da <create_name+0x4e>
			break;
 80082f8:	e038      	b.n	800836c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80082fa:	7efb      	ldrb	r3, [r7, #27]
 80082fc:	2b2e      	cmp	r3, #46	; 0x2e
 80082fe:	d003      	beq.n	8008308 <create_name+0x7c>
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	429a      	cmp	r2, r3
 8008306:	d30c      	bcc.n	8008322 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b0b      	cmp	r3, #11
 800830c:	d002      	beq.n	8008314 <create_name+0x88>
 800830e:	7efb      	ldrb	r3, [r7, #27]
 8008310:	2b2e      	cmp	r3, #46	; 0x2e
 8008312:	d001      	beq.n	8008318 <create_name+0x8c>
 8008314:	2306      	movs	r3, #6
 8008316:	e044      	b.n	80083a2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008318:	2308      	movs	r3, #8
 800831a:	613b      	str	r3, [r7, #16]
 800831c:	230b      	movs	r3, #11
 800831e:	617b      	str	r3, [r7, #20]
			continue;
 8008320:	e022      	b.n	8008368 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008322:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008326:	2b00      	cmp	r3, #0
 8008328:	da04      	bge.n	8008334 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800832a:	7efb      	ldrb	r3, [r7, #27]
 800832c:	3b80      	subs	r3, #128	; 0x80
 800832e:	4a1f      	ldr	r2, [pc, #124]	; (80083ac <create_name+0x120>)
 8008330:	5cd3      	ldrb	r3, [r2, r3]
 8008332:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008334:	7efb      	ldrb	r3, [r7, #27]
 8008336:	4619      	mov	r1, r3
 8008338:	481d      	ldr	r0, [pc, #116]	; (80083b0 <create_name+0x124>)
 800833a:	f7ff f80e 	bl	800735a <chk_chr>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <create_name+0xbc>
 8008344:	2306      	movs	r3, #6
 8008346:	e02c      	b.n	80083a2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008348:	7efb      	ldrb	r3, [r7, #27]
 800834a:	2b60      	cmp	r3, #96	; 0x60
 800834c:	d905      	bls.n	800835a <create_name+0xce>
 800834e:	7efb      	ldrb	r3, [r7, #27]
 8008350:	2b7a      	cmp	r3, #122	; 0x7a
 8008352:	d802      	bhi.n	800835a <create_name+0xce>
 8008354:	7efb      	ldrb	r3, [r7, #27]
 8008356:	3b20      	subs	r3, #32
 8008358:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	613a      	str	r2, [r7, #16]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	4413      	add	r3, r2
 8008364:	7efa      	ldrb	r2, [r7, #27]
 8008366:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008368:	e7a6      	b.n	80082b8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800836a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	441a      	add	r2, r3
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <create_name+0xf4>
 800837c:	2306      	movs	r3, #6
 800837e:	e010      	b.n	80083a2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	2be5      	cmp	r3, #229	; 0xe5
 8008386:	d102      	bne.n	800838e <create_name+0x102>
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2205      	movs	r2, #5
 800838c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800838e:	7efb      	ldrb	r3, [r7, #27]
 8008390:	2b20      	cmp	r3, #32
 8008392:	d801      	bhi.n	8008398 <create_name+0x10c>
 8008394:	2204      	movs	r2, #4
 8008396:	e000      	b.n	800839a <create_name+0x10e>
 8008398:	2200      	movs	r2, #0
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	330b      	adds	r3, #11
 800839e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80083a0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3720      	adds	r7, #32
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	0800ca18 	.word	0x0800ca18
 80083b0:	0800c23c 	.word	0x0800c23c

080083b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80083c8:	e002      	b.n	80083d0 <follow_path+0x1c>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	3301      	adds	r3, #1
 80083ce:	603b      	str	r3, [r7, #0]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b2f      	cmp	r3, #47	; 0x2f
 80083d6:	d0f8      	beq.n	80083ca <follow_path+0x16>
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b5c      	cmp	r3, #92	; 0x5c
 80083de:	d0f4      	beq.n	80083ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	2200      	movs	r2, #0
 80083e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	2b1f      	cmp	r3, #31
 80083ec:	d80a      	bhi.n	8008404 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2280      	movs	r2, #128	; 0x80
 80083f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80083f6:	2100      	movs	r1, #0
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff fcf9 	bl	8007df0 <dir_sdi>
 80083fe:	4603      	mov	r3, r0
 8008400:	75fb      	strb	r3, [r7, #23]
 8008402:	e043      	b.n	800848c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008404:	463b      	mov	r3, r7
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff ff3f 	bl	800828c <create_name>
 800840e:	4603      	mov	r3, r0
 8008410:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d134      	bne.n	8008482 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff feaf 	bl	800817c <dir_find>
 800841e:	4603      	mov	r3, r0
 8008420:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008428:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800842a:	7dfb      	ldrb	r3, [r7, #23]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00a      	beq.n	8008446 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	2b04      	cmp	r3, #4
 8008434:	d127      	bne.n	8008486 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008436:	7afb      	ldrb	r3, [r7, #11]
 8008438:	f003 0304 	and.w	r3, r3, #4
 800843c:	2b00      	cmp	r3, #0
 800843e:	d122      	bne.n	8008486 <follow_path+0xd2>
 8008440:	2305      	movs	r3, #5
 8008442:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008444:	e01f      	b.n	8008486 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008446:	7afb      	ldrb	r3, [r7, #11]
 8008448:	f003 0304 	and.w	r3, r3, #4
 800844c:	2b00      	cmp	r3, #0
 800844e:	d11c      	bne.n	800848a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	799b      	ldrb	r3, [r3, #6]
 8008454:	f003 0310 	and.w	r3, r3, #16
 8008458:	2b00      	cmp	r3, #0
 800845a:	d102      	bne.n	8008462 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800845c:	2305      	movs	r3, #5
 800845e:	75fb      	strb	r3, [r7, #23]
 8008460:	e014      	b.n	800848c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008470:	4413      	add	r3, r2
 8008472:	4619      	mov	r1, r3
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f7ff fe42 	bl	80080fe <ld_clust>
 800847a:	4602      	mov	r2, r0
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008480:	e7c0      	b.n	8008404 <follow_path+0x50>
			if (res != FR_OK) break;
 8008482:	bf00      	nop
 8008484:	e002      	b.n	800848c <follow_path+0xd8>
				break;
 8008486:	bf00      	nop
 8008488:	e000      	b.n	800848c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800848a:	bf00      	nop
			}
		}
	}

	return res;
 800848c:	7dfb      	ldrb	r3, [r7, #23]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008496:	b480      	push	{r7}
 8008498:	b087      	sub	sp, #28
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800849e:	f04f 33ff 	mov.w	r3, #4294967295
 80084a2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d031      	beq.n	8008510 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	617b      	str	r3, [r7, #20]
 80084b2:	e002      	b.n	80084ba <get_ldnumber+0x24>
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	3301      	adds	r3, #1
 80084b8:	617b      	str	r3, [r7, #20]
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b20      	cmp	r3, #32
 80084c0:	d903      	bls.n	80084ca <get_ldnumber+0x34>
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2b3a      	cmp	r3, #58	; 0x3a
 80084c8:	d1f4      	bne.n	80084b4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	2b3a      	cmp	r3, #58	; 0x3a
 80084d0:	d11c      	bne.n	800850c <get_ldnumber+0x76>
			tp = *path;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	60fa      	str	r2, [r7, #12]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	3b30      	subs	r3, #48	; 0x30
 80084e2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b09      	cmp	r3, #9
 80084e8:	d80e      	bhi.n	8008508 <get_ldnumber+0x72>
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d10a      	bne.n	8008508 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d107      	bne.n	8008508 <get_ldnumber+0x72>
					vol = (int)i;
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	3301      	adds	r3, #1
 8008500:	617b      	str	r3, [r7, #20]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	e002      	b.n	8008512 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800850c:	2300      	movs	r3, #0
 800850e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008510:	693b      	ldr	r3, [r7, #16]
}
 8008512:	4618      	mov	r0, r3
 8008514:	371c      	adds	r7, #28
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
	...

08008520 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	70da      	strb	r2, [r3, #3]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f04f 32ff 	mov.w	r2, #4294967295
 8008536:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff f8d8 	bl	80076f0 <move_window>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <check_fs+0x2a>
 8008546:	2304      	movs	r3, #4
 8008548:	e038      	b.n	80085bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3330      	adds	r3, #48	; 0x30
 800854e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008552:	4618      	mov	r0, r3
 8008554:	f7fe fe1c 	bl	8007190 <ld_word>
 8008558:	4603      	mov	r3, r0
 800855a:	461a      	mov	r2, r3
 800855c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008560:	429a      	cmp	r2, r3
 8008562:	d001      	beq.n	8008568 <check_fs+0x48>
 8008564:	2303      	movs	r3, #3
 8008566:	e029      	b.n	80085bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800856e:	2be9      	cmp	r3, #233	; 0xe9
 8008570:	d009      	beq.n	8008586 <check_fs+0x66>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008578:	2beb      	cmp	r3, #235	; 0xeb
 800857a:	d11e      	bne.n	80085ba <check_fs+0x9a>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008582:	2b90      	cmp	r3, #144	; 0x90
 8008584:	d119      	bne.n	80085ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	3330      	adds	r3, #48	; 0x30
 800858a:	3336      	adds	r3, #54	; 0x36
 800858c:	4618      	mov	r0, r3
 800858e:	f7fe fe17 	bl	80071c0 <ld_dword>
 8008592:	4603      	mov	r3, r0
 8008594:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008598:	4a0a      	ldr	r2, [pc, #40]	; (80085c4 <check_fs+0xa4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d101      	bne.n	80085a2 <check_fs+0x82>
 800859e:	2300      	movs	r3, #0
 80085a0:	e00c      	b.n	80085bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3330      	adds	r3, #48	; 0x30
 80085a6:	3352      	adds	r3, #82	; 0x52
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fe fe09 	bl	80071c0 <ld_dword>
 80085ae:	4603      	mov	r3, r0
 80085b0:	4a05      	ldr	r2, [pc, #20]	; (80085c8 <check_fs+0xa8>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d101      	bne.n	80085ba <check_fs+0x9a>
 80085b6:	2300      	movs	r3, #0
 80085b8:	e000      	b.n	80085bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80085ba:	2302      	movs	r3, #2
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	00544146 	.word	0x00544146
 80085c8:	33544146 	.word	0x33544146

080085cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b096      	sub	sp, #88	; 0x58
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2200      	movs	r2, #0
 80085de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f7ff ff58 	bl	8008496 <get_ldnumber>
 80085e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80085e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	da01      	bge.n	80085f2 <find_volume+0x26>
 80085ee:	230b      	movs	r3, #11
 80085f0:	e22d      	b.n	8008a4e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80085f2:	4aa1      	ldr	r2, [pc, #644]	; (8008878 <find_volume+0x2ac>)
 80085f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80085fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d101      	bne.n	8008606 <find_volume+0x3a>
 8008602:	230c      	movs	r3, #12
 8008604:	e223      	b.n	8008a4e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800860a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800860c:	79fb      	ldrb	r3, [r7, #7]
 800860e:	f023 0301 	bic.w	r3, r3, #1
 8008612:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d01a      	beq.n	8008652 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	785b      	ldrb	r3, [r3, #1]
 8008620:	4618      	mov	r0, r3
 8008622:	f7fe fd17 	bl	8007054 <disk_status>
 8008626:	4603      	mov	r3, r0
 8008628:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800862c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10c      	bne.n	8008652 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008638:	79fb      	ldrb	r3, [r7, #7]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d007      	beq.n	800864e <find_volume+0x82>
 800863e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800864a:	230a      	movs	r3, #10
 800864c:	e1ff      	b.n	8008a4e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800864e:	2300      	movs	r3, #0
 8008650:	e1fd      	b.n	8008a4e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008654:	2200      	movs	r2, #0
 8008656:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800865a:	b2da      	uxtb	r2, r3
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008662:	785b      	ldrb	r3, [r3, #1]
 8008664:	4618      	mov	r0, r3
 8008666:	f7fe fd0f 	bl	8007088 <disk_initialize>
 800866a:	4603      	mov	r3, r0
 800866c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008670:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800867c:	2303      	movs	r3, #3
 800867e:	e1e6      	b.n	8008a4e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d007      	beq.n	8008696 <find_volume+0xca>
 8008686:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800868a:	f003 0304 	and.w	r3, r3, #4
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008692:	230a      	movs	r3, #10
 8008694:	e1db      	b.n	8008a4e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800869a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800869c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800869e:	f7ff ff3f 	bl	8008520 <check_fs>
 80086a2:	4603      	mov	r3, r0
 80086a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80086a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d149      	bne.n	8008744 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80086b0:	2300      	movs	r3, #0
 80086b2:	643b      	str	r3, [r7, #64]	; 0x40
 80086b4:	e01e      	b.n	80086f4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086be:	011b      	lsls	r3, r3, #4
 80086c0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80086c4:	4413      	add	r3, r2
 80086c6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80086c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ca:	3304      	adds	r3, #4
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d006      	beq.n	80086e0 <find_volume+0x114>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	3308      	adds	r3, #8
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe fd72 	bl	80071c0 <ld_dword>
 80086dc:	4602      	mov	r2, r0
 80086de:	e000      	b.n	80086e2 <find_volume+0x116>
 80086e0:	2200      	movs	r2, #0
 80086e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	3358      	adds	r3, #88	; 0x58
 80086e8:	443b      	add	r3, r7
 80086ea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80086ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086f0:	3301      	adds	r3, #1
 80086f2:	643b      	str	r3, [r7, #64]	; 0x40
 80086f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d9dd      	bls.n	80086b6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80086fa:	2300      	movs	r3, #0
 80086fc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80086fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <find_volume+0x13e>
 8008704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008706:	3b01      	subs	r3, #1
 8008708:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800870a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	3358      	adds	r3, #88	; 0x58
 8008710:	443b      	add	r3, r7
 8008712:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008716:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800871a:	2b00      	cmp	r3, #0
 800871c:	d005      	beq.n	800872a <find_volume+0x15e>
 800871e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008720:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008722:	f7ff fefd 	bl	8008520 <check_fs>
 8008726:	4603      	mov	r3, r0
 8008728:	e000      	b.n	800872c <find_volume+0x160>
 800872a:	2303      	movs	r3, #3
 800872c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008730:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008734:	2b01      	cmp	r3, #1
 8008736:	d905      	bls.n	8008744 <find_volume+0x178>
 8008738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800873a:	3301      	adds	r3, #1
 800873c:	643b      	str	r3, [r7, #64]	; 0x40
 800873e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008740:	2b03      	cmp	r3, #3
 8008742:	d9e2      	bls.n	800870a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008748:	2b04      	cmp	r3, #4
 800874a:	d101      	bne.n	8008750 <find_volume+0x184>
 800874c:	2301      	movs	r3, #1
 800874e:	e17e      	b.n	8008a4e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008750:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008754:	2b01      	cmp	r3, #1
 8008756:	d901      	bls.n	800875c <find_volume+0x190>
 8008758:	230d      	movs	r3, #13
 800875a:	e178      	b.n	8008a4e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800875c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875e:	3330      	adds	r3, #48	; 0x30
 8008760:	330b      	adds	r3, #11
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe fd14 	bl	8007190 <ld_word>
 8008768:	4603      	mov	r3, r0
 800876a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800876e:	d001      	beq.n	8008774 <find_volume+0x1a8>
 8008770:	230d      	movs	r3, #13
 8008772:	e16c      	b.n	8008a4e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	3330      	adds	r3, #48	; 0x30
 8008778:	3316      	adds	r3, #22
 800877a:	4618      	mov	r0, r3
 800877c:	f7fe fd08 	bl	8007190 <ld_word>
 8008780:	4603      	mov	r3, r0
 8008782:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008786:	2b00      	cmp	r3, #0
 8008788:	d106      	bne.n	8008798 <find_volume+0x1cc>
 800878a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878c:	3330      	adds	r3, #48	; 0x30
 800878e:	3324      	adds	r3, #36	; 0x24
 8008790:	4618      	mov	r0, r3
 8008792:	f7fe fd15 	bl	80071c0 <ld_dword>
 8008796:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800879c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80087a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80087a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087aa:	789b      	ldrb	r3, [r3, #2]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d005      	beq.n	80087bc <find_volume+0x1f0>
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	789b      	ldrb	r3, [r3, #2]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d001      	beq.n	80087bc <find_volume+0x1f0>
 80087b8:	230d      	movs	r3, #13
 80087ba:	e148      	b.n	8008a4e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80087bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087be:	789b      	ldrb	r3, [r3, #2]
 80087c0:	461a      	mov	r2, r3
 80087c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c4:	fb02 f303 	mul.w	r3, r2, r3
 80087c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80087ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	895b      	ldrh	r3, [r3, #10]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d008      	beq.n	80087f0 <find_volume+0x224>
 80087de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e0:	895b      	ldrh	r3, [r3, #10]
 80087e2:	461a      	mov	r2, r3
 80087e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e6:	895b      	ldrh	r3, [r3, #10]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	4013      	ands	r3, r2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <find_volume+0x228>
 80087f0:	230d      	movs	r3, #13
 80087f2:	e12c      	b.n	8008a4e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	3330      	adds	r3, #48	; 0x30
 80087f8:	3311      	adds	r3, #17
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe fcc8 	bl	8007190 <ld_word>
 8008800:	4603      	mov	r3, r0
 8008802:	461a      	mov	r2, r3
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880a:	891b      	ldrh	r3, [r3, #8]
 800880c:	f003 030f 	and.w	r3, r3, #15
 8008810:	b29b      	uxth	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <find_volume+0x24e>
 8008816:	230d      	movs	r3, #13
 8008818:	e119      	b.n	8008a4e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	3330      	adds	r3, #48	; 0x30
 800881e:	3313      	adds	r3, #19
 8008820:	4618      	mov	r0, r3
 8008822:	f7fe fcb5 	bl	8007190 <ld_word>
 8008826:	4603      	mov	r3, r0
 8008828:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800882a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800882c:	2b00      	cmp	r3, #0
 800882e:	d106      	bne.n	800883e <find_volume+0x272>
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	3330      	adds	r3, #48	; 0x30
 8008834:	3320      	adds	r3, #32
 8008836:	4618      	mov	r0, r3
 8008838:	f7fe fcc2 	bl	80071c0 <ld_dword>
 800883c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008840:	3330      	adds	r3, #48	; 0x30
 8008842:	330e      	adds	r3, #14
 8008844:	4618      	mov	r0, r3
 8008846:	f7fe fca3 	bl	8007190 <ld_word>
 800884a:	4603      	mov	r3, r0
 800884c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800884e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <find_volume+0x28c>
 8008854:	230d      	movs	r3, #13
 8008856:	e0fa      	b.n	8008a4e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008858:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800885a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800885c:	4413      	add	r3, r2
 800885e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008860:	8912      	ldrh	r2, [r2, #8]
 8008862:	0912      	lsrs	r2, r2, #4
 8008864:	b292      	uxth	r2, r2
 8008866:	4413      	add	r3, r2
 8008868:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800886a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	429a      	cmp	r2, r3
 8008870:	d204      	bcs.n	800887c <find_volume+0x2b0>
 8008872:	230d      	movs	r3, #13
 8008874:	e0eb      	b.n	8008a4e <find_volume+0x482>
 8008876:	bf00      	nop
 8008878:	200008c0 	.word	0x200008c0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800887c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008884:	8952      	ldrh	r2, [r2, #10]
 8008886:	fbb3 f3f2 	udiv	r3, r3, r2
 800888a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <find_volume+0x2ca>
 8008892:	230d      	movs	r3, #13
 8008894:	e0db      	b.n	8008a4e <find_volume+0x482>
		fmt = FS_FAT32;
 8008896:	2303      	movs	r3, #3
 8008898:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d802      	bhi.n	80088ac <find_volume+0x2e0>
 80088a6:	2302      	movs	r3, #2
 80088a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80088ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ae:	f640 72f5 	movw	r2, #4085	; 0xff5
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d802      	bhi.n	80088bc <find_volume+0x2f0>
 80088b6:	2301      	movs	r3, #1
 80088b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	1c9a      	adds	r2, r3, #2
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80088c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80088c8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80088ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80088cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088ce:	441a      	add	r2, r3
 80088d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80088d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80088d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d8:	441a      	add	r2, r3
 80088da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088dc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80088de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d11e      	bne.n	8008924 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80088e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e8:	3330      	adds	r3, #48	; 0x30
 80088ea:	332a      	adds	r3, #42	; 0x2a
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fe fc4f 	bl	8007190 <ld_word>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <find_volume+0x330>
 80088f8:	230d      	movs	r3, #13
 80088fa:	e0a8      	b.n	8008a4e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80088fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fe:	891b      	ldrh	r3, [r3, #8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <find_volume+0x33c>
 8008904:	230d      	movs	r3, #13
 8008906:	e0a2      	b.n	8008a4e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890a:	3330      	adds	r3, #48	; 0x30
 800890c:	332c      	adds	r3, #44	; 0x2c
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe fc56 	bl	80071c0 <ld_dword>
 8008914:	4602      	mov	r2, r0
 8008916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008918:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800891a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	647b      	str	r3, [r7, #68]	; 0x44
 8008922:	e01f      	b.n	8008964 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008926:	891b      	ldrh	r3, [r3, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <find_volume+0x364>
 800892c:	230d      	movs	r3, #13
 800892e:	e08e      	b.n	8008a4e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008932:	6a1a      	ldr	r2, [r3, #32]
 8008934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008936:	441a      	add	r2, r3
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800893c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008940:	2b02      	cmp	r3, #2
 8008942:	d103      	bne.n	800894c <find_volume+0x380>
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	e00a      	b.n	8008962 <find_volume+0x396>
 800894c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894e:	695a      	ldr	r2, [r3, #20]
 8008950:	4613      	mov	r3, r2
 8008952:	005b      	lsls	r3, r3, #1
 8008954:	4413      	add	r3, r2
 8008956:	085a      	lsrs	r2, r3, #1
 8008958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008962:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008966:	699a      	ldr	r2, [r3, #24]
 8008968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800896a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800896e:	0a5b      	lsrs	r3, r3, #9
 8008970:	429a      	cmp	r2, r3
 8008972:	d201      	bcs.n	8008978 <find_volume+0x3ac>
 8008974:	230d      	movs	r3, #13
 8008976:	e06a      	b.n	8008a4e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897a:	f04f 32ff 	mov.w	r2, #4294967295
 800897e:	611a      	str	r2, [r3, #16]
 8008980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008982:	691a      	ldr	r2, [r3, #16]
 8008984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008986:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898a:	2280      	movs	r2, #128	; 0x80
 800898c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800898e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008992:	2b03      	cmp	r3, #3
 8008994:	d149      	bne.n	8008a2a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	3330      	adds	r3, #48	; 0x30
 800899a:	3330      	adds	r3, #48	; 0x30
 800899c:	4618      	mov	r0, r3
 800899e:	f7fe fbf7 	bl	8007190 <ld_word>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d140      	bne.n	8008a2a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80089a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089aa:	3301      	adds	r3, #1
 80089ac:	4619      	mov	r1, r3
 80089ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089b0:	f7fe fe9e 	bl	80076f0 <move_window>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d137      	bne.n	8008a2a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	2200      	movs	r2, #0
 80089be:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80089c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c2:	3330      	adds	r3, #48	; 0x30
 80089c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fe fbe1 	bl	8007190 <ld_word>
 80089ce:	4603      	mov	r3, r0
 80089d0:	461a      	mov	r2, r3
 80089d2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d127      	bne.n	8008a2a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	3330      	adds	r3, #48	; 0x30
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe fbee 	bl	80071c0 <ld_dword>
 80089e4:	4603      	mov	r3, r0
 80089e6:	4a1c      	ldr	r2, [pc, #112]	; (8008a58 <find_volume+0x48c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d11e      	bne.n	8008a2a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	3330      	adds	r3, #48	; 0x30
 80089f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fe fbe3 	bl	80071c0 <ld_dword>
 80089fa:	4603      	mov	r3, r0
 80089fc:	4a17      	ldr	r2, [pc, #92]	; (8008a5c <find_volume+0x490>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d113      	bne.n	8008a2a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a04:	3330      	adds	r3, #48	; 0x30
 8008a06:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe fbd8 	bl	80071c0 <ld_dword>
 8008a10:	4602      	mov	r2, r0
 8008a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a14:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a18:	3330      	adds	r3, #48	; 0x30
 8008a1a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe fbce 	bl	80071c0 <ld_dword>
 8008a24:	4602      	mov	r2, r0
 8008a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a28:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008a30:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008a32:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <find_volume+0x494>)
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	3301      	adds	r3, #1
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	4b09      	ldr	r3, [pc, #36]	; (8008a60 <find_volume+0x494>)
 8008a3c:	801a      	strh	r2, [r3, #0]
 8008a3e:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <find_volume+0x494>)
 8008a40:	881a      	ldrh	r2, [r3, #0]
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008a46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a48:	f7fe fdea 	bl	8007620 <clear_lock>
#endif
	return FR_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3758      	adds	r7, #88	; 0x58
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	41615252 	.word	0x41615252
 8008a5c:	61417272 	.word	0x61417272
 8008a60:	200008c4 	.word	0x200008c4

08008a64 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008a6e:	2309      	movs	r3, #9
 8008a70:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d01c      	beq.n	8008ab2 <validate+0x4e>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d018      	beq.n	8008ab2 <validate+0x4e>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d013      	beq.n	8008ab2 <validate+0x4e>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	889a      	ldrh	r2, [r3, #4]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	88db      	ldrh	r3, [r3, #6]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d10c      	bne.n	8008ab2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	785b      	ldrb	r3, [r3, #1]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fad8 	bl	8007054 <disk_status>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <validate+0x4e>
			res = FR_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d102      	bne.n	8008abe <validate+0x5a>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	e000      	b.n	8008ac0 <validate+0x5c>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	6013      	str	r3, [r2, #0]
	return res;
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b088      	sub	sp, #32
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	4613      	mov	r3, r2
 8008adc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008ae2:	f107 0310 	add.w	r3, r7, #16
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff fcd5 	bl	8008496 <get_ldnumber>
 8008aec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	da01      	bge.n	8008af8 <f_mount+0x28>
 8008af4:	230b      	movs	r3, #11
 8008af6:	e02b      	b.n	8008b50 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008af8:	4a17      	ldr	r2, [pc, #92]	; (8008b58 <f_mount+0x88>)
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008b08:	69b8      	ldr	r0, [r7, #24]
 8008b0a:	f7fe fd89 	bl	8007620 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d002      	beq.n	8008b20 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	490d      	ldr	r1, [pc, #52]	; (8008b58 <f_mount+0x88>)
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d002      	beq.n	8008b36 <f_mount+0x66>
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d001      	beq.n	8008b3a <f_mount+0x6a>
 8008b36:	2300      	movs	r3, #0
 8008b38:	e00a      	b.n	8008b50 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008b3a:	f107 010c 	add.w	r1, r7, #12
 8008b3e:	f107 0308 	add.w	r3, r7, #8
 8008b42:	2200      	movs	r2, #0
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff fd41 	bl	80085cc <find_volume>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3720      	adds	r7, #32
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	200008c0 	.word	0x200008c0

08008b5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b098      	sub	sp, #96	; 0x60
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4613      	mov	r3, r2
 8008b68:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <f_open+0x18>
 8008b70:	2309      	movs	r3, #9
 8008b72:	e1ad      	b.n	8008ed0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b7a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008b7c:	79fa      	ldrb	r2, [r7, #7]
 8008b7e:	f107 0110 	add.w	r1, r7, #16
 8008b82:	f107 0308 	add.w	r3, r7, #8
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7ff fd20 	bl	80085cc <find_volume>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008b92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f040 8191 	bne.w	8008ebe <f_open+0x362>
		dj.obj.fs = fs;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	f107 0314 	add.w	r3, r7, #20
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff fc03 	bl	80083b4 <follow_path>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008bb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d11a      	bne.n	8008bf2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008bbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008bc0:	b25b      	sxtb	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	da03      	bge.n	8008bce <f_open+0x72>
				res = FR_INVALID_NAME;
 8008bc6:	2306      	movs	r3, #6
 8008bc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008bcc:	e011      	b.n	8008bf2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008bce:	79fb      	ldrb	r3, [r7, #7]
 8008bd0:	f023 0301 	bic.w	r3, r3, #1
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bf14      	ite	ne
 8008bd8:	2301      	movne	r3, #1
 8008bda:	2300      	moveq	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	461a      	mov	r2, r3
 8008be0:	f107 0314 	add.w	r3, r7, #20
 8008be4:	4611      	mov	r1, r2
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe fbd2 	bl	8007390 <chk_lock>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008bf2:	79fb      	ldrb	r3, [r7, #7]
 8008bf4:	f003 031c 	and.w	r3, r3, #28
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d07f      	beq.n	8008cfc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d017      	beq.n	8008c34 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008c04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	d10e      	bne.n	8008c2a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008c0c:	f7fe fc1c 	bl	8007448 <enq_lock>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d006      	beq.n	8008c24 <f_open+0xc8>
 8008c16:	f107 0314 	add.w	r3, r7, #20
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff fb03 	bl	8008226 <dir_register>
 8008c20:	4603      	mov	r3, r0
 8008c22:	e000      	b.n	8008c26 <f_open+0xca>
 8008c24:	2312      	movs	r3, #18
 8008c26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008c2a:	79fb      	ldrb	r3, [r7, #7]
 8008c2c:	f043 0308 	orr.w	r3, r3, #8
 8008c30:	71fb      	strb	r3, [r7, #7]
 8008c32:	e010      	b.n	8008c56 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008c34:	7ebb      	ldrb	r3, [r7, #26]
 8008c36:	f003 0311 	and.w	r3, r3, #17
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <f_open+0xea>
					res = FR_DENIED;
 8008c3e:	2307      	movs	r3, #7
 8008c40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008c44:	e007      	b.n	8008c56 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	f003 0304 	and.w	r3, r3, #4
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <f_open+0xfa>
 8008c50:	2308      	movs	r3, #8
 8008c52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008c56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d168      	bne.n	8008d30 <f_open+0x1d4>
 8008c5e:	79fb      	ldrb	r3, [r7, #7]
 8008c60:	f003 0308 	and.w	r3, r3, #8
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d063      	beq.n	8008d30 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008c68:	f7fe f860 	bl	8006d2c <get_fattime>
 8008c6c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c70:	330e      	adds	r3, #14
 8008c72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7fe fae1 	bl	800723c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7c:	3316      	adds	r3, #22
 8008c7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe fadb 	bl	800723c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c88:	330b      	adds	r3, #11
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c92:	4611      	mov	r1, r2
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7ff fa32 	bl	80080fe <ld_clust>
 8008c9a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7ff fa4a 	bl	800813c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008caa:	331c      	adds	r3, #28
 8008cac:	2100      	movs	r1, #0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe fac4 	bl	800723c <st_dword>
					fs->wflag = 1;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d037      	beq.n	8008d30 <f_open+0x1d4>
						dw = fs->winsect;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008cc6:	f107 0314 	add.w	r3, r7, #20
 8008cca:	2200      	movs	r2, #0
 8008ccc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fe ff5d 	bl	8007b8e <remove_chain>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008cda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d126      	bne.n	8008d30 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe fd02 	bl	80076f0 <move_window>
 8008cec:	4603      	mov	r3, r0
 8008cee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cf6:	3a01      	subs	r2, #1
 8008cf8:	60da      	str	r2, [r3, #12]
 8008cfa:	e019      	b.n	8008d30 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d115      	bne.n	8008d30 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008d04:	7ebb      	ldrb	r3, [r7, #26]
 8008d06:	f003 0310 	and.w	r3, r3, #16
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008d0e:	2304      	movs	r3, #4
 8008d10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008d14:	e00c      	b.n	8008d30 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008d16:	79fb      	ldrb	r3, [r7, #7]
 8008d18:	f003 0302 	and.w	r3, r3, #2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d007      	beq.n	8008d30 <f_open+0x1d4>
 8008d20:	7ebb      	ldrb	r3, [r7, #26]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <f_open+0x1d4>
						res = FR_DENIED;
 8008d2a:	2307      	movs	r3, #7
 8008d2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008d30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d128      	bne.n	8008d8a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008d38:	79fb      	ldrb	r3, [r7, #7]
 8008d3a:	f003 0308 	and.w	r3, r3, #8
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d48:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	f023 0301 	bic.w	r3, r3, #1
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	bf14      	ite	ne
 8008d62:	2301      	movne	r3, #1
 8008d64:	2300      	moveq	r3, #0
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	461a      	mov	r2, r3
 8008d6a:	f107 0314 	add.w	r3, r7, #20
 8008d6e:	4611      	mov	r1, r2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe fb8b 	bl	800748c <inc_lock>
 8008d76:	4602      	mov	r2, r0
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d102      	bne.n	8008d8a <f_open+0x22e>
 8008d84:	2302      	movs	r3, #2
 8008d86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f040 8095 	bne.w	8008ebe <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d98:	4611      	mov	r1, r2
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff f9af 	bl	80080fe <ld_clust>
 8008da0:	4602      	mov	r2, r0
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da8:	331c      	adds	r3, #28
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe fa08 	bl	80071c0 <ld_dword>
 8008db0:	4602      	mov	r2, r0
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	88da      	ldrh	r2, [r3, #6]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	79fa      	ldrb	r2, [r7, #7]
 8008dce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3330      	adds	r3, #48	; 0x30
 8008de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dea:	2100      	movs	r1, #0
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fe fa72 	bl	80072d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008df2:	79fb      	ldrb	r3, [r7, #7]
 8008df4:	f003 0320 	and.w	r3, r3, #32
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d060      	beq.n	8008ebe <f_open+0x362>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d05c      	beq.n	8008ebe <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	895b      	ldrh	r3, [r3, #10]
 8008e10:	025b      	lsls	r3, r3, #9
 8008e12:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	657b      	str	r3, [r7, #84]	; 0x54
 8008e20:	e016      	b.n	8008e50 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe fd1d 	bl	8007866 <get_fat>
 8008e2c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d802      	bhi.n	8008e3a <f_open+0x2de>
 8008e34:	2302      	movs	r3, #2
 8008e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008e3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e40:	d102      	bne.n	8008e48 <f_open+0x2ec>
 8008e42:	2301      	movs	r3, #1
 8008e44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008e48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8008e50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d103      	bne.n	8008e60 <f_open+0x304>
 8008e58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d8e0      	bhi.n	8008e22 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e64:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d127      	bne.n	8008ebe <f_open+0x362>
 8008e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d022      	beq.n	8008ebe <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fe fcd3 	bl	8007828 <clust2sect>
 8008e82:	6478      	str	r0, [r7, #68]	; 0x44
 8008e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d103      	bne.n	8008e92 <f_open+0x336>
						res = FR_INT_ERR;
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008e90:	e015      	b.n	8008ebe <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e94:	0a5a      	lsrs	r2, r3, #9
 8008e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e98:	441a      	add	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	7858      	ldrb	r0, [r3, #1]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6a1a      	ldr	r2, [r3, #32]
 8008eac:	2301      	movs	r3, #1
 8008eae:	f7fe f911 	bl	80070d4 <disk_read>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d002      	beq.n	8008ebe <f_open+0x362>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008ebe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d002      	beq.n	8008ecc <f_open+0x370>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3760      	adds	r7, #96	; 0x60
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08c      	sub	sp, #48	; 0x30
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
 8008ee4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f107 0210 	add.w	r2, r7, #16
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff fdb3 	bl	8008a64 <validate>
 8008efe:	4603      	mov	r3, r0
 8008f00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008f04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d107      	bne.n	8008f1c <f_write+0x44>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	7d5b      	ldrb	r3, [r3, #21]
 8008f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008f14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <f_write+0x4a>
 8008f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f20:	e14b      	b.n	80091ba <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	7d1b      	ldrb	r3, [r3, #20]
 8008f26:	f003 0302 	and.w	r3, r3, #2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <f_write+0x5a>
 8008f2e:	2307      	movs	r3, #7
 8008f30:	e143      	b.n	80091ba <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	699a      	ldr	r2, [r3, #24]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	441a      	add	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	f080 812d 	bcs.w	800919e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	43db      	mvns	r3, r3
 8008f4a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008f4c:	e127      	b.n	800919e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f040 80e3 	bne.w	8009122 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	0a5b      	lsrs	r3, r3, #9
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	8952      	ldrh	r2, [r2, #10]
 8008f66:	3a01      	subs	r2, #1
 8008f68:	4013      	ands	r3, r2
 8008f6a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d143      	bne.n	8008ffa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10c      	bne.n	8008f94 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d11a      	bne.n	8008fbc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe fe64 	bl	8007c58 <create_chain>
 8008f90:	62b8      	str	r0, [r7, #40]	; 0x28
 8008f92:	e013      	b.n	8008fbc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d007      	beq.n	8008fac <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7fe fef0 	bl	8007d88 <clmt_clust>
 8008fa8:	62b8      	str	r0, [r7, #40]	; 0x28
 8008faa:	e007      	b.n	8008fbc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	f7fe fe4f 	bl	8007c58 <create_chain>
 8008fba:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 80f2 	beq.w	80091a8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d104      	bne.n	8008fd4 <f_write+0xfc>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2202      	movs	r2, #2
 8008fce:	755a      	strb	r2, [r3, #21]
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e0f2      	b.n	80091ba <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fda:	d104      	bne.n	8008fe6 <f_write+0x10e>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	755a      	strb	r2, [r3, #21]
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e0e9      	b.n	80091ba <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fea:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d102      	bne.n	8008ffa <f_write+0x122>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ff8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	7d1b      	ldrb	r3, [r3, #20]
 8008ffe:	b25b      	sxtb	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	da18      	bge.n	8009036 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	7858      	ldrb	r0, [r3, #1]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6a1a      	ldr	r2, [r3, #32]
 8009012:	2301      	movs	r3, #1
 8009014:	f7fe f87e 	bl	8007114 <disk_write>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d004      	beq.n	8009028 <f_write+0x150>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2201      	movs	r2, #1
 8009022:	755a      	strb	r2, [r3, #21]
 8009024:	2301      	movs	r3, #1
 8009026:	e0c8      	b.n	80091ba <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	7d1b      	ldrb	r3, [r3, #20]
 800902c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009030:	b2da      	uxtb	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	4619      	mov	r1, r3
 800903e:	4610      	mov	r0, r2
 8009040:	f7fe fbf2 	bl	8007828 <clust2sect>
 8009044:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d104      	bne.n	8009056 <f_write+0x17e>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2202      	movs	r2, #2
 8009050:	755a      	strb	r2, [r3, #21]
 8009052:	2302      	movs	r3, #2
 8009054:	e0b1      	b.n	80091ba <f_write+0x2e2>
			sect += csect;
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	4413      	add	r3, r2
 800905c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	0a5b      	lsrs	r3, r3, #9
 8009062:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d03c      	beq.n	80090e4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800906a:	69ba      	ldr	r2, [r7, #24]
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	4413      	add	r3, r2
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	8952      	ldrh	r2, [r2, #10]
 8009074:	4293      	cmp	r3, r2
 8009076:	d905      	bls.n	8009084 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	895b      	ldrh	r3, [r3, #10]
 800907c:	461a      	mov	r2, r3
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	7858      	ldrb	r0, [r3, #1]
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	69f9      	ldr	r1, [r7, #28]
 800908e:	f7fe f841 	bl	8007114 <disk_write>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d004      	beq.n	80090a2 <f_write+0x1ca>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2201      	movs	r2, #1
 800909c:	755a      	strb	r2, [r3, #21]
 800909e:	2301      	movs	r3, #1
 80090a0:	e08b      	b.n	80091ba <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a1a      	ldr	r2, [r3, #32]
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	6a3a      	ldr	r2, [r7, #32]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d915      	bls.n	80090dc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6a1a      	ldr	r2, [r3, #32]
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	1ad3      	subs	r3, r2, r3
 80090be:	025b      	lsls	r3, r3, #9
 80090c0:	69fa      	ldr	r2, [r7, #28]
 80090c2:	4413      	add	r3, r2
 80090c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090c8:	4619      	mov	r1, r3
 80090ca:	f7fe f8e3 	bl	8007294 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	7d1b      	ldrb	r3, [r3, #20]
 80090d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	025b      	lsls	r3, r3, #9
 80090e0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80090e2:	e03f      	b.n	8009164 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d016      	beq.n	800911c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	699a      	ldr	r2, [r3, #24]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d210      	bcs.n	800911c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	7858      	ldrb	r0, [r3, #1]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009104:	2301      	movs	r3, #1
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	f7fd ffe4 	bl	80070d4 <disk_read>
 800910c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800910e:	2b00      	cmp	r3, #0
 8009110:	d004      	beq.n	800911c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2201      	movs	r2, #1
 8009116:	755a      	strb	r2, [r3, #21]
 8009118:	2301      	movs	r3, #1
 800911a:	e04e      	b.n	80091ba <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800912a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800912e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	429a      	cmp	r2, r3
 8009136:	d901      	bls.n	800913c <f_write+0x264>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800914a:	4413      	add	r3, r2
 800914c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800914e:	69f9      	ldr	r1, [r7, #28]
 8009150:	4618      	mov	r0, r3
 8009152:	f7fe f89f 	bl	8007294 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	7d1b      	ldrb	r3, [r3, #20]
 800915a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800915e:	b2da      	uxtb	r2, r3
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009164:	69fa      	ldr	r2, [r7, #28]
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	4413      	add	r3, r2
 800916a:	61fb      	str	r3, [r7, #28]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	699a      	ldr	r2, [r3, #24]
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	441a      	add	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	619a      	str	r2, [r3, #24]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	68da      	ldr	r2, [r3, #12]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	429a      	cmp	r2, r3
 8009182:	bf38      	it	cc
 8009184:	461a      	movcc	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	60da      	str	r2, [r3, #12]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	441a      	add	r2, r3
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f47f aed4 	bne.w	8008f4e <f_write+0x76>
 80091a6:	e000      	b.n	80091aa <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80091a8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	7d1b      	ldrb	r3, [r3, #20]
 80091ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3730      	adds	r7, #48	; 0x30
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b086      	sub	sp, #24
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f107 0208 	add.w	r2, r7, #8
 80091d0:	4611      	mov	r1, r2
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7ff fc46 	bl	8008a64 <validate>
 80091d8:	4603      	mov	r3, r0
 80091da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d168      	bne.n	80092b4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	7d1b      	ldrb	r3, [r3, #20]
 80091e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d062      	beq.n	80092b4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	7d1b      	ldrb	r3, [r3, #20]
 80091f2:	b25b      	sxtb	r3, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	da15      	bge.n	8009224 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	7858      	ldrb	r0, [r3, #1]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1a      	ldr	r2, [r3, #32]
 8009206:	2301      	movs	r3, #1
 8009208:	f7fd ff84 	bl	8007114 <disk_write>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <f_sync+0x54>
 8009212:	2301      	movs	r3, #1
 8009214:	e04f      	b.n	80092b6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	7d1b      	ldrb	r3, [r3, #20]
 800921a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800921e:	b2da      	uxtb	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009224:	f7fd fd82 	bl	8006d2c <get_fattime>
 8009228:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	4619      	mov	r1, r3
 8009232:	4610      	mov	r0, r2
 8009234:	f7fe fa5c 	bl	80076f0 <move_window>
 8009238:	4603      	mov	r3, r0
 800923a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d138      	bne.n	80092b4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009246:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	330b      	adds	r3, #11
 800924c:	781a      	ldrb	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	330b      	adds	r3, #11
 8009252:	f042 0220 	orr.w	r2, r2, #32
 8009256:	b2d2      	uxtb	r2, r2
 8009258:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6818      	ldr	r0, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	461a      	mov	r2, r3
 8009264:	68f9      	ldr	r1, [r7, #12]
 8009266:	f7fe ff69 	bl	800813c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f103 021c 	add.w	r2, r3, #28
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	4619      	mov	r1, r3
 8009276:	4610      	mov	r0, r2
 8009278:	f7fd ffe0 	bl	800723c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	3316      	adds	r3, #22
 8009280:	6939      	ldr	r1, [r7, #16]
 8009282:	4618      	mov	r0, r3
 8009284:	f7fd ffda 	bl	800723c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	3312      	adds	r3, #18
 800928c:	2100      	movs	r1, #0
 800928e:	4618      	mov	r0, r3
 8009290:	f7fd ffb9 	bl	8007206 <st_word>
					fs->wflag = 1;
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2201      	movs	r2, #1
 8009298:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	4618      	mov	r0, r3
 800929e:	f7fe fa55 	bl	800774c <sync_fs>
 80092a2:	4603      	mov	r3, r0
 80092a4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	7d1b      	ldrb	r3, [r3, #20]
 80092aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80092b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7ff ff7b 	bl	80091c2 <f_sync>
 80092cc:	4603      	mov	r3, r0
 80092ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d118      	bne.n	8009308 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f107 0208 	add.w	r2, r7, #8
 80092dc:	4611      	mov	r1, r2
 80092de:	4618      	mov	r0, r3
 80092e0:	f7ff fbc0 	bl	8008a64 <validate>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10c      	bne.n	8009308 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fe f958 	bl	80075a8 <dec_lock>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d102      	bne.n	8009308 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009308:	7bfb      	ldrb	r3, [r7, #15]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009314:	b480      	push	{r7}
 8009316:	b087      	sub	sp, #28
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	4613      	mov	r3, r2
 8009320:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009322:	2301      	movs	r3, #1
 8009324:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009326:	2300      	movs	r3, #0
 8009328:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800932a:	4b1f      	ldr	r3, [pc, #124]	; (80093a8 <FATFS_LinkDriverEx+0x94>)
 800932c:	7a5b      	ldrb	r3, [r3, #9]
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b00      	cmp	r3, #0
 8009332:	d131      	bne.n	8009398 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009334:	4b1c      	ldr	r3, [pc, #112]	; (80093a8 <FATFS_LinkDriverEx+0x94>)
 8009336:	7a5b      	ldrb	r3, [r3, #9]
 8009338:	b2db      	uxtb	r3, r3
 800933a:	461a      	mov	r2, r3
 800933c:	4b1a      	ldr	r3, [pc, #104]	; (80093a8 <FATFS_LinkDriverEx+0x94>)
 800933e:	2100      	movs	r1, #0
 8009340:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009342:	4b19      	ldr	r3, [pc, #100]	; (80093a8 <FATFS_LinkDriverEx+0x94>)
 8009344:	7a5b      	ldrb	r3, [r3, #9]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	4a17      	ldr	r2, [pc, #92]	; (80093a8 <FATFS_LinkDriverEx+0x94>)
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4413      	add	r3, r2
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009352:	4b15      	ldr	r3, [pc, #84]	; (80093a8 <FATFS_LinkDriverEx+0x94>)
 8009354:	7a5b      	ldrb	r3, [r3, #9]
 8009356:	b2db      	uxtb	r3, r3
 8009358:	461a      	mov	r2, r3
 800935a:	4b13      	ldr	r3, [pc, #76]	; (80093a8 <FATFS_LinkDriverEx+0x94>)
 800935c:	4413      	add	r3, r2
 800935e:	79fa      	ldrb	r2, [r7, #7]
 8009360:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009362:	4b11      	ldr	r3, [pc, #68]	; (80093a8 <FATFS_LinkDriverEx+0x94>)
 8009364:	7a5b      	ldrb	r3, [r3, #9]
 8009366:	b2db      	uxtb	r3, r3
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	b2d1      	uxtb	r1, r2
 800936c:	4a0e      	ldr	r2, [pc, #56]	; (80093a8 <FATFS_LinkDriverEx+0x94>)
 800936e:	7251      	strb	r1, [r2, #9]
 8009370:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009372:	7dbb      	ldrb	r3, [r7, #22]
 8009374:	3330      	adds	r3, #48	; 0x30
 8009376:	b2da      	uxtb	r2, r3
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	3301      	adds	r3, #1
 8009380:	223a      	movs	r2, #58	; 0x3a
 8009382:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	3302      	adds	r3, #2
 8009388:	222f      	movs	r2, #47	; 0x2f
 800938a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	3303      	adds	r3, #3
 8009390:	2200      	movs	r2, #0
 8009392:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009394:	2300      	movs	r3, #0
 8009396:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009398:	7dfb      	ldrb	r3, [r7, #23]
}
 800939a:	4618      	mov	r0, r3
 800939c:	371c      	adds	r7, #28
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	200008e8 	.word	0x200008e8

080093ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80093b6:	2200      	movs	r2, #0
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff ffaa 	bl	8009314 <FATFS_LinkDriverEx>
 80093c0:	4603      	mov	r3, r0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
	...

080093cc <__errno>:
 80093cc:	4b01      	ldr	r3, [pc, #4]	; (80093d4 <__errno+0x8>)
 80093ce:	6818      	ldr	r0, [r3, #0]
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	20000014 	.word	0x20000014

080093d8 <__libc_init_array>:
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	4d0d      	ldr	r5, [pc, #52]	; (8009410 <__libc_init_array+0x38>)
 80093dc:	4c0d      	ldr	r4, [pc, #52]	; (8009414 <__libc_init_array+0x3c>)
 80093de:	1b64      	subs	r4, r4, r5
 80093e0:	10a4      	asrs	r4, r4, #2
 80093e2:	2600      	movs	r6, #0
 80093e4:	42a6      	cmp	r6, r4
 80093e6:	d109      	bne.n	80093fc <__libc_init_array+0x24>
 80093e8:	4d0b      	ldr	r5, [pc, #44]	; (8009418 <__libc_init_array+0x40>)
 80093ea:	4c0c      	ldr	r4, [pc, #48]	; (800941c <__libc_init_array+0x44>)
 80093ec:	f002 ff02 	bl	800c1f4 <_init>
 80093f0:	1b64      	subs	r4, r4, r5
 80093f2:	10a4      	asrs	r4, r4, #2
 80093f4:	2600      	movs	r6, #0
 80093f6:	42a6      	cmp	r6, r4
 80093f8:	d105      	bne.n	8009406 <__libc_init_array+0x2e>
 80093fa:	bd70      	pop	{r4, r5, r6, pc}
 80093fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009400:	4798      	blx	r3
 8009402:	3601      	adds	r6, #1
 8009404:	e7ee      	b.n	80093e4 <__libc_init_array+0xc>
 8009406:	f855 3b04 	ldr.w	r3, [r5], #4
 800940a:	4798      	blx	r3
 800940c:	3601      	adds	r6, #1
 800940e:	e7f2      	b.n	80093f6 <__libc_init_array+0x1e>
 8009410:	0800ce7c 	.word	0x0800ce7c
 8009414:	0800ce7c 	.word	0x0800ce7c
 8009418:	0800ce7c 	.word	0x0800ce7c
 800941c:	0800ce80 	.word	0x0800ce80

08009420 <memcpy>:
 8009420:	440a      	add	r2, r1
 8009422:	4291      	cmp	r1, r2
 8009424:	f100 33ff 	add.w	r3, r0, #4294967295
 8009428:	d100      	bne.n	800942c <memcpy+0xc>
 800942a:	4770      	bx	lr
 800942c:	b510      	push	{r4, lr}
 800942e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009432:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009436:	4291      	cmp	r1, r2
 8009438:	d1f9      	bne.n	800942e <memcpy+0xe>
 800943a:	bd10      	pop	{r4, pc}

0800943c <memset>:
 800943c:	4402      	add	r2, r0
 800943e:	4603      	mov	r3, r0
 8009440:	4293      	cmp	r3, r2
 8009442:	d100      	bne.n	8009446 <memset+0xa>
 8009444:	4770      	bx	lr
 8009446:	f803 1b01 	strb.w	r1, [r3], #1
 800944a:	e7f9      	b.n	8009440 <memset+0x4>

0800944c <__cvt>:
 800944c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009450:	ec55 4b10 	vmov	r4, r5, d0
 8009454:	2d00      	cmp	r5, #0
 8009456:	460e      	mov	r6, r1
 8009458:	4619      	mov	r1, r3
 800945a:	462b      	mov	r3, r5
 800945c:	bfbb      	ittet	lt
 800945e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009462:	461d      	movlt	r5, r3
 8009464:	2300      	movge	r3, #0
 8009466:	232d      	movlt	r3, #45	; 0x2d
 8009468:	700b      	strb	r3, [r1, #0]
 800946a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800946c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009470:	4691      	mov	r9, r2
 8009472:	f023 0820 	bic.w	r8, r3, #32
 8009476:	bfbc      	itt	lt
 8009478:	4622      	movlt	r2, r4
 800947a:	4614      	movlt	r4, r2
 800947c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009480:	d005      	beq.n	800948e <__cvt+0x42>
 8009482:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009486:	d100      	bne.n	800948a <__cvt+0x3e>
 8009488:	3601      	adds	r6, #1
 800948a:	2102      	movs	r1, #2
 800948c:	e000      	b.n	8009490 <__cvt+0x44>
 800948e:	2103      	movs	r1, #3
 8009490:	ab03      	add	r3, sp, #12
 8009492:	9301      	str	r3, [sp, #4]
 8009494:	ab02      	add	r3, sp, #8
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	ec45 4b10 	vmov	d0, r4, r5
 800949c:	4653      	mov	r3, sl
 800949e:	4632      	mov	r2, r6
 80094a0:	f000 fcea 	bl	8009e78 <_dtoa_r>
 80094a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80094a8:	4607      	mov	r7, r0
 80094aa:	d102      	bne.n	80094b2 <__cvt+0x66>
 80094ac:	f019 0f01 	tst.w	r9, #1
 80094b0:	d022      	beq.n	80094f8 <__cvt+0xac>
 80094b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094b6:	eb07 0906 	add.w	r9, r7, r6
 80094ba:	d110      	bne.n	80094de <__cvt+0x92>
 80094bc:	783b      	ldrb	r3, [r7, #0]
 80094be:	2b30      	cmp	r3, #48	; 0x30
 80094c0:	d10a      	bne.n	80094d8 <__cvt+0x8c>
 80094c2:	2200      	movs	r2, #0
 80094c4:	2300      	movs	r3, #0
 80094c6:	4620      	mov	r0, r4
 80094c8:	4629      	mov	r1, r5
 80094ca:	f7f7 fb05 	bl	8000ad8 <__aeabi_dcmpeq>
 80094ce:	b918      	cbnz	r0, 80094d8 <__cvt+0x8c>
 80094d0:	f1c6 0601 	rsb	r6, r6, #1
 80094d4:	f8ca 6000 	str.w	r6, [sl]
 80094d8:	f8da 3000 	ldr.w	r3, [sl]
 80094dc:	4499      	add	r9, r3
 80094de:	2200      	movs	r2, #0
 80094e0:	2300      	movs	r3, #0
 80094e2:	4620      	mov	r0, r4
 80094e4:	4629      	mov	r1, r5
 80094e6:	f7f7 faf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80094ea:	b108      	cbz	r0, 80094f0 <__cvt+0xa4>
 80094ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80094f0:	2230      	movs	r2, #48	; 0x30
 80094f2:	9b03      	ldr	r3, [sp, #12]
 80094f4:	454b      	cmp	r3, r9
 80094f6:	d307      	bcc.n	8009508 <__cvt+0xbc>
 80094f8:	9b03      	ldr	r3, [sp, #12]
 80094fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094fc:	1bdb      	subs	r3, r3, r7
 80094fe:	4638      	mov	r0, r7
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	b004      	add	sp, #16
 8009504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009508:	1c59      	adds	r1, r3, #1
 800950a:	9103      	str	r1, [sp, #12]
 800950c:	701a      	strb	r2, [r3, #0]
 800950e:	e7f0      	b.n	80094f2 <__cvt+0xa6>

08009510 <__exponent>:
 8009510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009512:	4603      	mov	r3, r0
 8009514:	2900      	cmp	r1, #0
 8009516:	bfb8      	it	lt
 8009518:	4249      	neglt	r1, r1
 800951a:	f803 2b02 	strb.w	r2, [r3], #2
 800951e:	bfb4      	ite	lt
 8009520:	222d      	movlt	r2, #45	; 0x2d
 8009522:	222b      	movge	r2, #43	; 0x2b
 8009524:	2909      	cmp	r1, #9
 8009526:	7042      	strb	r2, [r0, #1]
 8009528:	dd2a      	ble.n	8009580 <__exponent+0x70>
 800952a:	f10d 0407 	add.w	r4, sp, #7
 800952e:	46a4      	mov	ip, r4
 8009530:	270a      	movs	r7, #10
 8009532:	46a6      	mov	lr, r4
 8009534:	460a      	mov	r2, r1
 8009536:	fb91 f6f7 	sdiv	r6, r1, r7
 800953a:	fb07 1516 	mls	r5, r7, r6, r1
 800953e:	3530      	adds	r5, #48	; 0x30
 8009540:	2a63      	cmp	r2, #99	; 0x63
 8009542:	f104 34ff 	add.w	r4, r4, #4294967295
 8009546:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800954a:	4631      	mov	r1, r6
 800954c:	dcf1      	bgt.n	8009532 <__exponent+0x22>
 800954e:	3130      	adds	r1, #48	; 0x30
 8009550:	f1ae 0502 	sub.w	r5, lr, #2
 8009554:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009558:	1c44      	adds	r4, r0, #1
 800955a:	4629      	mov	r1, r5
 800955c:	4561      	cmp	r1, ip
 800955e:	d30a      	bcc.n	8009576 <__exponent+0x66>
 8009560:	f10d 0209 	add.w	r2, sp, #9
 8009564:	eba2 020e 	sub.w	r2, r2, lr
 8009568:	4565      	cmp	r5, ip
 800956a:	bf88      	it	hi
 800956c:	2200      	movhi	r2, #0
 800956e:	4413      	add	r3, r2
 8009570:	1a18      	subs	r0, r3, r0
 8009572:	b003      	add	sp, #12
 8009574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800957a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800957e:	e7ed      	b.n	800955c <__exponent+0x4c>
 8009580:	2330      	movs	r3, #48	; 0x30
 8009582:	3130      	adds	r1, #48	; 0x30
 8009584:	7083      	strb	r3, [r0, #2]
 8009586:	70c1      	strb	r1, [r0, #3]
 8009588:	1d03      	adds	r3, r0, #4
 800958a:	e7f1      	b.n	8009570 <__exponent+0x60>

0800958c <_printf_float>:
 800958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009590:	ed2d 8b02 	vpush	{d8}
 8009594:	b08d      	sub	sp, #52	; 0x34
 8009596:	460c      	mov	r4, r1
 8009598:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800959c:	4616      	mov	r6, r2
 800959e:	461f      	mov	r7, r3
 80095a0:	4605      	mov	r5, r0
 80095a2:	f001 fa57 	bl	800aa54 <_localeconv_r>
 80095a6:	f8d0 a000 	ldr.w	sl, [r0]
 80095aa:	4650      	mov	r0, sl
 80095ac:	f7f6 fe18 	bl	80001e0 <strlen>
 80095b0:	2300      	movs	r3, #0
 80095b2:	930a      	str	r3, [sp, #40]	; 0x28
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	9305      	str	r3, [sp, #20]
 80095b8:	f8d8 3000 	ldr.w	r3, [r8]
 80095bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80095c0:	3307      	adds	r3, #7
 80095c2:	f023 0307 	bic.w	r3, r3, #7
 80095c6:	f103 0208 	add.w	r2, r3, #8
 80095ca:	f8c8 2000 	str.w	r2, [r8]
 80095ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80095d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80095da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095de:	9307      	str	r3, [sp, #28]
 80095e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80095e4:	ee08 0a10 	vmov	s16, r0
 80095e8:	4b9f      	ldr	r3, [pc, #636]	; (8009868 <_printf_float+0x2dc>)
 80095ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095ee:	f04f 32ff 	mov.w	r2, #4294967295
 80095f2:	f7f7 faa3 	bl	8000b3c <__aeabi_dcmpun>
 80095f6:	bb88      	cbnz	r0, 800965c <_printf_float+0xd0>
 80095f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095fc:	4b9a      	ldr	r3, [pc, #616]	; (8009868 <_printf_float+0x2dc>)
 80095fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009602:	f7f7 fa7d 	bl	8000b00 <__aeabi_dcmple>
 8009606:	bb48      	cbnz	r0, 800965c <_printf_float+0xd0>
 8009608:	2200      	movs	r2, #0
 800960a:	2300      	movs	r3, #0
 800960c:	4640      	mov	r0, r8
 800960e:	4649      	mov	r1, r9
 8009610:	f7f7 fa6c 	bl	8000aec <__aeabi_dcmplt>
 8009614:	b110      	cbz	r0, 800961c <_printf_float+0x90>
 8009616:	232d      	movs	r3, #45	; 0x2d
 8009618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800961c:	4b93      	ldr	r3, [pc, #588]	; (800986c <_printf_float+0x2e0>)
 800961e:	4894      	ldr	r0, [pc, #592]	; (8009870 <_printf_float+0x2e4>)
 8009620:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009624:	bf94      	ite	ls
 8009626:	4698      	movls	r8, r3
 8009628:	4680      	movhi	r8, r0
 800962a:	2303      	movs	r3, #3
 800962c:	6123      	str	r3, [r4, #16]
 800962e:	9b05      	ldr	r3, [sp, #20]
 8009630:	f023 0204 	bic.w	r2, r3, #4
 8009634:	6022      	str	r2, [r4, #0]
 8009636:	f04f 0900 	mov.w	r9, #0
 800963a:	9700      	str	r7, [sp, #0]
 800963c:	4633      	mov	r3, r6
 800963e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009640:	4621      	mov	r1, r4
 8009642:	4628      	mov	r0, r5
 8009644:	f000 f9d8 	bl	80099f8 <_printf_common>
 8009648:	3001      	adds	r0, #1
 800964a:	f040 8090 	bne.w	800976e <_printf_float+0x1e2>
 800964e:	f04f 30ff 	mov.w	r0, #4294967295
 8009652:	b00d      	add	sp, #52	; 0x34
 8009654:	ecbd 8b02 	vpop	{d8}
 8009658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965c:	4642      	mov	r2, r8
 800965e:	464b      	mov	r3, r9
 8009660:	4640      	mov	r0, r8
 8009662:	4649      	mov	r1, r9
 8009664:	f7f7 fa6a 	bl	8000b3c <__aeabi_dcmpun>
 8009668:	b140      	cbz	r0, 800967c <_printf_float+0xf0>
 800966a:	464b      	mov	r3, r9
 800966c:	2b00      	cmp	r3, #0
 800966e:	bfbc      	itt	lt
 8009670:	232d      	movlt	r3, #45	; 0x2d
 8009672:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009676:	487f      	ldr	r0, [pc, #508]	; (8009874 <_printf_float+0x2e8>)
 8009678:	4b7f      	ldr	r3, [pc, #508]	; (8009878 <_printf_float+0x2ec>)
 800967a:	e7d1      	b.n	8009620 <_printf_float+0x94>
 800967c:	6863      	ldr	r3, [r4, #4]
 800967e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009682:	9206      	str	r2, [sp, #24]
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	d13f      	bne.n	8009708 <_printf_float+0x17c>
 8009688:	2306      	movs	r3, #6
 800968a:	6063      	str	r3, [r4, #4]
 800968c:	9b05      	ldr	r3, [sp, #20]
 800968e:	6861      	ldr	r1, [r4, #4]
 8009690:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009694:	2300      	movs	r3, #0
 8009696:	9303      	str	r3, [sp, #12]
 8009698:	ab0a      	add	r3, sp, #40	; 0x28
 800969a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800969e:	ab09      	add	r3, sp, #36	; 0x24
 80096a0:	ec49 8b10 	vmov	d0, r8, r9
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	6022      	str	r2, [r4, #0]
 80096a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80096ac:	4628      	mov	r0, r5
 80096ae:	f7ff fecd 	bl	800944c <__cvt>
 80096b2:	9b06      	ldr	r3, [sp, #24]
 80096b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096b6:	2b47      	cmp	r3, #71	; 0x47
 80096b8:	4680      	mov	r8, r0
 80096ba:	d108      	bne.n	80096ce <_printf_float+0x142>
 80096bc:	1cc8      	adds	r0, r1, #3
 80096be:	db02      	blt.n	80096c6 <_printf_float+0x13a>
 80096c0:	6863      	ldr	r3, [r4, #4]
 80096c2:	4299      	cmp	r1, r3
 80096c4:	dd41      	ble.n	800974a <_printf_float+0x1be>
 80096c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80096ca:	fa5f fb8b 	uxtb.w	fp, fp
 80096ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096d2:	d820      	bhi.n	8009716 <_printf_float+0x18a>
 80096d4:	3901      	subs	r1, #1
 80096d6:	465a      	mov	r2, fp
 80096d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80096dc:	9109      	str	r1, [sp, #36]	; 0x24
 80096de:	f7ff ff17 	bl	8009510 <__exponent>
 80096e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096e4:	1813      	adds	r3, r2, r0
 80096e6:	2a01      	cmp	r2, #1
 80096e8:	4681      	mov	r9, r0
 80096ea:	6123      	str	r3, [r4, #16]
 80096ec:	dc02      	bgt.n	80096f4 <_printf_float+0x168>
 80096ee:	6822      	ldr	r2, [r4, #0]
 80096f0:	07d2      	lsls	r2, r2, #31
 80096f2:	d501      	bpl.n	80096f8 <_printf_float+0x16c>
 80096f4:	3301      	adds	r3, #1
 80096f6:	6123      	str	r3, [r4, #16]
 80096f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d09c      	beq.n	800963a <_printf_float+0xae>
 8009700:	232d      	movs	r3, #45	; 0x2d
 8009702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009706:	e798      	b.n	800963a <_printf_float+0xae>
 8009708:	9a06      	ldr	r2, [sp, #24]
 800970a:	2a47      	cmp	r2, #71	; 0x47
 800970c:	d1be      	bne.n	800968c <_printf_float+0x100>
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1bc      	bne.n	800968c <_printf_float+0x100>
 8009712:	2301      	movs	r3, #1
 8009714:	e7b9      	b.n	800968a <_printf_float+0xfe>
 8009716:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800971a:	d118      	bne.n	800974e <_printf_float+0x1c2>
 800971c:	2900      	cmp	r1, #0
 800971e:	6863      	ldr	r3, [r4, #4]
 8009720:	dd0b      	ble.n	800973a <_printf_float+0x1ae>
 8009722:	6121      	str	r1, [r4, #16]
 8009724:	b913      	cbnz	r3, 800972c <_printf_float+0x1a0>
 8009726:	6822      	ldr	r2, [r4, #0]
 8009728:	07d0      	lsls	r0, r2, #31
 800972a:	d502      	bpl.n	8009732 <_printf_float+0x1a6>
 800972c:	3301      	adds	r3, #1
 800972e:	440b      	add	r3, r1
 8009730:	6123      	str	r3, [r4, #16]
 8009732:	65a1      	str	r1, [r4, #88]	; 0x58
 8009734:	f04f 0900 	mov.w	r9, #0
 8009738:	e7de      	b.n	80096f8 <_printf_float+0x16c>
 800973a:	b913      	cbnz	r3, 8009742 <_printf_float+0x1b6>
 800973c:	6822      	ldr	r2, [r4, #0]
 800973e:	07d2      	lsls	r2, r2, #31
 8009740:	d501      	bpl.n	8009746 <_printf_float+0x1ba>
 8009742:	3302      	adds	r3, #2
 8009744:	e7f4      	b.n	8009730 <_printf_float+0x1a4>
 8009746:	2301      	movs	r3, #1
 8009748:	e7f2      	b.n	8009730 <_printf_float+0x1a4>
 800974a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800974e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009750:	4299      	cmp	r1, r3
 8009752:	db05      	blt.n	8009760 <_printf_float+0x1d4>
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	6121      	str	r1, [r4, #16]
 8009758:	07d8      	lsls	r0, r3, #31
 800975a:	d5ea      	bpl.n	8009732 <_printf_float+0x1a6>
 800975c:	1c4b      	adds	r3, r1, #1
 800975e:	e7e7      	b.n	8009730 <_printf_float+0x1a4>
 8009760:	2900      	cmp	r1, #0
 8009762:	bfd4      	ite	le
 8009764:	f1c1 0202 	rsble	r2, r1, #2
 8009768:	2201      	movgt	r2, #1
 800976a:	4413      	add	r3, r2
 800976c:	e7e0      	b.n	8009730 <_printf_float+0x1a4>
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	055a      	lsls	r2, r3, #21
 8009772:	d407      	bmi.n	8009784 <_printf_float+0x1f8>
 8009774:	6923      	ldr	r3, [r4, #16]
 8009776:	4642      	mov	r2, r8
 8009778:	4631      	mov	r1, r6
 800977a:	4628      	mov	r0, r5
 800977c:	47b8      	blx	r7
 800977e:	3001      	adds	r0, #1
 8009780:	d12c      	bne.n	80097dc <_printf_float+0x250>
 8009782:	e764      	b.n	800964e <_printf_float+0xc2>
 8009784:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009788:	f240 80e0 	bls.w	800994c <_printf_float+0x3c0>
 800978c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009790:	2200      	movs	r2, #0
 8009792:	2300      	movs	r3, #0
 8009794:	f7f7 f9a0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009798:	2800      	cmp	r0, #0
 800979a:	d034      	beq.n	8009806 <_printf_float+0x27a>
 800979c:	4a37      	ldr	r2, [pc, #220]	; (800987c <_printf_float+0x2f0>)
 800979e:	2301      	movs	r3, #1
 80097a0:	4631      	mov	r1, r6
 80097a2:	4628      	mov	r0, r5
 80097a4:	47b8      	blx	r7
 80097a6:	3001      	adds	r0, #1
 80097a8:	f43f af51 	beq.w	800964e <_printf_float+0xc2>
 80097ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097b0:	429a      	cmp	r2, r3
 80097b2:	db02      	blt.n	80097ba <_printf_float+0x22e>
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	07d8      	lsls	r0, r3, #31
 80097b8:	d510      	bpl.n	80097dc <_printf_float+0x250>
 80097ba:	ee18 3a10 	vmov	r3, s16
 80097be:	4652      	mov	r2, sl
 80097c0:	4631      	mov	r1, r6
 80097c2:	4628      	mov	r0, r5
 80097c4:	47b8      	blx	r7
 80097c6:	3001      	adds	r0, #1
 80097c8:	f43f af41 	beq.w	800964e <_printf_float+0xc2>
 80097cc:	f04f 0800 	mov.w	r8, #0
 80097d0:	f104 091a 	add.w	r9, r4, #26
 80097d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d6:	3b01      	subs	r3, #1
 80097d8:	4543      	cmp	r3, r8
 80097da:	dc09      	bgt.n	80097f0 <_printf_float+0x264>
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	079b      	lsls	r3, r3, #30
 80097e0:	f100 8105 	bmi.w	80099ee <_printf_float+0x462>
 80097e4:	68e0      	ldr	r0, [r4, #12]
 80097e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097e8:	4298      	cmp	r0, r3
 80097ea:	bfb8      	it	lt
 80097ec:	4618      	movlt	r0, r3
 80097ee:	e730      	b.n	8009652 <_printf_float+0xc6>
 80097f0:	2301      	movs	r3, #1
 80097f2:	464a      	mov	r2, r9
 80097f4:	4631      	mov	r1, r6
 80097f6:	4628      	mov	r0, r5
 80097f8:	47b8      	blx	r7
 80097fa:	3001      	adds	r0, #1
 80097fc:	f43f af27 	beq.w	800964e <_printf_float+0xc2>
 8009800:	f108 0801 	add.w	r8, r8, #1
 8009804:	e7e6      	b.n	80097d4 <_printf_float+0x248>
 8009806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009808:	2b00      	cmp	r3, #0
 800980a:	dc39      	bgt.n	8009880 <_printf_float+0x2f4>
 800980c:	4a1b      	ldr	r2, [pc, #108]	; (800987c <_printf_float+0x2f0>)
 800980e:	2301      	movs	r3, #1
 8009810:	4631      	mov	r1, r6
 8009812:	4628      	mov	r0, r5
 8009814:	47b8      	blx	r7
 8009816:	3001      	adds	r0, #1
 8009818:	f43f af19 	beq.w	800964e <_printf_float+0xc2>
 800981c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009820:	4313      	orrs	r3, r2
 8009822:	d102      	bne.n	800982a <_printf_float+0x29e>
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	07d9      	lsls	r1, r3, #31
 8009828:	d5d8      	bpl.n	80097dc <_printf_float+0x250>
 800982a:	ee18 3a10 	vmov	r3, s16
 800982e:	4652      	mov	r2, sl
 8009830:	4631      	mov	r1, r6
 8009832:	4628      	mov	r0, r5
 8009834:	47b8      	blx	r7
 8009836:	3001      	adds	r0, #1
 8009838:	f43f af09 	beq.w	800964e <_printf_float+0xc2>
 800983c:	f04f 0900 	mov.w	r9, #0
 8009840:	f104 0a1a 	add.w	sl, r4, #26
 8009844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009846:	425b      	negs	r3, r3
 8009848:	454b      	cmp	r3, r9
 800984a:	dc01      	bgt.n	8009850 <_printf_float+0x2c4>
 800984c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800984e:	e792      	b.n	8009776 <_printf_float+0x1ea>
 8009850:	2301      	movs	r3, #1
 8009852:	4652      	mov	r2, sl
 8009854:	4631      	mov	r1, r6
 8009856:	4628      	mov	r0, r5
 8009858:	47b8      	blx	r7
 800985a:	3001      	adds	r0, #1
 800985c:	f43f aef7 	beq.w	800964e <_printf_float+0xc2>
 8009860:	f109 0901 	add.w	r9, r9, #1
 8009864:	e7ee      	b.n	8009844 <_printf_float+0x2b8>
 8009866:	bf00      	nop
 8009868:	7fefffff 	.word	0x7fefffff
 800986c:	0800ca9c 	.word	0x0800ca9c
 8009870:	0800caa0 	.word	0x0800caa0
 8009874:	0800caa8 	.word	0x0800caa8
 8009878:	0800caa4 	.word	0x0800caa4
 800987c:	0800caac 	.word	0x0800caac
 8009880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009882:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009884:	429a      	cmp	r2, r3
 8009886:	bfa8      	it	ge
 8009888:	461a      	movge	r2, r3
 800988a:	2a00      	cmp	r2, #0
 800988c:	4691      	mov	r9, r2
 800988e:	dc37      	bgt.n	8009900 <_printf_float+0x374>
 8009890:	f04f 0b00 	mov.w	fp, #0
 8009894:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009898:	f104 021a 	add.w	r2, r4, #26
 800989c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800989e:	9305      	str	r3, [sp, #20]
 80098a0:	eba3 0309 	sub.w	r3, r3, r9
 80098a4:	455b      	cmp	r3, fp
 80098a6:	dc33      	bgt.n	8009910 <_printf_float+0x384>
 80098a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098ac:	429a      	cmp	r2, r3
 80098ae:	db3b      	blt.n	8009928 <_printf_float+0x39c>
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	07da      	lsls	r2, r3, #31
 80098b4:	d438      	bmi.n	8009928 <_printf_float+0x39c>
 80098b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098b8:	9a05      	ldr	r2, [sp, #20]
 80098ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098bc:	1a9a      	subs	r2, r3, r2
 80098be:	eba3 0901 	sub.w	r9, r3, r1
 80098c2:	4591      	cmp	r9, r2
 80098c4:	bfa8      	it	ge
 80098c6:	4691      	movge	r9, r2
 80098c8:	f1b9 0f00 	cmp.w	r9, #0
 80098cc:	dc35      	bgt.n	800993a <_printf_float+0x3ae>
 80098ce:	f04f 0800 	mov.w	r8, #0
 80098d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098d6:	f104 0a1a 	add.w	sl, r4, #26
 80098da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098de:	1a9b      	subs	r3, r3, r2
 80098e0:	eba3 0309 	sub.w	r3, r3, r9
 80098e4:	4543      	cmp	r3, r8
 80098e6:	f77f af79 	ble.w	80097dc <_printf_float+0x250>
 80098ea:	2301      	movs	r3, #1
 80098ec:	4652      	mov	r2, sl
 80098ee:	4631      	mov	r1, r6
 80098f0:	4628      	mov	r0, r5
 80098f2:	47b8      	blx	r7
 80098f4:	3001      	adds	r0, #1
 80098f6:	f43f aeaa 	beq.w	800964e <_printf_float+0xc2>
 80098fa:	f108 0801 	add.w	r8, r8, #1
 80098fe:	e7ec      	b.n	80098da <_printf_float+0x34e>
 8009900:	4613      	mov	r3, r2
 8009902:	4631      	mov	r1, r6
 8009904:	4642      	mov	r2, r8
 8009906:	4628      	mov	r0, r5
 8009908:	47b8      	blx	r7
 800990a:	3001      	adds	r0, #1
 800990c:	d1c0      	bne.n	8009890 <_printf_float+0x304>
 800990e:	e69e      	b.n	800964e <_printf_float+0xc2>
 8009910:	2301      	movs	r3, #1
 8009912:	4631      	mov	r1, r6
 8009914:	4628      	mov	r0, r5
 8009916:	9205      	str	r2, [sp, #20]
 8009918:	47b8      	blx	r7
 800991a:	3001      	adds	r0, #1
 800991c:	f43f ae97 	beq.w	800964e <_printf_float+0xc2>
 8009920:	9a05      	ldr	r2, [sp, #20]
 8009922:	f10b 0b01 	add.w	fp, fp, #1
 8009926:	e7b9      	b.n	800989c <_printf_float+0x310>
 8009928:	ee18 3a10 	vmov	r3, s16
 800992c:	4652      	mov	r2, sl
 800992e:	4631      	mov	r1, r6
 8009930:	4628      	mov	r0, r5
 8009932:	47b8      	blx	r7
 8009934:	3001      	adds	r0, #1
 8009936:	d1be      	bne.n	80098b6 <_printf_float+0x32a>
 8009938:	e689      	b.n	800964e <_printf_float+0xc2>
 800993a:	9a05      	ldr	r2, [sp, #20]
 800993c:	464b      	mov	r3, r9
 800993e:	4442      	add	r2, r8
 8009940:	4631      	mov	r1, r6
 8009942:	4628      	mov	r0, r5
 8009944:	47b8      	blx	r7
 8009946:	3001      	adds	r0, #1
 8009948:	d1c1      	bne.n	80098ce <_printf_float+0x342>
 800994a:	e680      	b.n	800964e <_printf_float+0xc2>
 800994c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800994e:	2a01      	cmp	r2, #1
 8009950:	dc01      	bgt.n	8009956 <_printf_float+0x3ca>
 8009952:	07db      	lsls	r3, r3, #31
 8009954:	d538      	bpl.n	80099c8 <_printf_float+0x43c>
 8009956:	2301      	movs	r3, #1
 8009958:	4642      	mov	r2, r8
 800995a:	4631      	mov	r1, r6
 800995c:	4628      	mov	r0, r5
 800995e:	47b8      	blx	r7
 8009960:	3001      	adds	r0, #1
 8009962:	f43f ae74 	beq.w	800964e <_printf_float+0xc2>
 8009966:	ee18 3a10 	vmov	r3, s16
 800996a:	4652      	mov	r2, sl
 800996c:	4631      	mov	r1, r6
 800996e:	4628      	mov	r0, r5
 8009970:	47b8      	blx	r7
 8009972:	3001      	adds	r0, #1
 8009974:	f43f ae6b 	beq.w	800964e <_printf_float+0xc2>
 8009978:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800997c:	2200      	movs	r2, #0
 800997e:	2300      	movs	r3, #0
 8009980:	f7f7 f8aa 	bl	8000ad8 <__aeabi_dcmpeq>
 8009984:	b9d8      	cbnz	r0, 80099be <_printf_float+0x432>
 8009986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009988:	f108 0201 	add.w	r2, r8, #1
 800998c:	3b01      	subs	r3, #1
 800998e:	4631      	mov	r1, r6
 8009990:	4628      	mov	r0, r5
 8009992:	47b8      	blx	r7
 8009994:	3001      	adds	r0, #1
 8009996:	d10e      	bne.n	80099b6 <_printf_float+0x42a>
 8009998:	e659      	b.n	800964e <_printf_float+0xc2>
 800999a:	2301      	movs	r3, #1
 800999c:	4652      	mov	r2, sl
 800999e:	4631      	mov	r1, r6
 80099a0:	4628      	mov	r0, r5
 80099a2:	47b8      	blx	r7
 80099a4:	3001      	adds	r0, #1
 80099a6:	f43f ae52 	beq.w	800964e <_printf_float+0xc2>
 80099aa:	f108 0801 	add.w	r8, r8, #1
 80099ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b0:	3b01      	subs	r3, #1
 80099b2:	4543      	cmp	r3, r8
 80099b4:	dcf1      	bgt.n	800999a <_printf_float+0x40e>
 80099b6:	464b      	mov	r3, r9
 80099b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80099bc:	e6dc      	b.n	8009778 <_printf_float+0x1ec>
 80099be:	f04f 0800 	mov.w	r8, #0
 80099c2:	f104 0a1a 	add.w	sl, r4, #26
 80099c6:	e7f2      	b.n	80099ae <_printf_float+0x422>
 80099c8:	2301      	movs	r3, #1
 80099ca:	4642      	mov	r2, r8
 80099cc:	e7df      	b.n	800998e <_printf_float+0x402>
 80099ce:	2301      	movs	r3, #1
 80099d0:	464a      	mov	r2, r9
 80099d2:	4631      	mov	r1, r6
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b8      	blx	r7
 80099d8:	3001      	adds	r0, #1
 80099da:	f43f ae38 	beq.w	800964e <_printf_float+0xc2>
 80099de:	f108 0801 	add.w	r8, r8, #1
 80099e2:	68e3      	ldr	r3, [r4, #12]
 80099e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099e6:	1a5b      	subs	r3, r3, r1
 80099e8:	4543      	cmp	r3, r8
 80099ea:	dcf0      	bgt.n	80099ce <_printf_float+0x442>
 80099ec:	e6fa      	b.n	80097e4 <_printf_float+0x258>
 80099ee:	f04f 0800 	mov.w	r8, #0
 80099f2:	f104 0919 	add.w	r9, r4, #25
 80099f6:	e7f4      	b.n	80099e2 <_printf_float+0x456>

080099f8 <_printf_common>:
 80099f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099fc:	4616      	mov	r6, r2
 80099fe:	4699      	mov	r9, r3
 8009a00:	688a      	ldr	r2, [r1, #8]
 8009a02:	690b      	ldr	r3, [r1, #16]
 8009a04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	bfb8      	it	lt
 8009a0c:	4613      	movlt	r3, r2
 8009a0e:	6033      	str	r3, [r6, #0]
 8009a10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a14:	4607      	mov	r7, r0
 8009a16:	460c      	mov	r4, r1
 8009a18:	b10a      	cbz	r2, 8009a1e <_printf_common+0x26>
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	6033      	str	r3, [r6, #0]
 8009a1e:	6823      	ldr	r3, [r4, #0]
 8009a20:	0699      	lsls	r1, r3, #26
 8009a22:	bf42      	ittt	mi
 8009a24:	6833      	ldrmi	r3, [r6, #0]
 8009a26:	3302      	addmi	r3, #2
 8009a28:	6033      	strmi	r3, [r6, #0]
 8009a2a:	6825      	ldr	r5, [r4, #0]
 8009a2c:	f015 0506 	ands.w	r5, r5, #6
 8009a30:	d106      	bne.n	8009a40 <_printf_common+0x48>
 8009a32:	f104 0a19 	add.w	sl, r4, #25
 8009a36:	68e3      	ldr	r3, [r4, #12]
 8009a38:	6832      	ldr	r2, [r6, #0]
 8009a3a:	1a9b      	subs	r3, r3, r2
 8009a3c:	42ab      	cmp	r3, r5
 8009a3e:	dc26      	bgt.n	8009a8e <_printf_common+0x96>
 8009a40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a44:	1e13      	subs	r3, r2, #0
 8009a46:	6822      	ldr	r2, [r4, #0]
 8009a48:	bf18      	it	ne
 8009a4a:	2301      	movne	r3, #1
 8009a4c:	0692      	lsls	r2, r2, #26
 8009a4e:	d42b      	bmi.n	8009aa8 <_printf_common+0xb0>
 8009a50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a54:	4649      	mov	r1, r9
 8009a56:	4638      	mov	r0, r7
 8009a58:	47c0      	blx	r8
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	d01e      	beq.n	8009a9c <_printf_common+0xa4>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	68e5      	ldr	r5, [r4, #12]
 8009a62:	6832      	ldr	r2, [r6, #0]
 8009a64:	f003 0306 	and.w	r3, r3, #6
 8009a68:	2b04      	cmp	r3, #4
 8009a6a:	bf08      	it	eq
 8009a6c:	1aad      	subeq	r5, r5, r2
 8009a6e:	68a3      	ldr	r3, [r4, #8]
 8009a70:	6922      	ldr	r2, [r4, #16]
 8009a72:	bf0c      	ite	eq
 8009a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a78:	2500      	movne	r5, #0
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	bfc4      	itt	gt
 8009a7e:	1a9b      	subgt	r3, r3, r2
 8009a80:	18ed      	addgt	r5, r5, r3
 8009a82:	2600      	movs	r6, #0
 8009a84:	341a      	adds	r4, #26
 8009a86:	42b5      	cmp	r5, r6
 8009a88:	d11a      	bne.n	8009ac0 <_printf_common+0xc8>
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	e008      	b.n	8009aa0 <_printf_common+0xa8>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	4652      	mov	r2, sl
 8009a92:	4649      	mov	r1, r9
 8009a94:	4638      	mov	r0, r7
 8009a96:	47c0      	blx	r8
 8009a98:	3001      	adds	r0, #1
 8009a9a:	d103      	bne.n	8009aa4 <_printf_common+0xac>
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa4:	3501      	adds	r5, #1
 8009aa6:	e7c6      	b.n	8009a36 <_printf_common+0x3e>
 8009aa8:	18e1      	adds	r1, r4, r3
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	2030      	movs	r0, #48	; 0x30
 8009aae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ab2:	4422      	add	r2, r4
 8009ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009abc:	3302      	adds	r3, #2
 8009abe:	e7c7      	b.n	8009a50 <_printf_common+0x58>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	4622      	mov	r2, r4
 8009ac4:	4649      	mov	r1, r9
 8009ac6:	4638      	mov	r0, r7
 8009ac8:	47c0      	blx	r8
 8009aca:	3001      	adds	r0, #1
 8009acc:	d0e6      	beq.n	8009a9c <_printf_common+0xa4>
 8009ace:	3601      	adds	r6, #1
 8009ad0:	e7d9      	b.n	8009a86 <_printf_common+0x8e>
	...

08009ad4 <_printf_i>:
 8009ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad8:	7e0f      	ldrb	r7, [r1, #24]
 8009ada:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009adc:	2f78      	cmp	r7, #120	; 0x78
 8009ade:	4691      	mov	r9, r2
 8009ae0:	4680      	mov	r8, r0
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	469a      	mov	sl, r3
 8009ae6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009aea:	d807      	bhi.n	8009afc <_printf_i+0x28>
 8009aec:	2f62      	cmp	r7, #98	; 0x62
 8009aee:	d80a      	bhi.n	8009b06 <_printf_i+0x32>
 8009af0:	2f00      	cmp	r7, #0
 8009af2:	f000 80d8 	beq.w	8009ca6 <_printf_i+0x1d2>
 8009af6:	2f58      	cmp	r7, #88	; 0x58
 8009af8:	f000 80a3 	beq.w	8009c42 <_printf_i+0x16e>
 8009afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b04:	e03a      	b.n	8009b7c <_printf_i+0xa8>
 8009b06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b0a:	2b15      	cmp	r3, #21
 8009b0c:	d8f6      	bhi.n	8009afc <_printf_i+0x28>
 8009b0e:	a101      	add	r1, pc, #4	; (adr r1, 8009b14 <_printf_i+0x40>)
 8009b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b14:	08009b6d 	.word	0x08009b6d
 8009b18:	08009b81 	.word	0x08009b81
 8009b1c:	08009afd 	.word	0x08009afd
 8009b20:	08009afd 	.word	0x08009afd
 8009b24:	08009afd 	.word	0x08009afd
 8009b28:	08009afd 	.word	0x08009afd
 8009b2c:	08009b81 	.word	0x08009b81
 8009b30:	08009afd 	.word	0x08009afd
 8009b34:	08009afd 	.word	0x08009afd
 8009b38:	08009afd 	.word	0x08009afd
 8009b3c:	08009afd 	.word	0x08009afd
 8009b40:	08009c8d 	.word	0x08009c8d
 8009b44:	08009bb1 	.word	0x08009bb1
 8009b48:	08009c6f 	.word	0x08009c6f
 8009b4c:	08009afd 	.word	0x08009afd
 8009b50:	08009afd 	.word	0x08009afd
 8009b54:	08009caf 	.word	0x08009caf
 8009b58:	08009afd 	.word	0x08009afd
 8009b5c:	08009bb1 	.word	0x08009bb1
 8009b60:	08009afd 	.word	0x08009afd
 8009b64:	08009afd 	.word	0x08009afd
 8009b68:	08009c77 	.word	0x08009c77
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	1d1a      	adds	r2, r3, #4
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	602a      	str	r2, [r5, #0]
 8009b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e0a3      	b.n	8009cc8 <_printf_i+0x1f4>
 8009b80:	6820      	ldr	r0, [r4, #0]
 8009b82:	6829      	ldr	r1, [r5, #0]
 8009b84:	0606      	lsls	r6, r0, #24
 8009b86:	f101 0304 	add.w	r3, r1, #4
 8009b8a:	d50a      	bpl.n	8009ba2 <_printf_i+0xce>
 8009b8c:	680e      	ldr	r6, [r1, #0]
 8009b8e:	602b      	str	r3, [r5, #0]
 8009b90:	2e00      	cmp	r6, #0
 8009b92:	da03      	bge.n	8009b9c <_printf_i+0xc8>
 8009b94:	232d      	movs	r3, #45	; 0x2d
 8009b96:	4276      	negs	r6, r6
 8009b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b9c:	485e      	ldr	r0, [pc, #376]	; (8009d18 <_printf_i+0x244>)
 8009b9e:	230a      	movs	r3, #10
 8009ba0:	e019      	b.n	8009bd6 <_printf_i+0x102>
 8009ba2:	680e      	ldr	r6, [r1, #0]
 8009ba4:	602b      	str	r3, [r5, #0]
 8009ba6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009baa:	bf18      	it	ne
 8009bac:	b236      	sxthne	r6, r6
 8009bae:	e7ef      	b.n	8009b90 <_printf_i+0xbc>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	6820      	ldr	r0, [r4, #0]
 8009bb4:	1d19      	adds	r1, r3, #4
 8009bb6:	6029      	str	r1, [r5, #0]
 8009bb8:	0601      	lsls	r1, r0, #24
 8009bba:	d501      	bpl.n	8009bc0 <_printf_i+0xec>
 8009bbc:	681e      	ldr	r6, [r3, #0]
 8009bbe:	e002      	b.n	8009bc6 <_printf_i+0xf2>
 8009bc0:	0646      	lsls	r6, r0, #25
 8009bc2:	d5fb      	bpl.n	8009bbc <_printf_i+0xe8>
 8009bc4:	881e      	ldrh	r6, [r3, #0]
 8009bc6:	4854      	ldr	r0, [pc, #336]	; (8009d18 <_printf_i+0x244>)
 8009bc8:	2f6f      	cmp	r7, #111	; 0x6f
 8009bca:	bf0c      	ite	eq
 8009bcc:	2308      	moveq	r3, #8
 8009bce:	230a      	movne	r3, #10
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bd6:	6865      	ldr	r5, [r4, #4]
 8009bd8:	60a5      	str	r5, [r4, #8]
 8009bda:	2d00      	cmp	r5, #0
 8009bdc:	bfa2      	ittt	ge
 8009bde:	6821      	ldrge	r1, [r4, #0]
 8009be0:	f021 0104 	bicge.w	r1, r1, #4
 8009be4:	6021      	strge	r1, [r4, #0]
 8009be6:	b90e      	cbnz	r6, 8009bec <_printf_i+0x118>
 8009be8:	2d00      	cmp	r5, #0
 8009bea:	d04d      	beq.n	8009c88 <_printf_i+0x1b4>
 8009bec:	4615      	mov	r5, r2
 8009bee:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bf2:	fb03 6711 	mls	r7, r3, r1, r6
 8009bf6:	5dc7      	ldrb	r7, [r0, r7]
 8009bf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bfc:	4637      	mov	r7, r6
 8009bfe:	42bb      	cmp	r3, r7
 8009c00:	460e      	mov	r6, r1
 8009c02:	d9f4      	bls.n	8009bee <_printf_i+0x11a>
 8009c04:	2b08      	cmp	r3, #8
 8009c06:	d10b      	bne.n	8009c20 <_printf_i+0x14c>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	07de      	lsls	r6, r3, #31
 8009c0c:	d508      	bpl.n	8009c20 <_printf_i+0x14c>
 8009c0e:	6923      	ldr	r3, [r4, #16]
 8009c10:	6861      	ldr	r1, [r4, #4]
 8009c12:	4299      	cmp	r1, r3
 8009c14:	bfde      	ittt	le
 8009c16:	2330      	movle	r3, #48	; 0x30
 8009c18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c20:	1b52      	subs	r2, r2, r5
 8009c22:	6122      	str	r2, [r4, #16]
 8009c24:	f8cd a000 	str.w	sl, [sp]
 8009c28:	464b      	mov	r3, r9
 8009c2a:	aa03      	add	r2, sp, #12
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	4640      	mov	r0, r8
 8009c30:	f7ff fee2 	bl	80099f8 <_printf_common>
 8009c34:	3001      	adds	r0, #1
 8009c36:	d14c      	bne.n	8009cd2 <_printf_i+0x1fe>
 8009c38:	f04f 30ff 	mov.w	r0, #4294967295
 8009c3c:	b004      	add	sp, #16
 8009c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c42:	4835      	ldr	r0, [pc, #212]	; (8009d18 <_printf_i+0x244>)
 8009c44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c48:	6829      	ldr	r1, [r5, #0]
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c50:	6029      	str	r1, [r5, #0]
 8009c52:	061d      	lsls	r5, r3, #24
 8009c54:	d514      	bpl.n	8009c80 <_printf_i+0x1ac>
 8009c56:	07df      	lsls	r7, r3, #31
 8009c58:	bf44      	itt	mi
 8009c5a:	f043 0320 	orrmi.w	r3, r3, #32
 8009c5e:	6023      	strmi	r3, [r4, #0]
 8009c60:	b91e      	cbnz	r6, 8009c6a <_printf_i+0x196>
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	f023 0320 	bic.w	r3, r3, #32
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	2310      	movs	r3, #16
 8009c6c:	e7b0      	b.n	8009bd0 <_printf_i+0xfc>
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	f043 0320 	orr.w	r3, r3, #32
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	2378      	movs	r3, #120	; 0x78
 8009c78:	4828      	ldr	r0, [pc, #160]	; (8009d1c <_printf_i+0x248>)
 8009c7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c7e:	e7e3      	b.n	8009c48 <_printf_i+0x174>
 8009c80:	0659      	lsls	r1, r3, #25
 8009c82:	bf48      	it	mi
 8009c84:	b2b6      	uxthmi	r6, r6
 8009c86:	e7e6      	b.n	8009c56 <_printf_i+0x182>
 8009c88:	4615      	mov	r5, r2
 8009c8a:	e7bb      	b.n	8009c04 <_printf_i+0x130>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	6826      	ldr	r6, [r4, #0]
 8009c90:	6961      	ldr	r1, [r4, #20]
 8009c92:	1d18      	adds	r0, r3, #4
 8009c94:	6028      	str	r0, [r5, #0]
 8009c96:	0635      	lsls	r5, r6, #24
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	d501      	bpl.n	8009ca0 <_printf_i+0x1cc>
 8009c9c:	6019      	str	r1, [r3, #0]
 8009c9e:	e002      	b.n	8009ca6 <_printf_i+0x1d2>
 8009ca0:	0670      	lsls	r0, r6, #25
 8009ca2:	d5fb      	bpl.n	8009c9c <_printf_i+0x1c8>
 8009ca4:	8019      	strh	r1, [r3, #0]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	6123      	str	r3, [r4, #16]
 8009caa:	4615      	mov	r5, r2
 8009cac:	e7ba      	b.n	8009c24 <_printf_i+0x150>
 8009cae:	682b      	ldr	r3, [r5, #0]
 8009cb0:	1d1a      	adds	r2, r3, #4
 8009cb2:	602a      	str	r2, [r5, #0]
 8009cb4:	681d      	ldr	r5, [r3, #0]
 8009cb6:	6862      	ldr	r2, [r4, #4]
 8009cb8:	2100      	movs	r1, #0
 8009cba:	4628      	mov	r0, r5
 8009cbc:	f7f6 fa98 	bl	80001f0 <memchr>
 8009cc0:	b108      	cbz	r0, 8009cc6 <_printf_i+0x1f2>
 8009cc2:	1b40      	subs	r0, r0, r5
 8009cc4:	6060      	str	r0, [r4, #4]
 8009cc6:	6863      	ldr	r3, [r4, #4]
 8009cc8:	6123      	str	r3, [r4, #16]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cd0:	e7a8      	b.n	8009c24 <_printf_i+0x150>
 8009cd2:	6923      	ldr	r3, [r4, #16]
 8009cd4:	462a      	mov	r2, r5
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	4640      	mov	r0, r8
 8009cda:	47d0      	blx	sl
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d0ab      	beq.n	8009c38 <_printf_i+0x164>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	079b      	lsls	r3, r3, #30
 8009ce4:	d413      	bmi.n	8009d0e <_printf_i+0x23a>
 8009ce6:	68e0      	ldr	r0, [r4, #12]
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	4298      	cmp	r0, r3
 8009cec:	bfb8      	it	lt
 8009cee:	4618      	movlt	r0, r3
 8009cf0:	e7a4      	b.n	8009c3c <_printf_i+0x168>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	4632      	mov	r2, r6
 8009cf6:	4649      	mov	r1, r9
 8009cf8:	4640      	mov	r0, r8
 8009cfa:	47d0      	blx	sl
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	d09b      	beq.n	8009c38 <_printf_i+0x164>
 8009d00:	3501      	adds	r5, #1
 8009d02:	68e3      	ldr	r3, [r4, #12]
 8009d04:	9903      	ldr	r1, [sp, #12]
 8009d06:	1a5b      	subs	r3, r3, r1
 8009d08:	42ab      	cmp	r3, r5
 8009d0a:	dcf2      	bgt.n	8009cf2 <_printf_i+0x21e>
 8009d0c:	e7eb      	b.n	8009ce6 <_printf_i+0x212>
 8009d0e:	2500      	movs	r5, #0
 8009d10:	f104 0619 	add.w	r6, r4, #25
 8009d14:	e7f5      	b.n	8009d02 <_printf_i+0x22e>
 8009d16:	bf00      	nop
 8009d18:	0800caae 	.word	0x0800caae
 8009d1c:	0800cabf 	.word	0x0800cabf

08009d20 <siprintf>:
 8009d20:	b40e      	push	{r1, r2, r3}
 8009d22:	b500      	push	{lr}
 8009d24:	b09c      	sub	sp, #112	; 0x70
 8009d26:	ab1d      	add	r3, sp, #116	; 0x74
 8009d28:	9002      	str	r0, [sp, #8]
 8009d2a:	9006      	str	r0, [sp, #24]
 8009d2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d30:	4809      	ldr	r0, [pc, #36]	; (8009d58 <siprintf+0x38>)
 8009d32:	9107      	str	r1, [sp, #28]
 8009d34:	9104      	str	r1, [sp, #16]
 8009d36:	4909      	ldr	r1, [pc, #36]	; (8009d5c <siprintf+0x3c>)
 8009d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d3c:	9105      	str	r1, [sp, #20]
 8009d3e:	6800      	ldr	r0, [r0, #0]
 8009d40:	9301      	str	r3, [sp, #4]
 8009d42:	a902      	add	r1, sp, #8
 8009d44:	f001 fb68 	bl	800b418 <_svfiprintf_r>
 8009d48:	9b02      	ldr	r3, [sp, #8]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	701a      	strb	r2, [r3, #0]
 8009d4e:	b01c      	add	sp, #112	; 0x70
 8009d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d54:	b003      	add	sp, #12
 8009d56:	4770      	bx	lr
 8009d58:	20000014 	.word	0x20000014
 8009d5c:	ffff0208 	.word	0xffff0208

08009d60 <quorem>:
 8009d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d64:	6903      	ldr	r3, [r0, #16]
 8009d66:	690c      	ldr	r4, [r1, #16]
 8009d68:	42a3      	cmp	r3, r4
 8009d6a:	4607      	mov	r7, r0
 8009d6c:	f2c0 8081 	blt.w	8009e72 <quorem+0x112>
 8009d70:	3c01      	subs	r4, #1
 8009d72:	f101 0814 	add.w	r8, r1, #20
 8009d76:	f100 0514 	add.w	r5, r0, #20
 8009d7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d94:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d98:	d331      	bcc.n	8009dfe <quorem+0x9e>
 8009d9a:	f04f 0e00 	mov.w	lr, #0
 8009d9e:	4640      	mov	r0, r8
 8009da0:	46ac      	mov	ip, r5
 8009da2:	46f2      	mov	sl, lr
 8009da4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009da8:	b293      	uxth	r3, r2
 8009daa:	fb06 e303 	mla	r3, r6, r3, lr
 8009dae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	ebaa 0303 	sub.w	r3, sl, r3
 8009db8:	f8dc a000 	ldr.w	sl, [ip]
 8009dbc:	0c12      	lsrs	r2, r2, #16
 8009dbe:	fa13 f38a 	uxtah	r3, r3, sl
 8009dc2:	fb06 e202 	mla	r2, r6, r2, lr
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	9b00      	ldr	r3, [sp, #0]
 8009dca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dce:	b292      	uxth	r2, r2
 8009dd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009dd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dd8:	f8bd 3000 	ldrh.w	r3, [sp]
 8009ddc:	4581      	cmp	r9, r0
 8009dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009de2:	f84c 3b04 	str.w	r3, [ip], #4
 8009de6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009dea:	d2db      	bcs.n	8009da4 <quorem+0x44>
 8009dec:	f855 300b 	ldr.w	r3, [r5, fp]
 8009df0:	b92b      	cbnz	r3, 8009dfe <quorem+0x9e>
 8009df2:	9b01      	ldr	r3, [sp, #4]
 8009df4:	3b04      	subs	r3, #4
 8009df6:	429d      	cmp	r5, r3
 8009df8:	461a      	mov	r2, r3
 8009dfa:	d32e      	bcc.n	8009e5a <quorem+0xfa>
 8009dfc:	613c      	str	r4, [r7, #16]
 8009dfe:	4638      	mov	r0, r7
 8009e00:	f001 f8b6 	bl	800af70 <__mcmp>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	db24      	blt.n	8009e52 <quorem+0xf2>
 8009e08:	3601      	adds	r6, #1
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	f04f 0c00 	mov.w	ip, #0
 8009e10:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e14:	f8d0 e000 	ldr.w	lr, [r0]
 8009e18:	b293      	uxth	r3, r2
 8009e1a:	ebac 0303 	sub.w	r3, ip, r3
 8009e1e:	0c12      	lsrs	r2, r2, #16
 8009e20:	fa13 f38e 	uxtah	r3, r3, lr
 8009e24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e32:	45c1      	cmp	r9, r8
 8009e34:	f840 3b04 	str.w	r3, [r0], #4
 8009e38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e3c:	d2e8      	bcs.n	8009e10 <quorem+0xb0>
 8009e3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e46:	b922      	cbnz	r2, 8009e52 <quorem+0xf2>
 8009e48:	3b04      	subs	r3, #4
 8009e4a:	429d      	cmp	r5, r3
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	d30a      	bcc.n	8009e66 <quorem+0x106>
 8009e50:	613c      	str	r4, [r7, #16]
 8009e52:	4630      	mov	r0, r6
 8009e54:	b003      	add	sp, #12
 8009e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5a:	6812      	ldr	r2, [r2, #0]
 8009e5c:	3b04      	subs	r3, #4
 8009e5e:	2a00      	cmp	r2, #0
 8009e60:	d1cc      	bne.n	8009dfc <quorem+0x9c>
 8009e62:	3c01      	subs	r4, #1
 8009e64:	e7c7      	b.n	8009df6 <quorem+0x96>
 8009e66:	6812      	ldr	r2, [r2, #0]
 8009e68:	3b04      	subs	r3, #4
 8009e6a:	2a00      	cmp	r2, #0
 8009e6c:	d1f0      	bne.n	8009e50 <quorem+0xf0>
 8009e6e:	3c01      	subs	r4, #1
 8009e70:	e7eb      	b.n	8009e4a <quorem+0xea>
 8009e72:	2000      	movs	r0, #0
 8009e74:	e7ee      	b.n	8009e54 <quorem+0xf4>
	...

08009e78 <_dtoa_r>:
 8009e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	ed2d 8b04 	vpush	{d8-d9}
 8009e80:	ec57 6b10 	vmov	r6, r7, d0
 8009e84:	b093      	sub	sp, #76	; 0x4c
 8009e86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e8c:	9106      	str	r1, [sp, #24]
 8009e8e:	ee10 aa10 	vmov	sl, s0
 8009e92:	4604      	mov	r4, r0
 8009e94:	9209      	str	r2, [sp, #36]	; 0x24
 8009e96:	930c      	str	r3, [sp, #48]	; 0x30
 8009e98:	46bb      	mov	fp, r7
 8009e9a:	b975      	cbnz	r5, 8009eba <_dtoa_r+0x42>
 8009e9c:	2010      	movs	r0, #16
 8009e9e:	f000 fddd 	bl	800aa5c <malloc>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	6260      	str	r0, [r4, #36]	; 0x24
 8009ea6:	b920      	cbnz	r0, 8009eb2 <_dtoa_r+0x3a>
 8009ea8:	4ba7      	ldr	r3, [pc, #668]	; (800a148 <_dtoa_r+0x2d0>)
 8009eaa:	21ea      	movs	r1, #234	; 0xea
 8009eac:	48a7      	ldr	r0, [pc, #668]	; (800a14c <_dtoa_r+0x2d4>)
 8009eae:	f001 fbc3 	bl	800b638 <__assert_func>
 8009eb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009eb6:	6005      	str	r5, [r0, #0]
 8009eb8:	60c5      	str	r5, [r0, #12]
 8009eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ebc:	6819      	ldr	r1, [r3, #0]
 8009ebe:	b151      	cbz	r1, 8009ed6 <_dtoa_r+0x5e>
 8009ec0:	685a      	ldr	r2, [r3, #4]
 8009ec2:	604a      	str	r2, [r1, #4]
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	4093      	lsls	r3, r2
 8009ec8:	608b      	str	r3, [r1, #8]
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f000 fe0e 	bl	800aaec <_Bfree>
 8009ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	1e3b      	subs	r3, r7, #0
 8009ed8:	bfaa      	itet	ge
 8009eda:	2300      	movge	r3, #0
 8009edc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009ee0:	f8c8 3000 	strge.w	r3, [r8]
 8009ee4:	4b9a      	ldr	r3, [pc, #616]	; (800a150 <_dtoa_r+0x2d8>)
 8009ee6:	bfbc      	itt	lt
 8009ee8:	2201      	movlt	r2, #1
 8009eea:	f8c8 2000 	strlt.w	r2, [r8]
 8009eee:	ea33 030b 	bics.w	r3, r3, fp
 8009ef2:	d11b      	bne.n	8009f2c <_dtoa_r+0xb4>
 8009ef4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ef6:	f242 730f 	movw	r3, #9999	; 0x270f
 8009efa:	6013      	str	r3, [r2, #0]
 8009efc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f00:	4333      	orrs	r3, r6
 8009f02:	f000 8592 	beq.w	800aa2a <_dtoa_r+0xbb2>
 8009f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f08:	b963      	cbnz	r3, 8009f24 <_dtoa_r+0xac>
 8009f0a:	4b92      	ldr	r3, [pc, #584]	; (800a154 <_dtoa_r+0x2dc>)
 8009f0c:	e022      	b.n	8009f54 <_dtoa_r+0xdc>
 8009f0e:	4b92      	ldr	r3, [pc, #584]	; (800a158 <_dtoa_r+0x2e0>)
 8009f10:	9301      	str	r3, [sp, #4]
 8009f12:	3308      	adds	r3, #8
 8009f14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	9801      	ldr	r0, [sp, #4]
 8009f1a:	b013      	add	sp, #76	; 0x4c
 8009f1c:	ecbd 8b04 	vpop	{d8-d9}
 8009f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f24:	4b8b      	ldr	r3, [pc, #556]	; (800a154 <_dtoa_r+0x2dc>)
 8009f26:	9301      	str	r3, [sp, #4]
 8009f28:	3303      	adds	r3, #3
 8009f2a:	e7f3      	b.n	8009f14 <_dtoa_r+0x9c>
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	2300      	movs	r3, #0
 8009f30:	4650      	mov	r0, sl
 8009f32:	4659      	mov	r1, fp
 8009f34:	f7f6 fdd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f38:	ec4b ab19 	vmov	d9, sl, fp
 8009f3c:	4680      	mov	r8, r0
 8009f3e:	b158      	cbz	r0, 8009f58 <_dtoa_r+0xe0>
 8009f40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f42:	2301      	movs	r3, #1
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 856b 	beq.w	800aa24 <_dtoa_r+0xbac>
 8009f4e:	4883      	ldr	r0, [pc, #524]	; (800a15c <_dtoa_r+0x2e4>)
 8009f50:	6018      	str	r0, [r3, #0]
 8009f52:	1e43      	subs	r3, r0, #1
 8009f54:	9301      	str	r3, [sp, #4]
 8009f56:	e7df      	b.n	8009f18 <_dtoa_r+0xa0>
 8009f58:	ec4b ab10 	vmov	d0, sl, fp
 8009f5c:	aa10      	add	r2, sp, #64	; 0x40
 8009f5e:	a911      	add	r1, sp, #68	; 0x44
 8009f60:	4620      	mov	r0, r4
 8009f62:	f001 f8ab 	bl	800b0bc <__d2b>
 8009f66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009f6a:	ee08 0a10 	vmov	s16, r0
 8009f6e:	2d00      	cmp	r5, #0
 8009f70:	f000 8084 	beq.w	800a07c <_dtoa_r+0x204>
 8009f74:	ee19 3a90 	vmov	r3, s19
 8009f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009f80:	4656      	mov	r6, sl
 8009f82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009f86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009f8e:	4b74      	ldr	r3, [pc, #464]	; (800a160 <_dtoa_r+0x2e8>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	4630      	mov	r0, r6
 8009f94:	4639      	mov	r1, r7
 8009f96:	f7f6 f97f 	bl	8000298 <__aeabi_dsub>
 8009f9a:	a365      	add	r3, pc, #404	; (adr r3, 800a130 <_dtoa_r+0x2b8>)
 8009f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa0:	f7f6 fb32 	bl	8000608 <__aeabi_dmul>
 8009fa4:	a364      	add	r3, pc, #400	; (adr r3, 800a138 <_dtoa_r+0x2c0>)
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	f7f6 f977 	bl	800029c <__adddf3>
 8009fae:	4606      	mov	r6, r0
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	460f      	mov	r7, r1
 8009fb4:	f7f6 fabe 	bl	8000534 <__aeabi_i2d>
 8009fb8:	a361      	add	r3, pc, #388	; (adr r3, 800a140 <_dtoa_r+0x2c8>)
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	f7f6 fb23 	bl	8000608 <__aeabi_dmul>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	4639      	mov	r1, r7
 8009fca:	f7f6 f967 	bl	800029c <__adddf3>
 8009fce:	4606      	mov	r6, r0
 8009fd0:	460f      	mov	r7, r1
 8009fd2:	f7f6 fdc9 	bl	8000b68 <__aeabi_d2iz>
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	9000      	str	r0, [sp, #0]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	4630      	mov	r0, r6
 8009fde:	4639      	mov	r1, r7
 8009fe0:	f7f6 fd84 	bl	8000aec <__aeabi_dcmplt>
 8009fe4:	b150      	cbz	r0, 8009ffc <_dtoa_r+0x184>
 8009fe6:	9800      	ldr	r0, [sp, #0]
 8009fe8:	f7f6 faa4 	bl	8000534 <__aeabi_i2d>
 8009fec:	4632      	mov	r2, r6
 8009fee:	463b      	mov	r3, r7
 8009ff0:	f7f6 fd72 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ff4:	b910      	cbnz	r0, 8009ffc <_dtoa_r+0x184>
 8009ff6:	9b00      	ldr	r3, [sp, #0]
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	9b00      	ldr	r3, [sp, #0]
 8009ffe:	2b16      	cmp	r3, #22
 800a000:	d85a      	bhi.n	800a0b8 <_dtoa_r+0x240>
 800a002:	9a00      	ldr	r2, [sp, #0]
 800a004:	4b57      	ldr	r3, [pc, #348]	; (800a164 <_dtoa_r+0x2ec>)
 800a006:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	ec51 0b19 	vmov	r0, r1, d9
 800a012:	f7f6 fd6b 	bl	8000aec <__aeabi_dcmplt>
 800a016:	2800      	cmp	r0, #0
 800a018:	d050      	beq.n	800a0bc <_dtoa_r+0x244>
 800a01a:	9b00      	ldr	r3, [sp, #0]
 800a01c:	3b01      	subs	r3, #1
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	2300      	movs	r3, #0
 800a022:	930b      	str	r3, [sp, #44]	; 0x2c
 800a024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a026:	1b5d      	subs	r5, r3, r5
 800a028:	1e6b      	subs	r3, r5, #1
 800a02a:	9305      	str	r3, [sp, #20]
 800a02c:	bf45      	ittet	mi
 800a02e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a032:	9304      	strmi	r3, [sp, #16]
 800a034:	2300      	movpl	r3, #0
 800a036:	2300      	movmi	r3, #0
 800a038:	bf4c      	ite	mi
 800a03a:	9305      	strmi	r3, [sp, #20]
 800a03c:	9304      	strpl	r3, [sp, #16]
 800a03e:	9b00      	ldr	r3, [sp, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	db3d      	blt.n	800a0c0 <_dtoa_r+0x248>
 800a044:	9b05      	ldr	r3, [sp, #20]
 800a046:	9a00      	ldr	r2, [sp, #0]
 800a048:	920a      	str	r2, [sp, #40]	; 0x28
 800a04a:	4413      	add	r3, r2
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	2300      	movs	r3, #0
 800a050:	9307      	str	r3, [sp, #28]
 800a052:	9b06      	ldr	r3, [sp, #24]
 800a054:	2b09      	cmp	r3, #9
 800a056:	f200 8089 	bhi.w	800a16c <_dtoa_r+0x2f4>
 800a05a:	2b05      	cmp	r3, #5
 800a05c:	bfc4      	itt	gt
 800a05e:	3b04      	subgt	r3, #4
 800a060:	9306      	strgt	r3, [sp, #24]
 800a062:	9b06      	ldr	r3, [sp, #24]
 800a064:	f1a3 0302 	sub.w	r3, r3, #2
 800a068:	bfcc      	ite	gt
 800a06a:	2500      	movgt	r5, #0
 800a06c:	2501      	movle	r5, #1
 800a06e:	2b03      	cmp	r3, #3
 800a070:	f200 8087 	bhi.w	800a182 <_dtoa_r+0x30a>
 800a074:	e8df f003 	tbb	[pc, r3]
 800a078:	59383a2d 	.word	0x59383a2d
 800a07c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a080:	441d      	add	r5, r3
 800a082:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a086:	2b20      	cmp	r3, #32
 800a088:	bfc1      	itttt	gt
 800a08a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a08e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a092:	fa0b f303 	lslgt.w	r3, fp, r3
 800a096:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a09a:	bfda      	itte	le
 800a09c:	f1c3 0320 	rsble	r3, r3, #32
 800a0a0:	fa06 f003 	lslle.w	r0, r6, r3
 800a0a4:	4318      	orrgt	r0, r3
 800a0a6:	f7f6 fa35 	bl	8000514 <__aeabi_ui2d>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a0b2:	3d01      	subs	r5, #1
 800a0b4:	930e      	str	r3, [sp, #56]	; 0x38
 800a0b6:	e76a      	b.n	8009f8e <_dtoa_r+0x116>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e7b2      	b.n	800a022 <_dtoa_r+0x1aa>
 800a0bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a0be:	e7b1      	b.n	800a024 <_dtoa_r+0x1ac>
 800a0c0:	9b04      	ldr	r3, [sp, #16]
 800a0c2:	9a00      	ldr	r2, [sp, #0]
 800a0c4:	1a9b      	subs	r3, r3, r2
 800a0c6:	9304      	str	r3, [sp, #16]
 800a0c8:	4253      	negs	r3, r2
 800a0ca:	9307      	str	r3, [sp, #28]
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d0:	e7bf      	b.n	800a052 <_dtoa_r+0x1da>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	9308      	str	r3, [sp, #32]
 800a0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	dc55      	bgt.n	800a188 <_dtoa_r+0x310>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a0e6:	e00c      	b.n	800a102 <_dtoa_r+0x28a>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e7f3      	b.n	800a0d4 <_dtoa_r+0x25c>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0f0:	9308      	str	r3, [sp, #32]
 800a0f2:	9b00      	ldr	r3, [sp, #0]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	9302      	str	r3, [sp, #8]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	9303      	str	r3, [sp, #12]
 800a0fe:	bfb8      	it	lt
 800a100:	2301      	movlt	r3, #1
 800a102:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a104:	2200      	movs	r2, #0
 800a106:	6042      	str	r2, [r0, #4]
 800a108:	2204      	movs	r2, #4
 800a10a:	f102 0614 	add.w	r6, r2, #20
 800a10e:	429e      	cmp	r6, r3
 800a110:	6841      	ldr	r1, [r0, #4]
 800a112:	d93d      	bls.n	800a190 <_dtoa_r+0x318>
 800a114:	4620      	mov	r0, r4
 800a116:	f000 fca9 	bl	800aa6c <_Balloc>
 800a11a:	9001      	str	r0, [sp, #4]
 800a11c:	2800      	cmp	r0, #0
 800a11e:	d13b      	bne.n	800a198 <_dtoa_r+0x320>
 800a120:	4b11      	ldr	r3, [pc, #68]	; (800a168 <_dtoa_r+0x2f0>)
 800a122:	4602      	mov	r2, r0
 800a124:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a128:	e6c0      	b.n	8009eac <_dtoa_r+0x34>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e7df      	b.n	800a0ee <_dtoa_r+0x276>
 800a12e:	bf00      	nop
 800a130:	636f4361 	.word	0x636f4361
 800a134:	3fd287a7 	.word	0x3fd287a7
 800a138:	8b60c8b3 	.word	0x8b60c8b3
 800a13c:	3fc68a28 	.word	0x3fc68a28
 800a140:	509f79fb 	.word	0x509f79fb
 800a144:	3fd34413 	.word	0x3fd34413
 800a148:	0800cadd 	.word	0x0800cadd
 800a14c:	0800caf4 	.word	0x0800caf4
 800a150:	7ff00000 	.word	0x7ff00000
 800a154:	0800cad9 	.word	0x0800cad9
 800a158:	0800cad0 	.word	0x0800cad0
 800a15c:	0800caad 	.word	0x0800caad
 800a160:	3ff80000 	.word	0x3ff80000
 800a164:	0800cbe8 	.word	0x0800cbe8
 800a168:	0800cb4f 	.word	0x0800cb4f
 800a16c:	2501      	movs	r5, #1
 800a16e:	2300      	movs	r3, #0
 800a170:	9306      	str	r3, [sp, #24]
 800a172:	9508      	str	r5, [sp, #32]
 800a174:	f04f 33ff 	mov.w	r3, #4294967295
 800a178:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a17c:	2200      	movs	r2, #0
 800a17e:	2312      	movs	r3, #18
 800a180:	e7b0      	b.n	800a0e4 <_dtoa_r+0x26c>
 800a182:	2301      	movs	r3, #1
 800a184:	9308      	str	r3, [sp, #32]
 800a186:	e7f5      	b.n	800a174 <_dtoa_r+0x2fc>
 800a188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a18e:	e7b8      	b.n	800a102 <_dtoa_r+0x28a>
 800a190:	3101      	adds	r1, #1
 800a192:	6041      	str	r1, [r0, #4]
 800a194:	0052      	lsls	r2, r2, #1
 800a196:	e7b8      	b.n	800a10a <_dtoa_r+0x292>
 800a198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a19a:	9a01      	ldr	r2, [sp, #4]
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	9b03      	ldr	r3, [sp, #12]
 800a1a0:	2b0e      	cmp	r3, #14
 800a1a2:	f200 809d 	bhi.w	800a2e0 <_dtoa_r+0x468>
 800a1a6:	2d00      	cmp	r5, #0
 800a1a8:	f000 809a 	beq.w	800a2e0 <_dtoa_r+0x468>
 800a1ac:	9b00      	ldr	r3, [sp, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	dd32      	ble.n	800a218 <_dtoa_r+0x3a0>
 800a1b2:	4ab7      	ldr	r2, [pc, #732]	; (800a490 <_dtoa_r+0x618>)
 800a1b4:	f003 030f 	and.w	r3, r3, #15
 800a1b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a1bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1c0:	9b00      	ldr	r3, [sp, #0]
 800a1c2:	05d8      	lsls	r0, r3, #23
 800a1c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a1c8:	d516      	bpl.n	800a1f8 <_dtoa_r+0x380>
 800a1ca:	4bb2      	ldr	r3, [pc, #712]	; (800a494 <_dtoa_r+0x61c>)
 800a1cc:	ec51 0b19 	vmov	r0, r1, d9
 800a1d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1d4:	f7f6 fb42 	bl	800085c <__aeabi_ddiv>
 800a1d8:	f007 070f 	and.w	r7, r7, #15
 800a1dc:	4682      	mov	sl, r0
 800a1de:	468b      	mov	fp, r1
 800a1e0:	2503      	movs	r5, #3
 800a1e2:	4eac      	ldr	r6, [pc, #688]	; (800a494 <_dtoa_r+0x61c>)
 800a1e4:	b957      	cbnz	r7, 800a1fc <_dtoa_r+0x384>
 800a1e6:	4642      	mov	r2, r8
 800a1e8:	464b      	mov	r3, r9
 800a1ea:	4650      	mov	r0, sl
 800a1ec:	4659      	mov	r1, fp
 800a1ee:	f7f6 fb35 	bl	800085c <__aeabi_ddiv>
 800a1f2:	4682      	mov	sl, r0
 800a1f4:	468b      	mov	fp, r1
 800a1f6:	e028      	b.n	800a24a <_dtoa_r+0x3d2>
 800a1f8:	2502      	movs	r5, #2
 800a1fa:	e7f2      	b.n	800a1e2 <_dtoa_r+0x36a>
 800a1fc:	07f9      	lsls	r1, r7, #31
 800a1fe:	d508      	bpl.n	800a212 <_dtoa_r+0x39a>
 800a200:	4640      	mov	r0, r8
 800a202:	4649      	mov	r1, r9
 800a204:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a208:	f7f6 f9fe 	bl	8000608 <__aeabi_dmul>
 800a20c:	3501      	adds	r5, #1
 800a20e:	4680      	mov	r8, r0
 800a210:	4689      	mov	r9, r1
 800a212:	107f      	asrs	r7, r7, #1
 800a214:	3608      	adds	r6, #8
 800a216:	e7e5      	b.n	800a1e4 <_dtoa_r+0x36c>
 800a218:	f000 809b 	beq.w	800a352 <_dtoa_r+0x4da>
 800a21c:	9b00      	ldr	r3, [sp, #0]
 800a21e:	4f9d      	ldr	r7, [pc, #628]	; (800a494 <_dtoa_r+0x61c>)
 800a220:	425e      	negs	r6, r3
 800a222:	4b9b      	ldr	r3, [pc, #620]	; (800a490 <_dtoa_r+0x618>)
 800a224:	f006 020f 	and.w	r2, r6, #15
 800a228:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	ec51 0b19 	vmov	r0, r1, d9
 800a234:	f7f6 f9e8 	bl	8000608 <__aeabi_dmul>
 800a238:	1136      	asrs	r6, r6, #4
 800a23a:	4682      	mov	sl, r0
 800a23c:	468b      	mov	fp, r1
 800a23e:	2300      	movs	r3, #0
 800a240:	2502      	movs	r5, #2
 800a242:	2e00      	cmp	r6, #0
 800a244:	d17a      	bne.n	800a33c <_dtoa_r+0x4c4>
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1d3      	bne.n	800a1f2 <_dtoa_r+0x37a>
 800a24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 8082 	beq.w	800a356 <_dtoa_r+0x4de>
 800a252:	4b91      	ldr	r3, [pc, #580]	; (800a498 <_dtoa_r+0x620>)
 800a254:	2200      	movs	r2, #0
 800a256:	4650      	mov	r0, sl
 800a258:	4659      	mov	r1, fp
 800a25a:	f7f6 fc47 	bl	8000aec <__aeabi_dcmplt>
 800a25e:	2800      	cmp	r0, #0
 800a260:	d079      	beq.n	800a356 <_dtoa_r+0x4de>
 800a262:	9b03      	ldr	r3, [sp, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d076      	beq.n	800a356 <_dtoa_r+0x4de>
 800a268:	9b02      	ldr	r3, [sp, #8]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	dd36      	ble.n	800a2dc <_dtoa_r+0x464>
 800a26e:	9b00      	ldr	r3, [sp, #0]
 800a270:	4650      	mov	r0, sl
 800a272:	4659      	mov	r1, fp
 800a274:	1e5f      	subs	r7, r3, #1
 800a276:	2200      	movs	r2, #0
 800a278:	4b88      	ldr	r3, [pc, #544]	; (800a49c <_dtoa_r+0x624>)
 800a27a:	f7f6 f9c5 	bl	8000608 <__aeabi_dmul>
 800a27e:	9e02      	ldr	r6, [sp, #8]
 800a280:	4682      	mov	sl, r0
 800a282:	468b      	mov	fp, r1
 800a284:	3501      	adds	r5, #1
 800a286:	4628      	mov	r0, r5
 800a288:	f7f6 f954 	bl	8000534 <__aeabi_i2d>
 800a28c:	4652      	mov	r2, sl
 800a28e:	465b      	mov	r3, fp
 800a290:	f7f6 f9ba 	bl	8000608 <__aeabi_dmul>
 800a294:	4b82      	ldr	r3, [pc, #520]	; (800a4a0 <_dtoa_r+0x628>)
 800a296:	2200      	movs	r2, #0
 800a298:	f7f6 f800 	bl	800029c <__adddf3>
 800a29c:	46d0      	mov	r8, sl
 800a29e:	46d9      	mov	r9, fp
 800a2a0:	4682      	mov	sl, r0
 800a2a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a2a6:	2e00      	cmp	r6, #0
 800a2a8:	d158      	bne.n	800a35c <_dtoa_r+0x4e4>
 800a2aa:	4b7e      	ldr	r3, [pc, #504]	; (800a4a4 <_dtoa_r+0x62c>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	4640      	mov	r0, r8
 800a2b0:	4649      	mov	r1, r9
 800a2b2:	f7f5 fff1 	bl	8000298 <__aeabi_dsub>
 800a2b6:	4652      	mov	r2, sl
 800a2b8:	465b      	mov	r3, fp
 800a2ba:	4680      	mov	r8, r0
 800a2bc:	4689      	mov	r9, r1
 800a2be:	f7f6 fc33 	bl	8000b28 <__aeabi_dcmpgt>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	f040 8295 	bne.w	800a7f2 <_dtoa_r+0x97a>
 800a2c8:	4652      	mov	r2, sl
 800a2ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a2ce:	4640      	mov	r0, r8
 800a2d0:	4649      	mov	r1, r9
 800a2d2:	f7f6 fc0b 	bl	8000aec <__aeabi_dcmplt>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	f040 8289 	bne.w	800a7ee <_dtoa_r+0x976>
 800a2dc:	ec5b ab19 	vmov	sl, fp, d9
 800a2e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f2c0 8148 	blt.w	800a578 <_dtoa_r+0x700>
 800a2e8:	9a00      	ldr	r2, [sp, #0]
 800a2ea:	2a0e      	cmp	r2, #14
 800a2ec:	f300 8144 	bgt.w	800a578 <_dtoa_r+0x700>
 800a2f0:	4b67      	ldr	r3, [pc, #412]	; (800a490 <_dtoa_r+0x618>)
 800a2f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f280 80d5 	bge.w	800a4ac <_dtoa_r+0x634>
 800a302:	9b03      	ldr	r3, [sp, #12]
 800a304:	2b00      	cmp	r3, #0
 800a306:	f300 80d1 	bgt.w	800a4ac <_dtoa_r+0x634>
 800a30a:	f040 826f 	bne.w	800a7ec <_dtoa_r+0x974>
 800a30e:	4b65      	ldr	r3, [pc, #404]	; (800a4a4 <_dtoa_r+0x62c>)
 800a310:	2200      	movs	r2, #0
 800a312:	4640      	mov	r0, r8
 800a314:	4649      	mov	r1, r9
 800a316:	f7f6 f977 	bl	8000608 <__aeabi_dmul>
 800a31a:	4652      	mov	r2, sl
 800a31c:	465b      	mov	r3, fp
 800a31e:	f7f6 fbf9 	bl	8000b14 <__aeabi_dcmpge>
 800a322:	9e03      	ldr	r6, [sp, #12]
 800a324:	4637      	mov	r7, r6
 800a326:	2800      	cmp	r0, #0
 800a328:	f040 8245 	bne.w	800a7b6 <_dtoa_r+0x93e>
 800a32c:	9d01      	ldr	r5, [sp, #4]
 800a32e:	2331      	movs	r3, #49	; 0x31
 800a330:	f805 3b01 	strb.w	r3, [r5], #1
 800a334:	9b00      	ldr	r3, [sp, #0]
 800a336:	3301      	adds	r3, #1
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	e240      	b.n	800a7be <_dtoa_r+0x946>
 800a33c:	07f2      	lsls	r2, r6, #31
 800a33e:	d505      	bpl.n	800a34c <_dtoa_r+0x4d4>
 800a340:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a344:	f7f6 f960 	bl	8000608 <__aeabi_dmul>
 800a348:	3501      	adds	r5, #1
 800a34a:	2301      	movs	r3, #1
 800a34c:	1076      	asrs	r6, r6, #1
 800a34e:	3708      	adds	r7, #8
 800a350:	e777      	b.n	800a242 <_dtoa_r+0x3ca>
 800a352:	2502      	movs	r5, #2
 800a354:	e779      	b.n	800a24a <_dtoa_r+0x3d2>
 800a356:	9f00      	ldr	r7, [sp, #0]
 800a358:	9e03      	ldr	r6, [sp, #12]
 800a35a:	e794      	b.n	800a286 <_dtoa_r+0x40e>
 800a35c:	9901      	ldr	r1, [sp, #4]
 800a35e:	4b4c      	ldr	r3, [pc, #304]	; (800a490 <_dtoa_r+0x618>)
 800a360:	4431      	add	r1, r6
 800a362:	910d      	str	r1, [sp, #52]	; 0x34
 800a364:	9908      	ldr	r1, [sp, #32]
 800a366:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a36a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a36e:	2900      	cmp	r1, #0
 800a370:	d043      	beq.n	800a3fa <_dtoa_r+0x582>
 800a372:	494d      	ldr	r1, [pc, #308]	; (800a4a8 <_dtoa_r+0x630>)
 800a374:	2000      	movs	r0, #0
 800a376:	f7f6 fa71 	bl	800085c <__aeabi_ddiv>
 800a37a:	4652      	mov	r2, sl
 800a37c:	465b      	mov	r3, fp
 800a37e:	f7f5 ff8b 	bl	8000298 <__aeabi_dsub>
 800a382:	9d01      	ldr	r5, [sp, #4]
 800a384:	4682      	mov	sl, r0
 800a386:	468b      	mov	fp, r1
 800a388:	4649      	mov	r1, r9
 800a38a:	4640      	mov	r0, r8
 800a38c:	f7f6 fbec 	bl	8000b68 <__aeabi_d2iz>
 800a390:	4606      	mov	r6, r0
 800a392:	f7f6 f8cf 	bl	8000534 <__aeabi_i2d>
 800a396:	4602      	mov	r2, r0
 800a398:	460b      	mov	r3, r1
 800a39a:	4640      	mov	r0, r8
 800a39c:	4649      	mov	r1, r9
 800a39e:	f7f5 ff7b 	bl	8000298 <__aeabi_dsub>
 800a3a2:	3630      	adds	r6, #48	; 0x30
 800a3a4:	f805 6b01 	strb.w	r6, [r5], #1
 800a3a8:	4652      	mov	r2, sl
 800a3aa:	465b      	mov	r3, fp
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	4689      	mov	r9, r1
 800a3b0:	f7f6 fb9c 	bl	8000aec <__aeabi_dcmplt>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d163      	bne.n	800a480 <_dtoa_r+0x608>
 800a3b8:	4642      	mov	r2, r8
 800a3ba:	464b      	mov	r3, r9
 800a3bc:	4936      	ldr	r1, [pc, #216]	; (800a498 <_dtoa_r+0x620>)
 800a3be:	2000      	movs	r0, #0
 800a3c0:	f7f5 ff6a 	bl	8000298 <__aeabi_dsub>
 800a3c4:	4652      	mov	r2, sl
 800a3c6:	465b      	mov	r3, fp
 800a3c8:	f7f6 fb90 	bl	8000aec <__aeabi_dcmplt>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	f040 80b5 	bne.w	800a53c <_dtoa_r+0x6c4>
 800a3d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3d4:	429d      	cmp	r5, r3
 800a3d6:	d081      	beq.n	800a2dc <_dtoa_r+0x464>
 800a3d8:	4b30      	ldr	r3, [pc, #192]	; (800a49c <_dtoa_r+0x624>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	4650      	mov	r0, sl
 800a3de:	4659      	mov	r1, fp
 800a3e0:	f7f6 f912 	bl	8000608 <__aeabi_dmul>
 800a3e4:	4b2d      	ldr	r3, [pc, #180]	; (800a49c <_dtoa_r+0x624>)
 800a3e6:	4682      	mov	sl, r0
 800a3e8:	468b      	mov	fp, r1
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f7f6 f90a 	bl	8000608 <__aeabi_dmul>
 800a3f4:	4680      	mov	r8, r0
 800a3f6:	4689      	mov	r9, r1
 800a3f8:	e7c6      	b.n	800a388 <_dtoa_r+0x510>
 800a3fa:	4650      	mov	r0, sl
 800a3fc:	4659      	mov	r1, fp
 800a3fe:	f7f6 f903 	bl	8000608 <__aeabi_dmul>
 800a402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a404:	9d01      	ldr	r5, [sp, #4]
 800a406:	930f      	str	r3, [sp, #60]	; 0x3c
 800a408:	4682      	mov	sl, r0
 800a40a:	468b      	mov	fp, r1
 800a40c:	4649      	mov	r1, r9
 800a40e:	4640      	mov	r0, r8
 800a410:	f7f6 fbaa 	bl	8000b68 <__aeabi_d2iz>
 800a414:	4606      	mov	r6, r0
 800a416:	f7f6 f88d 	bl	8000534 <__aeabi_i2d>
 800a41a:	3630      	adds	r6, #48	; 0x30
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4640      	mov	r0, r8
 800a422:	4649      	mov	r1, r9
 800a424:	f7f5 ff38 	bl	8000298 <__aeabi_dsub>
 800a428:	f805 6b01 	strb.w	r6, [r5], #1
 800a42c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a42e:	429d      	cmp	r5, r3
 800a430:	4680      	mov	r8, r0
 800a432:	4689      	mov	r9, r1
 800a434:	f04f 0200 	mov.w	r2, #0
 800a438:	d124      	bne.n	800a484 <_dtoa_r+0x60c>
 800a43a:	4b1b      	ldr	r3, [pc, #108]	; (800a4a8 <_dtoa_r+0x630>)
 800a43c:	4650      	mov	r0, sl
 800a43e:	4659      	mov	r1, fp
 800a440:	f7f5 ff2c 	bl	800029c <__adddf3>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	4640      	mov	r0, r8
 800a44a:	4649      	mov	r1, r9
 800a44c:	f7f6 fb6c 	bl	8000b28 <__aeabi_dcmpgt>
 800a450:	2800      	cmp	r0, #0
 800a452:	d173      	bne.n	800a53c <_dtoa_r+0x6c4>
 800a454:	4652      	mov	r2, sl
 800a456:	465b      	mov	r3, fp
 800a458:	4913      	ldr	r1, [pc, #76]	; (800a4a8 <_dtoa_r+0x630>)
 800a45a:	2000      	movs	r0, #0
 800a45c:	f7f5 ff1c 	bl	8000298 <__aeabi_dsub>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4640      	mov	r0, r8
 800a466:	4649      	mov	r1, r9
 800a468:	f7f6 fb40 	bl	8000aec <__aeabi_dcmplt>
 800a46c:	2800      	cmp	r0, #0
 800a46e:	f43f af35 	beq.w	800a2dc <_dtoa_r+0x464>
 800a472:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a474:	1e6b      	subs	r3, r5, #1
 800a476:	930f      	str	r3, [sp, #60]	; 0x3c
 800a478:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a47c:	2b30      	cmp	r3, #48	; 0x30
 800a47e:	d0f8      	beq.n	800a472 <_dtoa_r+0x5fa>
 800a480:	9700      	str	r7, [sp, #0]
 800a482:	e049      	b.n	800a518 <_dtoa_r+0x6a0>
 800a484:	4b05      	ldr	r3, [pc, #20]	; (800a49c <_dtoa_r+0x624>)
 800a486:	f7f6 f8bf 	bl	8000608 <__aeabi_dmul>
 800a48a:	4680      	mov	r8, r0
 800a48c:	4689      	mov	r9, r1
 800a48e:	e7bd      	b.n	800a40c <_dtoa_r+0x594>
 800a490:	0800cbe8 	.word	0x0800cbe8
 800a494:	0800cbc0 	.word	0x0800cbc0
 800a498:	3ff00000 	.word	0x3ff00000
 800a49c:	40240000 	.word	0x40240000
 800a4a0:	401c0000 	.word	0x401c0000
 800a4a4:	40140000 	.word	0x40140000
 800a4a8:	3fe00000 	.word	0x3fe00000
 800a4ac:	9d01      	ldr	r5, [sp, #4]
 800a4ae:	4656      	mov	r6, sl
 800a4b0:	465f      	mov	r7, fp
 800a4b2:	4642      	mov	r2, r8
 800a4b4:	464b      	mov	r3, r9
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	4639      	mov	r1, r7
 800a4ba:	f7f6 f9cf 	bl	800085c <__aeabi_ddiv>
 800a4be:	f7f6 fb53 	bl	8000b68 <__aeabi_d2iz>
 800a4c2:	4682      	mov	sl, r0
 800a4c4:	f7f6 f836 	bl	8000534 <__aeabi_i2d>
 800a4c8:	4642      	mov	r2, r8
 800a4ca:	464b      	mov	r3, r9
 800a4cc:	f7f6 f89c 	bl	8000608 <__aeabi_dmul>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	4639      	mov	r1, r7
 800a4d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a4dc:	f7f5 fedc 	bl	8000298 <__aeabi_dsub>
 800a4e0:	f805 6b01 	strb.w	r6, [r5], #1
 800a4e4:	9e01      	ldr	r6, [sp, #4]
 800a4e6:	9f03      	ldr	r7, [sp, #12]
 800a4e8:	1bae      	subs	r6, r5, r6
 800a4ea:	42b7      	cmp	r7, r6
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	d135      	bne.n	800a55e <_dtoa_r+0x6e6>
 800a4f2:	f7f5 fed3 	bl	800029c <__adddf3>
 800a4f6:	4642      	mov	r2, r8
 800a4f8:	464b      	mov	r3, r9
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	460f      	mov	r7, r1
 800a4fe:	f7f6 fb13 	bl	8000b28 <__aeabi_dcmpgt>
 800a502:	b9d0      	cbnz	r0, 800a53a <_dtoa_r+0x6c2>
 800a504:	4642      	mov	r2, r8
 800a506:	464b      	mov	r3, r9
 800a508:	4630      	mov	r0, r6
 800a50a:	4639      	mov	r1, r7
 800a50c:	f7f6 fae4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a510:	b110      	cbz	r0, 800a518 <_dtoa_r+0x6a0>
 800a512:	f01a 0f01 	tst.w	sl, #1
 800a516:	d110      	bne.n	800a53a <_dtoa_r+0x6c2>
 800a518:	4620      	mov	r0, r4
 800a51a:	ee18 1a10 	vmov	r1, s16
 800a51e:	f000 fae5 	bl	800aaec <_Bfree>
 800a522:	2300      	movs	r3, #0
 800a524:	9800      	ldr	r0, [sp, #0]
 800a526:	702b      	strb	r3, [r5, #0]
 800a528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a52a:	3001      	adds	r0, #1
 800a52c:	6018      	str	r0, [r3, #0]
 800a52e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a530:	2b00      	cmp	r3, #0
 800a532:	f43f acf1 	beq.w	8009f18 <_dtoa_r+0xa0>
 800a536:	601d      	str	r5, [r3, #0]
 800a538:	e4ee      	b.n	8009f18 <_dtoa_r+0xa0>
 800a53a:	9f00      	ldr	r7, [sp, #0]
 800a53c:	462b      	mov	r3, r5
 800a53e:	461d      	mov	r5, r3
 800a540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a544:	2a39      	cmp	r2, #57	; 0x39
 800a546:	d106      	bne.n	800a556 <_dtoa_r+0x6de>
 800a548:	9a01      	ldr	r2, [sp, #4]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d1f7      	bne.n	800a53e <_dtoa_r+0x6c6>
 800a54e:	9901      	ldr	r1, [sp, #4]
 800a550:	2230      	movs	r2, #48	; 0x30
 800a552:	3701      	adds	r7, #1
 800a554:	700a      	strb	r2, [r1, #0]
 800a556:	781a      	ldrb	r2, [r3, #0]
 800a558:	3201      	adds	r2, #1
 800a55a:	701a      	strb	r2, [r3, #0]
 800a55c:	e790      	b.n	800a480 <_dtoa_r+0x608>
 800a55e:	4ba6      	ldr	r3, [pc, #664]	; (800a7f8 <_dtoa_r+0x980>)
 800a560:	2200      	movs	r2, #0
 800a562:	f7f6 f851 	bl	8000608 <__aeabi_dmul>
 800a566:	2200      	movs	r2, #0
 800a568:	2300      	movs	r3, #0
 800a56a:	4606      	mov	r6, r0
 800a56c:	460f      	mov	r7, r1
 800a56e:	f7f6 fab3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a572:	2800      	cmp	r0, #0
 800a574:	d09d      	beq.n	800a4b2 <_dtoa_r+0x63a>
 800a576:	e7cf      	b.n	800a518 <_dtoa_r+0x6a0>
 800a578:	9a08      	ldr	r2, [sp, #32]
 800a57a:	2a00      	cmp	r2, #0
 800a57c:	f000 80d7 	beq.w	800a72e <_dtoa_r+0x8b6>
 800a580:	9a06      	ldr	r2, [sp, #24]
 800a582:	2a01      	cmp	r2, #1
 800a584:	f300 80ba 	bgt.w	800a6fc <_dtoa_r+0x884>
 800a588:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a58a:	2a00      	cmp	r2, #0
 800a58c:	f000 80b2 	beq.w	800a6f4 <_dtoa_r+0x87c>
 800a590:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a594:	9e07      	ldr	r6, [sp, #28]
 800a596:	9d04      	ldr	r5, [sp, #16]
 800a598:	9a04      	ldr	r2, [sp, #16]
 800a59a:	441a      	add	r2, r3
 800a59c:	9204      	str	r2, [sp, #16]
 800a59e:	9a05      	ldr	r2, [sp, #20]
 800a5a0:	2101      	movs	r1, #1
 800a5a2:	441a      	add	r2, r3
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	9205      	str	r2, [sp, #20]
 800a5a8:	f000 fb58 	bl	800ac5c <__i2b>
 800a5ac:	4607      	mov	r7, r0
 800a5ae:	2d00      	cmp	r5, #0
 800a5b0:	dd0c      	ble.n	800a5cc <_dtoa_r+0x754>
 800a5b2:	9b05      	ldr	r3, [sp, #20]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	dd09      	ble.n	800a5cc <_dtoa_r+0x754>
 800a5b8:	42ab      	cmp	r3, r5
 800a5ba:	9a04      	ldr	r2, [sp, #16]
 800a5bc:	bfa8      	it	ge
 800a5be:	462b      	movge	r3, r5
 800a5c0:	1ad2      	subs	r2, r2, r3
 800a5c2:	9204      	str	r2, [sp, #16]
 800a5c4:	9a05      	ldr	r2, [sp, #20]
 800a5c6:	1aed      	subs	r5, r5, r3
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	9305      	str	r3, [sp, #20]
 800a5cc:	9b07      	ldr	r3, [sp, #28]
 800a5ce:	b31b      	cbz	r3, 800a618 <_dtoa_r+0x7a0>
 800a5d0:	9b08      	ldr	r3, [sp, #32]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f000 80af 	beq.w	800a736 <_dtoa_r+0x8be>
 800a5d8:	2e00      	cmp	r6, #0
 800a5da:	dd13      	ble.n	800a604 <_dtoa_r+0x78c>
 800a5dc:	4639      	mov	r1, r7
 800a5de:	4632      	mov	r2, r6
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f000 fbfb 	bl	800addc <__pow5mult>
 800a5e6:	ee18 2a10 	vmov	r2, s16
 800a5ea:	4601      	mov	r1, r0
 800a5ec:	4607      	mov	r7, r0
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f000 fb4a 	bl	800ac88 <__multiply>
 800a5f4:	ee18 1a10 	vmov	r1, s16
 800a5f8:	4680      	mov	r8, r0
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f000 fa76 	bl	800aaec <_Bfree>
 800a600:	ee08 8a10 	vmov	s16, r8
 800a604:	9b07      	ldr	r3, [sp, #28]
 800a606:	1b9a      	subs	r2, r3, r6
 800a608:	d006      	beq.n	800a618 <_dtoa_r+0x7a0>
 800a60a:	ee18 1a10 	vmov	r1, s16
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 fbe4 	bl	800addc <__pow5mult>
 800a614:	ee08 0a10 	vmov	s16, r0
 800a618:	2101      	movs	r1, #1
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fb1e 	bl	800ac5c <__i2b>
 800a620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a622:	2b00      	cmp	r3, #0
 800a624:	4606      	mov	r6, r0
 800a626:	f340 8088 	ble.w	800a73a <_dtoa_r+0x8c2>
 800a62a:	461a      	mov	r2, r3
 800a62c:	4601      	mov	r1, r0
 800a62e:	4620      	mov	r0, r4
 800a630:	f000 fbd4 	bl	800addc <__pow5mult>
 800a634:	9b06      	ldr	r3, [sp, #24]
 800a636:	2b01      	cmp	r3, #1
 800a638:	4606      	mov	r6, r0
 800a63a:	f340 8081 	ble.w	800a740 <_dtoa_r+0x8c8>
 800a63e:	f04f 0800 	mov.w	r8, #0
 800a642:	6933      	ldr	r3, [r6, #16]
 800a644:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a648:	6918      	ldr	r0, [r3, #16]
 800a64a:	f000 fab7 	bl	800abbc <__hi0bits>
 800a64e:	f1c0 0020 	rsb	r0, r0, #32
 800a652:	9b05      	ldr	r3, [sp, #20]
 800a654:	4418      	add	r0, r3
 800a656:	f010 001f 	ands.w	r0, r0, #31
 800a65a:	f000 8092 	beq.w	800a782 <_dtoa_r+0x90a>
 800a65e:	f1c0 0320 	rsb	r3, r0, #32
 800a662:	2b04      	cmp	r3, #4
 800a664:	f340 808a 	ble.w	800a77c <_dtoa_r+0x904>
 800a668:	f1c0 001c 	rsb	r0, r0, #28
 800a66c:	9b04      	ldr	r3, [sp, #16]
 800a66e:	4403      	add	r3, r0
 800a670:	9304      	str	r3, [sp, #16]
 800a672:	9b05      	ldr	r3, [sp, #20]
 800a674:	4403      	add	r3, r0
 800a676:	4405      	add	r5, r0
 800a678:	9305      	str	r3, [sp, #20]
 800a67a:	9b04      	ldr	r3, [sp, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	dd07      	ble.n	800a690 <_dtoa_r+0x818>
 800a680:	ee18 1a10 	vmov	r1, s16
 800a684:	461a      	mov	r2, r3
 800a686:	4620      	mov	r0, r4
 800a688:	f000 fc02 	bl	800ae90 <__lshift>
 800a68c:	ee08 0a10 	vmov	s16, r0
 800a690:	9b05      	ldr	r3, [sp, #20]
 800a692:	2b00      	cmp	r3, #0
 800a694:	dd05      	ble.n	800a6a2 <_dtoa_r+0x82a>
 800a696:	4631      	mov	r1, r6
 800a698:	461a      	mov	r2, r3
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 fbf8 	bl	800ae90 <__lshift>
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d06e      	beq.n	800a786 <_dtoa_r+0x90e>
 800a6a8:	ee18 0a10 	vmov	r0, s16
 800a6ac:	4631      	mov	r1, r6
 800a6ae:	f000 fc5f 	bl	800af70 <__mcmp>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	da67      	bge.n	800a786 <_dtoa_r+0x90e>
 800a6b6:	9b00      	ldr	r3, [sp, #0]
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	ee18 1a10 	vmov	r1, s16
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	220a      	movs	r2, #10
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f000 fa33 	bl	800ab30 <__multadd>
 800a6ca:	9b08      	ldr	r3, [sp, #32]
 800a6cc:	ee08 0a10 	vmov	s16, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f000 81b1 	beq.w	800aa38 <_dtoa_r+0xbc0>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	4639      	mov	r1, r7
 800a6da:	220a      	movs	r2, #10
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f000 fa27 	bl	800ab30 <__multadd>
 800a6e2:	9b02      	ldr	r3, [sp, #8]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	4607      	mov	r7, r0
 800a6e8:	f300 808e 	bgt.w	800a808 <_dtoa_r+0x990>
 800a6ec:	9b06      	ldr	r3, [sp, #24]
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	dc51      	bgt.n	800a796 <_dtoa_r+0x91e>
 800a6f2:	e089      	b.n	800a808 <_dtoa_r+0x990>
 800a6f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a6fa:	e74b      	b.n	800a594 <_dtoa_r+0x71c>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	1e5e      	subs	r6, r3, #1
 800a700:	9b07      	ldr	r3, [sp, #28]
 800a702:	42b3      	cmp	r3, r6
 800a704:	bfbf      	itttt	lt
 800a706:	9b07      	ldrlt	r3, [sp, #28]
 800a708:	9607      	strlt	r6, [sp, #28]
 800a70a:	1af2      	sublt	r2, r6, r3
 800a70c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a70e:	bfb6      	itet	lt
 800a710:	189b      	addlt	r3, r3, r2
 800a712:	1b9e      	subge	r6, r3, r6
 800a714:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a716:	9b03      	ldr	r3, [sp, #12]
 800a718:	bfb8      	it	lt
 800a71a:	2600      	movlt	r6, #0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bfb7      	itett	lt
 800a720:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a724:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a728:	1a9d      	sublt	r5, r3, r2
 800a72a:	2300      	movlt	r3, #0
 800a72c:	e734      	b.n	800a598 <_dtoa_r+0x720>
 800a72e:	9e07      	ldr	r6, [sp, #28]
 800a730:	9d04      	ldr	r5, [sp, #16]
 800a732:	9f08      	ldr	r7, [sp, #32]
 800a734:	e73b      	b.n	800a5ae <_dtoa_r+0x736>
 800a736:	9a07      	ldr	r2, [sp, #28]
 800a738:	e767      	b.n	800a60a <_dtoa_r+0x792>
 800a73a:	9b06      	ldr	r3, [sp, #24]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	dc18      	bgt.n	800a772 <_dtoa_r+0x8fa>
 800a740:	f1ba 0f00 	cmp.w	sl, #0
 800a744:	d115      	bne.n	800a772 <_dtoa_r+0x8fa>
 800a746:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a74a:	b993      	cbnz	r3, 800a772 <_dtoa_r+0x8fa>
 800a74c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a750:	0d1b      	lsrs	r3, r3, #20
 800a752:	051b      	lsls	r3, r3, #20
 800a754:	b183      	cbz	r3, 800a778 <_dtoa_r+0x900>
 800a756:	9b04      	ldr	r3, [sp, #16]
 800a758:	3301      	adds	r3, #1
 800a75a:	9304      	str	r3, [sp, #16]
 800a75c:	9b05      	ldr	r3, [sp, #20]
 800a75e:	3301      	adds	r3, #1
 800a760:	9305      	str	r3, [sp, #20]
 800a762:	f04f 0801 	mov.w	r8, #1
 800a766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f47f af6a 	bne.w	800a642 <_dtoa_r+0x7ca>
 800a76e:	2001      	movs	r0, #1
 800a770:	e76f      	b.n	800a652 <_dtoa_r+0x7da>
 800a772:	f04f 0800 	mov.w	r8, #0
 800a776:	e7f6      	b.n	800a766 <_dtoa_r+0x8ee>
 800a778:	4698      	mov	r8, r3
 800a77a:	e7f4      	b.n	800a766 <_dtoa_r+0x8ee>
 800a77c:	f43f af7d 	beq.w	800a67a <_dtoa_r+0x802>
 800a780:	4618      	mov	r0, r3
 800a782:	301c      	adds	r0, #28
 800a784:	e772      	b.n	800a66c <_dtoa_r+0x7f4>
 800a786:	9b03      	ldr	r3, [sp, #12]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	dc37      	bgt.n	800a7fc <_dtoa_r+0x984>
 800a78c:	9b06      	ldr	r3, [sp, #24]
 800a78e:	2b02      	cmp	r3, #2
 800a790:	dd34      	ble.n	800a7fc <_dtoa_r+0x984>
 800a792:	9b03      	ldr	r3, [sp, #12]
 800a794:	9302      	str	r3, [sp, #8]
 800a796:	9b02      	ldr	r3, [sp, #8]
 800a798:	b96b      	cbnz	r3, 800a7b6 <_dtoa_r+0x93e>
 800a79a:	4631      	mov	r1, r6
 800a79c:	2205      	movs	r2, #5
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f000 f9c6 	bl	800ab30 <__multadd>
 800a7a4:	4601      	mov	r1, r0
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	ee18 0a10 	vmov	r0, s16
 800a7ac:	f000 fbe0 	bl	800af70 <__mcmp>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	f73f adbb 	bgt.w	800a32c <_dtoa_r+0x4b4>
 800a7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b8:	9d01      	ldr	r5, [sp, #4]
 800a7ba:	43db      	mvns	r3, r3
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	f04f 0800 	mov.w	r8, #0
 800a7c2:	4631      	mov	r1, r6
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f000 f991 	bl	800aaec <_Bfree>
 800a7ca:	2f00      	cmp	r7, #0
 800a7cc:	f43f aea4 	beq.w	800a518 <_dtoa_r+0x6a0>
 800a7d0:	f1b8 0f00 	cmp.w	r8, #0
 800a7d4:	d005      	beq.n	800a7e2 <_dtoa_r+0x96a>
 800a7d6:	45b8      	cmp	r8, r7
 800a7d8:	d003      	beq.n	800a7e2 <_dtoa_r+0x96a>
 800a7da:	4641      	mov	r1, r8
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f000 f985 	bl	800aaec <_Bfree>
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f000 f981 	bl	800aaec <_Bfree>
 800a7ea:	e695      	b.n	800a518 <_dtoa_r+0x6a0>
 800a7ec:	2600      	movs	r6, #0
 800a7ee:	4637      	mov	r7, r6
 800a7f0:	e7e1      	b.n	800a7b6 <_dtoa_r+0x93e>
 800a7f2:	9700      	str	r7, [sp, #0]
 800a7f4:	4637      	mov	r7, r6
 800a7f6:	e599      	b.n	800a32c <_dtoa_r+0x4b4>
 800a7f8:	40240000 	.word	0x40240000
 800a7fc:	9b08      	ldr	r3, [sp, #32]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 80ca 	beq.w	800a998 <_dtoa_r+0xb20>
 800a804:	9b03      	ldr	r3, [sp, #12]
 800a806:	9302      	str	r3, [sp, #8]
 800a808:	2d00      	cmp	r5, #0
 800a80a:	dd05      	ble.n	800a818 <_dtoa_r+0x9a0>
 800a80c:	4639      	mov	r1, r7
 800a80e:	462a      	mov	r2, r5
 800a810:	4620      	mov	r0, r4
 800a812:	f000 fb3d 	bl	800ae90 <__lshift>
 800a816:	4607      	mov	r7, r0
 800a818:	f1b8 0f00 	cmp.w	r8, #0
 800a81c:	d05b      	beq.n	800a8d6 <_dtoa_r+0xa5e>
 800a81e:	6879      	ldr	r1, [r7, #4]
 800a820:	4620      	mov	r0, r4
 800a822:	f000 f923 	bl	800aa6c <_Balloc>
 800a826:	4605      	mov	r5, r0
 800a828:	b928      	cbnz	r0, 800a836 <_dtoa_r+0x9be>
 800a82a:	4b87      	ldr	r3, [pc, #540]	; (800aa48 <_dtoa_r+0xbd0>)
 800a82c:	4602      	mov	r2, r0
 800a82e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a832:	f7ff bb3b 	b.w	8009eac <_dtoa_r+0x34>
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	3202      	adds	r2, #2
 800a83a:	0092      	lsls	r2, r2, #2
 800a83c:	f107 010c 	add.w	r1, r7, #12
 800a840:	300c      	adds	r0, #12
 800a842:	f7fe fded 	bl	8009420 <memcpy>
 800a846:	2201      	movs	r2, #1
 800a848:	4629      	mov	r1, r5
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 fb20 	bl	800ae90 <__lshift>
 800a850:	9b01      	ldr	r3, [sp, #4]
 800a852:	f103 0901 	add.w	r9, r3, #1
 800a856:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a85a:	4413      	add	r3, r2
 800a85c:	9305      	str	r3, [sp, #20]
 800a85e:	f00a 0301 	and.w	r3, sl, #1
 800a862:	46b8      	mov	r8, r7
 800a864:	9304      	str	r3, [sp, #16]
 800a866:	4607      	mov	r7, r0
 800a868:	4631      	mov	r1, r6
 800a86a:	ee18 0a10 	vmov	r0, s16
 800a86e:	f7ff fa77 	bl	8009d60 <quorem>
 800a872:	4641      	mov	r1, r8
 800a874:	9002      	str	r0, [sp, #8]
 800a876:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a87a:	ee18 0a10 	vmov	r0, s16
 800a87e:	f000 fb77 	bl	800af70 <__mcmp>
 800a882:	463a      	mov	r2, r7
 800a884:	9003      	str	r0, [sp, #12]
 800a886:	4631      	mov	r1, r6
 800a888:	4620      	mov	r0, r4
 800a88a:	f000 fb8d 	bl	800afa8 <__mdiff>
 800a88e:	68c2      	ldr	r2, [r0, #12]
 800a890:	f109 3bff 	add.w	fp, r9, #4294967295
 800a894:	4605      	mov	r5, r0
 800a896:	bb02      	cbnz	r2, 800a8da <_dtoa_r+0xa62>
 800a898:	4601      	mov	r1, r0
 800a89a:	ee18 0a10 	vmov	r0, s16
 800a89e:	f000 fb67 	bl	800af70 <__mcmp>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	9207      	str	r2, [sp, #28]
 800a8aa:	f000 f91f 	bl	800aaec <_Bfree>
 800a8ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a8b2:	ea43 0102 	orr.w	r1, r3, r2
 800a8b6:	9b04      	ldr	r3, [sp, #16]
 800a8b8:	430b      	orrs	r3, r1
 800a8ba:	464d      	mov	r5, r9
 800a8bc:	d10f      	bne.n	800a8de <_dtoa_r+0xa66>
 800a8be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a8c2:	d02a      	beq.n	800a91a <_dtoa_r+0xaa2>
 800a8c4:	9b03      	ldr	r3, [sp, #12]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	dd02      	ble.n	800a8d0 <_dtoa_r+0xa58>
 800a8ca:	9b02      	ldr	r3, [sp, #8]
 800a8cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a8d0:	f88b a000 	strb.w	sl, [fp]
 800a8d4:	e775      	b.n	800a7c2 <_dtoa_r+0x94a>
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	e7ba      	b.n	800a850 <_dtoa_r+0x9d8>
 800a8da:	2201      	movs	r2, #1
 800a8dc:	e7e2      	b.n	800a8a4 <_dtoa_r+0xa2c>
 800a8de:	9b03      	ldr	r3, [sp, #12]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	db04      	blt.n	800a8ee <_dtoa_r+0xa76>
 800a8e4:	9906      	ldr	r1, [sp, #24]
 800a8e6:	430b      	orrs	r3, r1
 800a8e8:	9904      	ldr	r1, [sp, #16]
 800a8ea:	430b      	orrs	r3, r1
 800a8ec:	d122      	bne.n	800a934 <_dtoa_r+0xabc>
 800a8ee:	2a00      	cmp	r2, #0
 800a8f0:	ddee      	ble.n	800a8d0 <_dtoa_r+0xa58>
 800a8f2:	ee18 1a10 	vmov	r1, s16
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f000 fac9 	bl	800ae90 <__lshift>
 800a8fe:	4631      	mov	r1, r6
 800a900:	ee08 0a10 	vmov	s16, r0
 800a904:	f000 fb34 	bl	800af70 <__mcmp>
 800a908:	2800      	cmp	r0, #0
 800a90a:	dc03      	bgt.n	800a914 <_dtoa_r+0xa9c>
 800a90c:	d1e0      	bne.n	800a8d0 <_dtoa_r+0xa58>
 800a90e:	f01a 0f01 	tst.w	sl, #1
 800a912:	d0dd      	beq.n	800a8d0 <_dtoa_r+0xa58>
 800a914:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a918:	d1d7      	bne.n	800a8ca <_dtoa_r+0xa52>
 800a91a:	2339      	movs	r3, #57	; 0x39
 800a91c:	f88b 3000 	strb.w	r3, [fp]
 800a920:	462b      	mov	r3, r5
 800a922:	461d      	mov	r5, r3
 800a924:	3b01      	subs	r3, #1
 800a926:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a92a:	2a39      	cmp	r2, #57	; 0x39
 800a92c:	d071      	beq.n	800aa12 <_dtoa_r+0xb9a>
 800a92e:	3201      	adds	r2, #1
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	e746      	b.n	800a7c2 <_dtoa_r+0x94a>
 800a934:	2a00      	cmp	r2, #0
 800a936:	dd07      	ble.n	800a948 <_dtoa_r+0xad0>
 800a938:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a93c:	d0ed      	beq.n	800a91a <_dtoa_r+0xaa2>
 800a93e:	f10a 0301 	add.w	r3, sl, #1
 800a942:	f88b 3000 	strb.w	r3, [fp]
 800a946:	e73c      	b.n	800a7c2 <_dtoa_r+0x94a>
 800a948:	9b05      	ldr	r3, [sp, #20]
 800a94a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a94e:	4599      	cmp	r9, r3
 800a950:	d047      	beq.n	800a9e2 <_dtoa_r+0xb6a>
 800a952:	ee18 1a10 	vmov	r1, s16
 800a956:	2300      	movs	r3, #0
 800a958:	220a      	movs	r2, #10
 800a95a:	4620      	mov	r0, r4
 800a95c:	f000 f8e8 	bl	800ab30 <__multadd>
 800a960:	45b8      	cmp	r8, r7
 800a962:	ee08 0a10 	vmov	s16, r0
 800a966:	f04f 0300 	mov.w	r3, #0
 800a96a:	f04f 020a 	mov.w	r2, #10
 800a96e:	4641      	mov	r1, r8
 800a970:	4620      	mov	r0, r4
 800a972:	d106      	bne.n	800a982 <_dtoa_r+0xb0a>
 800a974:	f000 f8dc 	bl	800ab30 <__multadd>
 800a978:	4680      	mov	r8, r0
 800a97a:	4607      	mov	r7, r0
 800a97c:	f109 0901 	add.w	r9, r9, #1
 800a980:	e772      	b.n	800a868 <_dtoa_r+0x9f0>
 800a982:	f000 f8d5 	bl	800ab30 <__multadd>
 800a986:	4639      	mov	r1, r7
 800a988:	4680      	mov	r8, r0
 800a98a:	2300      	movs	r3, #0
 800a98c:	220a      	movs	r2, #10
 800a98e:	4620      	mov	r0, r4
 800a990:	f000 f8ce 	bl	800ab30 <__multadd>
 800a994:	4607      	mov	r7, r0
 800a996:	e7f1      	b.n	800a97c <_dtoa_r+0xb04>
 800a998:	9b03      	ldr	r3, [sp, #12]
 800a99a:	9302      	str	r3, [sp, #8]
 800a99c:	9d01      	ldr	r5, [sp, #4]
 800a99e:	ee18 0a10 	vmov	r0, s16
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	f7ff f9dc 	bl	8009d60 <quorem>
 800a9a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a9ac:	9b01      	ldr	r3, [sp, #4]
 800a9ae:	f805 ab01 	strb.w	sl, [r5], #1
 800a9b2:	1aea      	subs	r2, r5, r3
 800a9b4:	9b02      	ldr	r3, [sp, #8]
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	dd09      	ble.n	800a9ce <_dtoa_r+0xb56>
 800a9ba:	ee18 1a10 	vmov	r1, s16
 800a9be:	2300      	movs	r3, #0
 800a9c0:	220a      	movs	r2, #10
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 f8b4 	bl	800ab30 <__multadd>
 800a9c8:	ee08 0a10 	vmov	s16, r0
 800a9cc:	e7e7      	b.n	800a99e <_dtoa_r+0xb26>
 800a9ce:	9b02      	ldr	r3, [sp, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	bfc8      	it	gt
 800a9d4:	461d      	movgt	r5, r3
 800a9d6:	9b01      	ldr	r3, [sp, #4]
 800a9d8:	bfd8      	it	le
 800a9da:	2501      	movle	r5, #1
 800a9dc:	441d      	add	r5, r3
 800a9de:	f04f 0800 	mov.w	r8, #0
 800a9e2:	ee18 1a10 	vmov	r1, s16
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 fa51 	bl	800ae90 <__lshift>
 800a9ee:	4631      	mov	r1, r6
 800a9f0:	ee08 0a10 	vmov	s16, r0
 800a9f4:	f000 fabc 	bl	800af70 <__mcmp>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	dc91      	bgt.n	800a920 <_dtoa_r+0xaa8>
 800a9fc:	d102      	bne.n	800aa04 <_dtoa_r+0xb8c>
 800a9fe:	f01a 0f01 	tst.w	sl, #1
 800aa02:	d18d      	bne.n	800a920 <_dtoa_r+0xaa8>
 800aa04:	462b      	mov	r3, r5
 800aa06:	461d      	mov	r5, r3
 800aa08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa0c:	2a30      	cmp	r2, #48	; 0x30
 800aa0e:	d0fa      	beq.n	800aa06 <_dtoa_r+0xb8e>
 800aa10:	e6d7      	b.n	800a7c2 <_dtoa_r+0x94a>
 800aa12:	9a01      	ldr	r2, [sp, #4]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d184      	bne.n	800a922 <_dtoa_r+0xaaa>
 800aa18:	9b00      	ldr	r3, [sp, #0]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	2331      	movs	r3, #49	; 0x31
 800aa20:	7013      	strb	r3, [r2, #0]
 800aa22:	e6ce      	b.n	800a7c2 <_dtoa_r+0x94a>
 800aa24:	4b09      	ldr	r3, [pc, #36]	; (800aa4c <_dtoa_r+0xbd4>)
 800aa26:	f7ff ba95 	b.w	8009f54 <_dtoa_r+0xdc>
 800aa2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f47f aa6e 	bne.w	8009f0e <_dtoa_r+0x96>
 800aa32:	4b07      	ldr	r3, [pc, #28]	; (800aa50 <_dtoa_r+0xbd8>)
 800aa34:	f7ff ba8e 	b.w	8009f54 <_dtoa_r+0xdc>
 800aa38:	9b02      	ldr	r3, [sp, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	dcae      	bgt.n	800a99c <_dtoa_r+0xb24>
 800aa3e:	9b06      	ldr	r3, [sp, #24]
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	f73f aea8 	bgt.w	800a796 <_dtoa_r+0x91e>
 800aa46:	e7a9      	b.n	800a99c <_dtoa_r+0xb24>
 800aa48:	0800cb4f 	.word	0x0800cb4f
 800aa4c:	0800caac 	.word	0x0800caac
 800aa50:	0800cad0 	.word	0x0800cad0

0800aa54 <_localeconv_r>:
 800aa54:	4800      	ldr	r0, [pc, #0]	; (800aa58 <_localeconv_r+0x4>)
 800aa56:	4770      	bx	lr
 800aa58:	20000168 	.word	0x20000168

0800aa5c <malloc>:
 800aa5c:	4b02      	ldr	r3, [pc, #8]	; (800aa68 <malloc+0xc>)
 800aa5e:	4601      	mov	r1, r0
 800aa60:	6818      	ldr	r0, [r3, #0]
 800aa62:	f000 bc09 	b.w	800b278 <_malloc_r>
 800aa66:	bf00      	nop
 800aa68:	20000014 	.word	0x20000014

0800aa6c <_Balloc>:
 800aa6c:	b570      	push	{r4, r5, r6, lr}
 800aa6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa70:	4604      	mov	r4, r0
 800aa72:	460d      	mov	r5, r1
 800aa74:	b976      	cbnz	r6, 800aa94 <_Balloc+0x28>
 800aa76:	2010      	movs	r0, #16
 800aa78:	f7ff fff0 	bl	800aa5c <malloc>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	6260      	str	r0, [r4, #36]	; 0x24
 800aa80:	b920      	cbnz	r0, 800aa8c <_Balloc+0x20>
 800aa82:	4b18      	ldr	r3, [pc, #96]	; (800aae4 <_Balloc+0x78>)
 800aa84:	4818      	ldr	r0, [pc, #96]	; (800aae8 <_Balloc+0x7c>)
 800aa86:	2166      	movs	r1, #102	; 0x66
 800aa88:	f000 fdd6 	bl	800b638 <__assert_func>
 800aa8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa90:	6006      	str	r6, [r0, #0]
 800aa92:	60c6      	str	r6, [r0, #12]
 800aa94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa96:	68f3      	ldr	r3, [r6, #12]
 800aa98:	b183      	cbz	r3, 800aabc <_Balloc+0x50>
 800aa9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aaa2:	b9b8      	cbnz	r0, 800aad4 <_Balloc+0x68>
 800aaa4:	2101      	movs	r1, #1
 800aaa6:	fa01 f605 	lsl.w	r6, r1, r5
 800aaaa:	1d72      	adds	r2, r6, #5
 800aaac:	0092      	lsls	r2, r2, #2
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 fb60 	bl	800b174 <_calloc_r>
 800aab4:	b160      	cbz	r0, 800aad0 <_Balloc+0x64>
 800aab6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aaba:	e00e      	b.n	800aada <_Balloc+0x6e>
 800aabc:	2221      	movs	r2, #33	; 0x21
 800aabe:	2104      	movs	r1, #4
 800aac0:	4620      	mov	r0, r4
 800aac2:	f000 fb57 	bl	800b174 <_calloc_r>
 800aac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aac8:	60f0      	str	r0, [r6, #12]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d1e4      	bne.n	800aa9a <_Balloc+0x2e>
 800aad0:	2000      	movs	r0, #0
 800aad2:	bd70      	pop	{r4, r5, r6, pc}
 800aad4:	6802      	ldr	r2, [r0, #0]
 800aad6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aada:	2300      	movs	r3, #0
 800aadc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aae0:	e7f7      	b.n	800aad2 <_Balloc+0x66>
 800aae2:	bf00      	nop
 800aae4:	0800cadd 	.word	0x0800cadd
 800aae8:	0800cb60 	.word	0x0800cb60

0800aaec <_Bfree>:
 800aaec:	b570      	push	{r4, r5, r6, lr}
 800aaee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	b976      	cbnz	r6, 800ab14 <_Bfree+0x28>
 800aaf6:	2010      	movs	r0, #16
 800aaf8:	f7ff ffb0 	bl	800aa5c <malloc>
 800aafc:	4602      	mov	r2, r0
 800aafe:	6268      	str	r0, [r5, #36]	; 0x24
 800ab00:	b920      	cbnz	r0, 800ab0c <_Bfree+0x20>
 800ab02:	4b09      	ldr	r3, [pc, #36]	; (800ab28 <_Bfree+0x3c>)
 800ab04:	4809      	ldr	r0, [pc, #36]	; (800ab2c <_Bfree+0x40>)
 800ab06:	218a      	movs	r1, #138	; 0x8a
 800ab08:	f000 fd96 	bl	800b638 <__assert_func>
 800ab0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab10:	6006      	str	r6, [r0, #0]
 800ab12:	60c6      	str	r6, [r0, #12]
 800ab14:	b13c      	cbz	r4, 800ab26 <_Bfree+0x3a>
 800ab16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab18:	6862      	ldr	r2, [r4, #4]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab20:	6021      	str	r1, [r4, #0]
 800ab22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab26:	bd70      	pop	{r4, r5, r6, pc}
 800ab28:	0800cadd 	.word	0x0800cadd
 800ab2c:	0800cb60 	.word	0x0800cb60

0800ab30 <__multadd>:
 800ab30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab34:	690d      	ldr	r5, [r1, #16]
 800ab36:	4607      	mov	r7, r0
 800ab38:	460c      	mov	r4, r1
 800ab3a:	461e      	mov	r6, r3
 800ab3c:	f101 0c14 	add.w	ip, r1, #20
 800ab40:	2000      	movs	r0, #0
 800ab42:	f8dc 3000 	ldr.w	r3, [ip]
 800ab46:	b299      	uxth	r1, r3
 800ab48:	fb02 6101 	mla	r1, r2, r1, r6
 800ab4c:	0c1e      	lsrs	r6, r3, #16
 800ab4e:	0c0b      	lsrs	r3, r1, #16
 800ab50:	fb02 3306 	mla	r3, r2, r6, r3
 800ab54:	b289      	uxth	r1, r1
 800ab56:	3001      	adds	r0, #1
 800ab58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab5c:	4285      	cmp	r5, r0
 800ab5e:	f84c 1b04 	str.w	r1, [ip], #4
 800ab62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab66:	dcec      	bgt.n	800ab42 <__multadd+0x12>
 800ab68:	b30e      	cbz	r6, 800abae <__multadd+0x7e>
 800ab6a:	68a3      	ldr	r3, [r4, #8]
 800ab6c:	42ab      	cmp	r3, r5
 800ab6e:	dc19      	bgt.n	800aba4 <__multadd+0x74>
 800ab70:	6861      	ldr	r1, [r4, #4]
 800ab72:	4638      	mov	r0, r7
 800ab74:	3101      	adds	r1, #1
 800ab76:	f7ff ff79 	bl	800aa6c <_Balloc>
 800ab7a:	4680      	mov	r8, r0
 800ab7c:	b928      	cbnz	r0, 800ab8a <__multadd+0x5a>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	4b0c      	ldr	r3, [pc, #48]	; (800abb4 <__multadd+0x84>)
 800ab82:	480d      	ldr	r0, [pc, #52]	; (800abb8 <__multadd+0x88>)
 800ab84:	21b5      	movs	r1, #181	; 0xb5
 800ab86:	f000 fd57 	bl	800b638 <__assert_func>
 800ab8a:	6922      	ldr	r2, [r4, #16]
 800ab8c:	3202      	adds	r2, #2
 800ab8e:	f104 010c 	add.w	r1, r4, #12
 800ab92:	0092      	lsls	r2, r2, #2
 800ab94:	300c      	adds	r0, #12
 800ab96:	f7fe fc43 	bl	8009420 <memcpy>
 800ab9a:	4621      	mov	r1, r4
 800ab9c:	4638      	mov	r0, r7
 800ab9e:	f7ff ffa5 	bl	800aaec <_Bfree>
 800aba2:	4644      	mov	r4, r8
 800aba4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aba8:	3501      	adds	r5, #1
 800abaa:	615e      	str	r6, [r3, #20]
 800abac:	6125      	str	r5, [r4, #16]
 800abae:	4620      	mov	r0, r4
 800abb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb4:	0800cb4f 	.word	0x0800cb4f
 800abb8:	0800cb60 	.word	0x0800cb60

0800abbc <__hi0bits>:
 800abbc:	0c03      	lsrs	r3, r0, #16
 800abbe:	041b      	lsls	r3, r3, #16
 800abc0:	b9d3      	cbnz	r3, 800abf8 <__hi0bits+0x3c>
 800abc2:	0400      	lsls	r0, r0, #16
 800abc4:	2310      	movs	r3, #16
 800abc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800abca:	bf04      	itt	eq
 800abcc:	0200      	lsleq	r0, r0, #8
 800abce:	3308      	addeq	r3, #8
 800abd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800abd4:	bf04      	itt	eq
 800abd6:	0100      	lsleq	r0, r0, #4
 800abd8:	3304      	addeq	r3, #4
 800abda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800abde:	bf04      	itt	eq
 800abe0:	0080      	lsleq	r0, r0, #2
 800abe2:	3302      	addeq	r3, #2
 800abe4:	2800      	cmp	r0, #0
 800abe6:	db05      	blt.n	800abf4 <__hi0bits+0x38>
 800abe8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800abec:	f103 0301 	add.w	r3, r3, #1
 800abf0:	bf08      	it	eq
 800abf2:	2320      	moveq	r3, #32
 800abf4:	4618      	mov	r0, r3
 800abf6:	4770      	bx	lr
 800abf8:	2300      	movs	r3, #0
 800abfa:	e7e4      	b.n	800abc6 <__hi0bits+0xa>

0800abfc <__lo0bits>:
 800abfc:	6803      	ldr	r3, [r0, #0]
 800abfe:	f013 0207 	ands.w	r2, r3, #7
 800ac02:	4601      	mov	r1, r0
 800ac04:	d00b      	beq.n	800ac1e <__lo0bits+0x22>
 800ac06:	07da      	lsls	r2, r3, #31
 800ac08:	d423      	bmi.n	800ac52 <__lo0bits+0x56>
 800ac0a:	0798      	lsls	r0, r3, #30
 800ac0c:	bf49      	itett	mi
 800ac0e:	085b      	lsrmi	r3, r3, #1
 800ac10:	089b      	lsrpl	r3, r3, #2
 800ac12:	2001      	movmi	r0, #1
 800ac14:	600b      	strmi	r3, [r1, #0]
 800ac16:	bf5c      	itt	pl
 800ac18:	600b      	strpl	r3, [r1, #0]
 800ac1a:	2002      	movpl	r0, #2
 800ac1c:	4770      	bx	lr
 800ac1e:	b298      	uxth	r0, r3
 800ac20:	b9a8      	cbnz	r0, 800ac4e <__lo0bits+0x52>
 800ac22:	0c1b      	lsrs	r3, r3, #16
 800ac24:	2010      	movs	r0, #16
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	b90a      	cbnz	r2, 800ac2e <__lo0bits+0x32>
 800ac2a:	3008      	adds	r0, #8
 800ac2c:	0a1b      	lsrs	r3, r3, #8
 800ac2e:	071a      	lsls	r2, r3, #28
 800ac30:	bf04      	itt	eq
 800ac32:	091b      	lsreq	r3, r3, #4
 800ac34:	3004      	addeq	r0, #4
 800ac36:	079a      	lsls	r2, r3, #30
 800ac38:	bf04      	itt	eq
 800ac3a:	089b      	lsreq	r3, r3, #2
 800ac3c:	3002      	addeq	r0, #2
 800ac3e:	07da      	lsls	r2, r3, #31
 800ac40:	d403      	bmi.n	800ac4a <__lo0bits+0x4e>
 800ac42:	085b      	lsrs	r3, r3, #1
 800ac44:	f100 0001 	add.w	r0, r0, #1
 800ac48:	d005      	beq.n	800ac56 <__lo0bits+0x5a>
 800ac4a:	600b      	str	r3, [r1, #0]
 800ac4c:	4770      	bx	lr
 800ac4e:	4610      	mov	r0, r2
 800ac50:	e7e9      	b.n	800ac26 <__lo0bits+0x2a>
 800ac52:	2000      	movs	r0, #0
 800ac54:	4770      	bx	lr
 800ac56:	2020      	movs	r0, #32
 800ac58:	4770      	bx	lr
	...

0800ac5c <__i2b>:
 800ac5c:	b510      	push	{r4, lr}
 800ac5e:	460c      	mov	r4, r1
 800ac60:	2101      	movs	r1, #1
 800ac62:	f7ff ff03 	bl	800aa6c <_Balloc>
 800ac66:	4602      	mov	r2, r0
 800ac68:	b928      	cbnz	r0, 800ac76 <__i2b+0x1a>
 800ac6a:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <__i2b+0x24>)
 800ac6c:	4805      	ldr	r0, [pc, #20]	; (800ac84 <__i2b+0x28>)
 800ac6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ac72:	f000 fce1 	bl	800b638 <__assert_func>
 800ac76:	2301      	movs	r3, #1
 800ac78:	6144      	str	r4, [r0, #20]
 800ac7a:	6103      	str	r3, [r0, #16]
 800ac7c:	bd10      	pop	{r4, pc}
 800ac7e:	bf00      	nop
 800ac80:	0800cb4f 	.word	0x0800cb4f
 800ac84:	0800cb60 	.word	0x0800cb60

0800ac88 <__multiply>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	4691      	mov	r9, r2
 800ac8e:	690a      	ldr	r2, [r1, #16]
 800ac90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	bfb8      	it	lt
 800ac98:	460b      	movlt	r3, r1
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	bfbc      	itt	lt
 800ac9e:	464c      	movlt	r4, r9
 800aca0:	4699      	movlt	r9, r3
 800aca2:	6927      	ldr	r7, [r4, #16]
 800aca4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aca8:	68a3      	ldr	r3, [r4, #8]
 800acaa:	6861      	ldr	r1, [r4, #4]
 800acac:	eb07 060a 	add.w	r6, r7, sl
 800acb0:	42b3      	cmp	r3, r6
 800acb2:	b085      	sub	sp, #20
 800acb4:	bfb8      	it	lt
 800acb6:	3101      	addlt	r1, #1
 800acb8:	f7ff fed8 	bl	800aa6c <_Balloc>
 800acbc:	b930      	cbnz	r0, 800accc <__multiply+0x44>
 800acbe:	4602      	mov	r2, r0
 800acc0:	4b44      	ldr	r3, [pc, #272]	; (800add4 <__multiply+0x14c>)
 800acc2:	4845      	ldr	r0, [pc, #276]	; (800add8 <__multiply+0x150>)
 800acc4:	f240 115d 	movw	r1, #349	; 0x15d
 800acc8:	f000 fcb6 	bl	800b638 <__assert_func>
 800accc:	f100 0514 	add.w	r5, r0, #20
 800acd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800acd4:	462b      	mov	r3, r5
 800acd6:	2200      	movs	r2, #0
 800acd8:	4543      	cmp	r3, r8
 800acda:	d321      	bcc.n	800ad20 <__multiply+0x98>
 800acdc:	f104 0314 	add.w	r3, r4, #20
 800ace0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ace4:	f109 0314 	add.w	r3, r9, #20
 800ace8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800acec:	9202      	str	r2, [sp, #8]
 800acee:	1b3a      	subs	r2, r7, r4
 800acf0:	3a15      	subs	r2, #21
 800acf2:	f022 0203 	bic.w	r2, r2, #3
 800acf6:	3204      	adds	r2, #4
 800acf8:	f104 0115 	add.w	r1, r4, #21
 800acfc:	428f      	cmp	r7, r1
 800acfe:	bf38      	it	cc
 800ad00:	2204      	movcc	r2, #4
 800ad02:	9201      	str	r2, [sp, #4]
 800ad04:	9a02      	ldr	r2, [sp, #8]
 800ad06:	9303      	str	r3, [sp, #12]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d80c      	bhi.n	800ad26 <__multiply+0x9e>
 800ad0c:	2e00      	cmp	r6, #0
 800ad0e:	dd03      	ble.n	800ad18 <__multiply+0x90>
 800ad10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d05a      	beq.n	800adce <__multiply+0x146>
 800ad18:	6106      	str	r6, [r0, #16]
 800ad1a:	b005      	add	sp, #20
 800ad1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad20:	f843 2b04 	str.w	r2, [r3], #4
 800ad24:	e7d8      	b.n	800acd8 <__multiply+0x50>
 800ad26:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad2a:	f1ba 0f00 	cmp.w	sl, #0
 800ad2e:	d024      	beq.n	800ad7a <__multiply+0xf2>
 800ad30:	f104 0e14 	add.w	lr, r4, #20
 800ad34:	46a9      	mov	r9, r5
 800ad36:	f04f 0c00 	mov.w	ip, #0
 800ad3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ad3e:	f8d9 1000 	ldr.w	r1, [r9]
 800ad42:	fa1f fb82 	uxth.w	fp, r2
 800ad46:	b289      	uxth	r1, r1
 800ad48:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ad50:	f8d9 2000 	ldr.w	r2, [r9]
 800ad54:	4461      	add	r1, ip
 800ad56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad5a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ad5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad62:	b289      	uxth	r1, r1
 800ad64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad68:	4577      	cmp	r7, lr
 800ad6a:	f849 1b04 	str.w	r1, [r9], #4
 800ad6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad72:	d8e2      	bhi.n	800ad3a <__multiply+0xb2>
 800ad74:	9a01      	ldr	r2, [sp, #4]
 800ad76:	f845 c002 	str.w	ip, [r5, r2]
 800ad7a:	9a03      	ldr	r2, [sp, #12]
 800ad7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad80:	3304      	adds	r3, #4
 800ad82:	f1b9 0f00 	cmp.w	r9, #0
 800ad86:	d020      	beq.n	800adca <__multiply+0x142>
 800ad88:	6829      	ldr	r1, [r5, #0]
 800ad8a:	f104 0c14 	add.w	ip, r4, #20
 800ad8e:	46ae      	mov	lr, r5
 800ad90:	f04f 0a00 	mov.w	sl, #0
 800ad94:	f8bc b000 	ldrh.w	fp, [ip]
 800ad98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad9c:	fb09 220b 	mla	r2, r9, fp, r2
 800ada0:	4492      	add	sl, r2
 800ada2:	b289      	uxth	r1, r1
 800ada4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ada8:	f84e 1b04 	str.w	r1, [lr], #4
 800adac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800adb0:	f8be 1000 	ldrh.w	r1, [lr]
 800adb4:	0c12      	lsrs	r2, r2, #16
 800adb6:	fb09 1102 	mla	r1, r9, r2, r1
 800adba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800adbe:	4567      	cmp	r7, ip
 800adc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800adc4:	d8e6      	bhi.n	800ad94 <__multiply+0x10c>
 800adc6:	9a01      	ldr	r2, [sp, #4]
 800adc8:	50a9      	str	r1, [r5, r2]
 800adca:	3504      	adds	r5, #4
 800adcc:	e79a      	b.n	800ad04 <__multiply+0x7c>
 800adce:	3e01      	subs	r6, #1
 800add0:	e79c      	b.n	800ad0c <__multiply+0x84>
 800add2:	bf00      	nop
 800add4:	0800cb4f 	.word	0x0800cb4f
 800add8:	0800cb60 	.word	0x0800cb60

0800addc <__pow5mult>:
 800addc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade0:	4615      	mov	r5, r2
 800ade2:	f012 0203 	ands.w	r2, r2, #3
 800ade6:	4606      	mov	r6, r0
 800ade8:	460f      	mov	r7, r1
 800adea:	d007      	beq.n	800adfc <__pow5mult+0x20>
 800adec:	4c25      	ldr	r4, [pc, #148]	; (800ae84 <__pow5mult+0xa8>)
 800adee:	3a01      	subs	r2, #1
 800adf0:	2300      	movs	r3, #0
 800adf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adf6:	f7ff fe9b 	bl	800ab30 <__multadd>
 800adfa:	4607      	mov	r7, r0
 800adfc:	10ad      	asrs	r5, r5, #2
 800adfe:	d03d      	beq.n	800ae7c <__pow5mult+0xa0>
 800ae00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae02:	b97c      	cbnz	r4, 800ae24 <__pow5mult+0x48>
 800ae04:	2010      	movs	r0, #16
 800ae06:	f7ff fe29 	bl	800aa5c <malloc>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	6270      	str	r0, [r6, #36]	; 0x24
 800ae0e:	b928      	cbnz	r0, 800ae1c <__pow5mult+0x40>
 800ae10:	4b1d      	ldr	r3, [pc, #116]	; (800ae88 <__pow5mult+0xac>)
 800ae12:	481e      	ldr	r0, [pc, #120]	; (800ae8c <__pow5mult+0xb0>)
 800ae14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ae18:	f000 fc0e 	bl	800b638 <__assert_func>
 800ae1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae20:	6004      	str	r4, [r0, #0]
 800ae22:	60c4      	str	r4, [r0, #12]
 800ae24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae2c:	b94c      	cbnz	r4, 800ae42 <__pow5mult+0x66>
 800ae2e:	f240 2171 	movw	r1, #625	; 0x271
 800ae32:	4630      	mov	r0, r6
 800ae34:	f7ff ff12 	bl	800ac5c <__i2b>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae3e:	4604      	mov	r4, r0
 800ae40:	6003      	str	r3, [r0, #0]
 800ae42:	f04f 0900 	mov.w	r9, #0
 800ae46:	07eb      	lsls	r3, r5, #31
 800ae48:	d50a      	bpl.n	800ae60 <__pow5mult+0x84>
 800ae4a:	4639      	mov	r1, r7
 800ae4c:	4622      	mov	r2, r4
 800ae4e:	4630      	mov	r0, r6
 800ae50:	f7ff ff1a 	bl	800ac88 <__multiply>
 800ae54:	4639      	mov	r1, r7
 800ae56:	4680      	mov	r8, r0
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f7ff fe47 	bl	800aaec <_Bfree>
 800ae5e:	4647      	mov	r7, r8
 800ae60:	106d      	asrs	r5, r5, #1
 800ae62:	d00b      	beq.n	800ae7c <__pow5mult+0xa0>
 800ae64:	6820      	ldr	r0, [r4, #0]
 800ae66:	b938      	cbnz	r0, 800ae78 <__pow5mult+0x9c>
 800ae68:	4622      	mov	r2, r4
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f7ff ff0b 	bl	800ac88 <__multiply>
 800ae72:	6020      	str	r0, [r4, #0]
 800ae74:	f8c0 9000 	str.w	r9, [r0]
 800ae78:	4604      	mov	r4, r0
 800ae7a:	e7e4      	b.n	800ae46 <__pow5mult+0x6a>
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae82:	bf00      	nop
 800ae84:	0800ccb0 	.word	0x0800ccb0
 800ae88:	0800cadd 	.word	0x0800cadd
 800ae8c:	0800cb60 	.word	0x0800cb60

0800ae90 <__lshift>:
 800ae90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae94:	460c      	mov	r4, r1
 800ae96:	6849      	ldr	r1, [r1, #4]
 800ae98:	6923      	ldr	r3, [r4, #16]
 800ae9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae9e:	68a3      	ldr	r3, [r4, #8]
 800aea0:	4607      	mov	r7, r0
 800aea2:	4691      	mov	r9, r2
 800aea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aea8:	f108 0601 	add.w	r6, r8, #1
 800aeac:	42b3      	cmp	r3, r6
 800aeae:	db0b      	blt.n	800aec8 <__lshift+0x38>
 800aeb0:	4638      	mov	r0, r7
 800aeb2:	f7ff fddb 	bl	800aa6c <_Balloc>
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	b948      	cbnz	r0, 800aece <__lshift+0x3e>
 800aeba:	4602      	mov	r2, r0
 800aebc:	4b2a      	ldr	r3, [pc, #168]	; (800af68 <__lshift+0xd8>)
 800aebe:	482b      	ldr	r0, [pc, #172]	; (800af6c <__lshift+0xdc>)
 800aec0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aec4:	f000 fbb8 	bl	800b638 <__assert_func>
 800aec8:	3101      	adds	r1, #1
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	e7ee      	b.n	800aeac <__lshift+0x1c>
 800aece:	2300      	movs	r3, #0
 800aed0:	f100 0114 	add.w	r1, r0, #20
 800aed4:	f100 0210 	add.w	r2, r0, #16
 800aed8:	4618      	mov	r0, r3
 800aeda:	4553      	cmp	r3, sl
 800aedc:	db37      	blt.n	800af4e <__lshift+0xbe>
 800aede:	6920      	ldr	r0, [r4, #16]
 800aee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aee4:	f104 0314 	add.w	r3, r4, #20
 800aee8:	f019 091f 	ands.w	r9, r9, #31
 800aeec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aef0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aef4:	d02f      	beq.n	800af56 <__lshift+0xc6>
 800aef6:	f1c9 0e20 	rsb	lr, r9, #32
 800aefa:	468a      	mov	sl, r1
 800aefc:	f04f 0c00 	mov.w	ip, #0
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	fa02 f209 	lsl.w	r2, r2, r9
 800af06:	ea42 020c 	orr.w	r2, r2, ip
 800af0a:	f84a 2b04 	str.w	r2, [sl], #4
 800af0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af12:	4298      	cmp	r0, r3
 800af14:	fa22 fc0e 	lsr.w	ip, r2, lr
 800af18:	d8f2      	bhi.n	800af00 <__lshift+0x70>
 800af1a:	1b03      	subs	r3, r0, r4
 800af1c:	3b15      	subs	r3, #21
 800af1e:	f023 0303 	bic.w	r3, r3, #3
 800af22:	3304      	adds	r3, #4
 800af24:	f104 0215 	add.w	r2, r4, #21
 800af28:	4290      	cmp	r0, r2
 800af2a:	bf38      	it	cc
 800af2c:	2304      	movcc	r3, #4
 800af2e:	f841 c003 	str.w	ip, [r1, r3]
 800af32:	f1bc 0f00 	cmp.w	ip, #0
 800af36:	d001      	beq.n	800af3c <__lshift+0xac>
 800af38:	f108 0602 	add.w	r6, r8, #2
 800af3c:	3e01      	subs	r6, #1
 800af3e:	4638      	mov	r0, r7
 800af40:	612e      	str	r6, [r5, #16]
 800af42:	4621      	mov	r1, r4
 800af44:	f7ff fdd2 	bl	800aaec <_Bfree>
 800af48:	4628      	mov	r0, r5
 800af4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800af52:	3301      	adds	r3, #1
 800af54:	e7c1      	b.n	800aeda <__lshift+0x4a>
 800af56:	3904      	subs	r1, #4
 800af58:	f853 2b04 	ldr.w	r2, [r3], #4
 800af5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800af60:	4298      	cmp	r0, r3
 800af62:	d8f9      	bhi.n	800af58 <__lshift+0xc8>
 800af64:	e7ea      	b.n	800af3c <__lshift+0xac>
 800af66:	bf00      	nop
 800af68:	0800cb4f 	.word	0x0800cb4f
 800af6c:	0800cb60 	.word	0x0800cb60

0800af70 <__mcmp>:
 800af70:	b530      	push	{r4, r5, lr}
 800af72:	6902      	ldr	r2, [r0, #16]
 800af74:	690c      	ldr	r4, [r1, #16]
 800af76:	1b12      	subs	r2, r2, r4
 800af78:	d10e      	bne.n	800af98 <__mcmp+0x28>
 800af7a:	f100 0314 	add.w	r3, r0, #20
 800af7e:	3114      	adds	r1, #20
 800af80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af90:	42a5      	cmp	r5, r4
 800af92:	d003      	beq.n	800af9c <__mcmp+0x2c>
 800af94:	d305      	bcc.n	800afa2 <__mcmp+0x32>
 800af96:	2201      	movs	r2, #1
 800af98:	4610      	mov	r0, r2
 800af9a:	bd30      	pop	{r4, r5, pc}
 800af9c:	4283      	cmp	r3, r0
 800af9e:	d3f3      	bcc.n	800af88 <__mcmp+0x18>
 800afa0:	e7fa      	b.n	800af98 <__mcmp+0x28>
 800afa2:	f04f 32ff 	mov.w	r2, #4294967295
 800afa6:	e7f7      	b.n	800af98 <__mcmp+0x28>

0800afa8 <__mdiff>:
 800afa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	460c      	mov	r4, r1
 800afae:	4606      	mov	r6, r0
 800afb0:	4611      	mov	r1, r2
 800afb2:	4620      	mov	r0, r4
 800afb4:	4690      	mov	r8, r2
 800afb6:	f7ff ffdb 	bl	800af70 <__mcmp>
 800afba:	1e05      	subs	r5, r0, #0
 800afbc:	d110      	bne.n	800afe0 <__mdiff+0x38>
 800afbe:	4629      	mov	r1, r5
 800afc0:	4630      	mov	r0, r6
 800afc2:	f7ff fd53 	bl	800aa6c <_Balloc>
 800afc6:	b930      	cbnz	r0, 800afd6 <__mdiff+0x2e>
 800afc8:	4b3a      	ldr	r3, [pc, #232]	; (800b0b4 <__mdiff+0x10c>)
 800afca:	4602      	mov	r2, r0
 800afcc:	f240 2132 	movw	r1, #562	; 0x232
 800afd0:	4839      	ldr	r0, [pc, #228]	; (800b0b8 <__mdiff+0x110>)
 800afd2:	f000 fb31 	bl	800b638 <__assert_func>
 800afd6:	2301      	movs	r3, #1
 800afd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800afdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe0:	bfa4      	itt	ge
 800afe2:	4643      	movge	r3, r8
 800afe4:	46a0      	movge	r8, r4
 800afe6:	4630      	mov	r0, r6
 800afe8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800afec:	bfa6      	itte	ge
 800afee:	461c      	movge	r4, r3
 800aff0:	2500      	movge	r5, #0
 800aff2:	2501      	movlt	r5, #1
 800aff4:	f7ff fd3a 	bl	800aa6c <_Balloc>
 800aff8:	b920      	cbnz	r0, 800b004 <__mdiff+0x5c>
 800affa:	4b2e      	ldr	r3, [pc, #184]	; (800b0b4 <__mdiff+0x10c>)
 800affc:	4602      	mov	r2, r0
 800affe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b002:	e7e5      	b.n	800afd0 <__mdiff+0x28>
 800b004:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b008:	6926      	ldr	r6, [r4, #16]
 800b00a:	60c5      	str	r5, [r0, #12]
 800b00c:	f104 0914 	add.w	r9, r4, #20
 800b010:	f108 0514 	add.w	r5, r8, #20
 800b014:	f100 0e14 	add.w	lr, r0, #20
 800b018:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b01c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b020:	f108 0210 	add.w	r2, r8, #16
 800b024:	46f2      	mov	sl, lr
 800b026:	2100      	movs	r1, #0
 800b028:	f859 3b04 	ldr.w	r3, [r9], #4
 800b02c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b030:	fa1f f883 	uxth.w	r8, r3
 800b034:	fa11 f18b 	uxtah	r1, r1, fp
 800b038:	0c1b      	lsrs	r3, r3, #16
 800b03a:	eba1 0808 	sub.w	r8, r1, r8
 800b03e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b042:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b046:	fa1f f888 	uxth.w	r8, r8
 800b04a:	1419      	asrs	r1, r3, #16
 800b04c:	454e      	cmp	r6, r9
 800b04e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b052:	f84a 3b04 	str.w	r3, [sl], #4
 800b056:	d8e7      	bhi.n	800b028 <__mdiff+0x80>
 800b058:	1b33      	subs	r3, r6, r4
 800b05a:	3b15      	subs	r3, #21
 800b05c:	f023 0303 	bic.w	r3, r3, #3
 800b060:	3304      	adds	r3, #4
 800b062:	3415      	adds	r4, #21
 800b064:	42a6      	cmp	r6, r4
 800b066:	bf38      	it	cc
 800b068:	2304      	movcc	r3, #4
 800b06a:	441d      	add	r5, r3
 800b06c:	4473      	add	r3, lr
 800b06e:	469e      	mov	lr, r3
 800b070:	462e      	mov	r6, r5
 800b072:	4566      	cmp	r6, ip
 800b074:	d30e      	bcc.n	800b094 <__mdiff+0xec>
 800b076:	f10c 0203 	add.w	r2, ip, #3
 800b07a:	1b52      	subs	r2, r2, r5
 800b07c:	f022 0203 	bic.w	r2, r2, #3
 800b080:	3d03      	subs	r5, #3
 800b082:	45ac      	cmp	ip, r5
 800b084:	bf38      	it	cc
 800b086:	2200      	movcc	r2, #0
 800b088:	441a      	add	r2, r3
 800b08a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b08e:	b17b      	cbz	r3, 800b0b0 <__mdiff+0x108>
 800b090:	6107      	str	r7, [r0, #16]
 800b092:	e7a3      	b.n	800afdc <__mdiff+0x34>
 800b094:	f856 8b04 	ldr.w	r8, [r6], #4
 800b098:	fa11 f288 	uxtah	r2, r1, r8
 800b09c:	1414      	asrs	r4, r2, #16
 800b09e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b0a2:	b292      	uxth	r2, r2
 800b0a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b0a8:	f84e 2b04 	str.w	r2, [lr], #4
 800b0ac:	1421      	asrs	r1, r4, #16
 800b0ae:	e7e0      	b.n	800b072 <__mdiff+0xca>
 800b0b0:	3f01      	subs	r7, #1
 800b0b2:	e7ea      	b.n	800b08a <__mdiff+0xe2>
 800b0b4:	0800cb4f 	.word	0x0800cb4f
 800b0b8:	0800cb60 	.word	0x0800cb60

0800b0bc <__d2b>:
 800b0bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	4689      	mov	r9, r1
 800b0c2:	2101      	movs	r1, #1
 800b0c4:	ec57 6b10 	vmov	r6, r7, d0
 800b0c8:	4690      	mov	r8, r2
 800b0ca:	f7ff fccf 	bl	800aa6c <_Balloc>
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	b930      	cbnz	r0, 800b0e0 <__d2b+0x24>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	4b25      	ldr	r3, [pc, #148]	; (800b16c <__d2b+0xb0>)
 800b0d6:	4826      	ldr	r0, [pc, #152]	; (800b170 <__d2b+0xb4>)
 800b0d8:	f240 310a 	movw	r1, #778	; 0x30a
 800b0dc:	f000 faac 	bl	800b638 <__assert_func>
 800b0e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b0e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b0e8:	bb35      	cbnz	r5, 800b138 <__d2b+0x7c>
 800b0ea:	2e00      	cmp	r6, #0
 800b0ec:	9301      	str	r3, [sp, #4]
 800b0ee:	d028      	beq.n	800b142 <__d2b+0x86>
 800b0f0:	4668      	mov	r0, sp
 800b0f2:	9600      	str	r6, [sp, #0]
 800b0f4:	f7ff fd82 	bl	800abfc <__lo0bits>
 800b0f8:	9900      	ldr	r1, [sp, #0]
 800b0fa:	b300      	cbz	r0, 800b13e <__d2b+0x82>
 800b0fc:	9a01      	ldr	r2, [sp, #4]
 800b0fe:	f1c0 0320 	rsb	r3, r0, #32
 800b102:	fa02 f303 	lsl.w	r3, r2, r3
 800b106:	430b      	orrs	r3, r1
 800b108:	40c2      	lsrs	r2, r0
 800b10a:	6163      	str	r3, [r4, #20]
 800b10c:	9201      	str	r2, [sp, #4]
 800b10e:	9b01      	ldr	r3, [sp, #4]
 800b110:	61a3      	str	r3, [r4, #24]
 800b112:	2b00      	cmp	r3, #0
 800b114:	bf14      	ite	ne
 800b116:	2202      	movne	r2, #2
 800b118:	2201      	moveq	r2, #1
 800b11a:	6122      	str	r2, [r4, #16]
 800b11c:	b1d5      	cbz	r5, 800b154 <__d2b+0x98>
 800b11e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b122:	4405      	add	r5, r0
 800b124:	f8c9 5000 	str.w	r5, [r9]
 800b128:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b12c:	f8c8 0000 	str.w	r0, [r8]
 800b130:	4620      	mov	r0, r4
 800b132:	b003      	add	sp, #12
 800b134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b13c:	e7d5      	b.n	800b0ea <__d2b+0x2e>
 800b13e:	6161      	str	r1, [r4, #20]
 800b140:	e7e5      	b.n	800b10e <__d2b+0x52>
 800b142:	a801      	add	r0, sp, #4
 800b144:	f7ff fd5a 	bl	800abfc <__lo0bits>
 800b148:	9b01      	ldr	r3, [sp, #4]
 800b14a:	6163      	str	r3, [r4, #20]
 800b14c:	2201      	movs	r2, #1
 800b14e:	6122      	str	r2, [r4, #16]
 800b150:	3020      	adds	r0, #32
 800b152:	e7e3      	b.n	800b11c <__d2b+0x60>
 800b154:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b158:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b15c:	f8c9 0000 	str.w	r0, [r9]
 800b160:	6918      	ldr	r0, [r3, #16]
 800b162:	f7ff fd2b 	bl	800abbc <__hi0bits>
 800b166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b16a:	e7df      	b.n	800b12c <__d2b+0x70>
 800b16c:	0800cb4f 	.word	0x0800cb4f
 800b170:	0800cb60 	.word	0x0800cb60

0800b174 <_calloc_r>:
 800b174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b176:	fba1 2402 	umull	r2, r4, r1, r2
 800b17a:	b94c      	cbnz	r4, 800b190 <_calloc_r+0x1c>
 800b17c:	4611      	mov	r1, r2
 800b17e:	9201      	str	r2, [sp, #4]
 800b180:	f000 f87a 	bl	800b278 <_malloc_r>
 800b184:	9a01      	ldr	r2, [sp, #4]
 800b186:	4605      	mov	r5, r0
 800b188:	b930      	cbnz	r0, 800b198 <_calloc_r+0x24>
 800b18a:	4628      	mov	r0, r5
 800b18c:	b003      	add	sp, #12
 800b18e:	bd30      	pop	{r4, r5, pc}
 800b190:	220c      	movs	r2, #12
 800b192:	6002      	str	r2, [r0, #0]
 800b194:	2500      	movs	r5, #0
 800b196:	e7f8      	b.n	800b18a <_calloc_r+0x16>
 800b198:	4621      	mov	r1, r4
 800b19a:	f7fe f94f 	bl	800943c <memset>
 800b19e:	e7f4      	b.n	800b18a <_calloc_r+0x16>

0800b1a0 <_free_r>:
 800b1a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1a2:	2900      	cmp	r1, #0
 800b1a4:	d044      	beq.n	800b230 <_free_r+0x90>
 800b1a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1aa:	9001      	str	r0, [sp, #4]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f1a1 0404 	sub.w	r4, r1, #4
 800b1b2:	bfb8      	it	lt
 800b1b4:	18e4      	addlt	r4, r4, r3
 800b1b6:	f000 fa9b 	bl	800b6f0 <__malloc_lock>
 800b1ba:	4a1e      	ldr	r2, [pc, #120]	; (800b234 <_free_r+0x94>)
 800b1bc:	9801      	ldr	r0, [sp, #4]
 800b1be:	6813      	ldr	r3, [r2, #0]
 800b1c0:	b933      	cbnz	r3, 800b1d0 <_free_r+0x30>
 800b1c2:	6063      	str	r3, [r4, #4]
 800b1c4:	6014      	str	r4, [r2, #0]
 800b1c6:	b003      	add	sp, #12
 800b1c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1cc:	f000 ba96 	b.w	800b6fc <__malloc_unlock>
 800b1d0:	42a3      	cmp	r3, r4
 800b1d2:	d908      	bls.n	800b1e6 <_free_r+0x46>
 800b1d4:	6825      	ldr	r5, [r4, #0]
 800b1d6:	1961      	adds	r1, r4, r5
 800b1d8:	428b      	cmp	r3, r1
 800b1da:	bf01      	itttt	eq
 800b1dc:	6819      	ldreq	r1, [r3, #0]
 800b1de:	685b      	ldreq	r3, [r3, #4]
 800b1e0:	1949      	addeq	r1, r1, r5
 800b1e2:	6021      	streq	r1, [r4, #0]
 800b1e4:	e7ed      	b.n	800b1c2 <_free_r+0x22>
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	b10b      	cbz	r3, 800b1f0 <_free_r+0x50>
 800b1ec:	42a3      	cmp	r3, r4
 800b1ee:	d9fa      	bls.n	800b1e6 <_free_r+0x46>
 800b1f0:	6811      	ldr	r1, [r2, #0]
 800b1f2:	1855      	adds	r5, r2, r1
 800b1f4:	42a5      	cmp	r5, r4
 800b1f6:	d10b      	bne.n	800b210 <_free_r+0x70>
 800b1f8:	6824      	ldr	r4, [r4, #0]
 800b1fa:	4421      	add	r1, r4
 800b1fc:	1854      	adds	r4, r2, r1
 800b1fe:	42a3      	cmp	r3, r4
 800b200:	6011      	str	r1, [r2, #0]
 800b202:	d1e0      	bne.n	800b1c6 <_free_r+0x26>
 800b204:	681c      	ldr	r4, [r3, #0]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	6053      	str	r3, [r2, #4]
 800b20a:	4421      	add	r1, r4
 800b20c:	6011      	str	r1, [r2, #0]
 800b20e:	e7da      	b.n	800b1c6 <_free_r+0x26>
 800b210:	d902      	bls.n	800b218 <_free_r+0x78>
 800b212:	230c      	movs	r3, #12
 800b214:	6003      	str	r3, [r0, #0]
 800b216:	e7d6      	b.n	800b1c6 <_free_r+0x26>
 800b218:	6825      	ldr	r5, [r4, #0]
 800b21a:	1961      	adds	r1, r4, r5
 800b21c:	428b      	cmp	r3, r1
 800b21e:	bf04      	itt	eq
 800b220:	6819      	ldreq	r1, [r3, #0]
 800b222:	685b      	ldreq	r3, [r3, #4]
 800b224:	6063      	str	r3, [r4, #4]
 800b226:	bf04      	itt	eq
 800b228:	1949      	addeq	r1, r1, r5
 800b22a:	6021      	streq	r1, [r4, #0]
 800b22c:	6054      	str	r4, [r2, #4]
 800b22e:	e7ca      	b.n	800b1c6 <_free_r+0x26>
 800b230:	b003      	add	sp, #12
 800b232:	bd30      	pop	{r4, r5, pc}
 800b234:	200008f4 	.word	0x200008f4

0800b238 <sbrk_aligned>:
 800b238:	b570      	push	{r4, r5, r6, lr}
 800b23a:	4e0e      	ldr	r6, [pc, #56]	; (800b274 <sbrk_aligned+0x3c>)
 800b23c:	460c      	mov	r4, r1
 800b23e:	6831      	ldr	r1, [r6, #0]
 800b240:	4605      	mov	r5, r0
 800b242:	b911      	cbnz	r1, 800b24a <sbrk_aligned+0x12>
 800b244:	f000 f9e8 	bl	800b618 <_sbrk_r>
 800b248:	6030      	str	r0, [r6, #0]
 800b24a:	4621      	mov	r1, r4
 800b24c:	4628      	mov	r0, r5
 800b24e:	f000 f9e3 	bl	800b618 <_sbrk_r>
 800b252:	1c43      	adds	r3, r0, #1
 800b254:	d00a      	beq.n	800b26c <sbrk_aligned+0x34>
 800b256:	1cc4      	adds	r4, r0, #3
 800b258:	f024 0403 	bic.w	r4, r4, #3
 800b25c:	42a0      	cmp	r0, r4
 800b25e:	d007      	beq.n	800b270 <sbrk_aligned+0x38>
 800b260:	1a21      	subs	r1, r4, r0
 800b262:	4628      	mov	r0, r5
 800b264:	f000 f9d8 	bl	800b618 <_sbrk_r>
 800b268:	3001      	adds	r0, #1
 800b26a:	d101      	bne.n	800b270 <sbrk_aligned+0x38>
 800b26c:	f04f 34ff 	mov.w	r4, #4294967295
 800b270:	4620      	mov	r0, r4
 800b272:	bd70      	pop	{r4, r5, r6, pc}
 800b274:	200008f8 	.word	0x200008f8

0800b278 <_malloc_r>:
 800b278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b27c:	1ccd      	adds	r5, r1, #3
 800b27e:	f025 0503 	bic.w	r5, r5, #3
 800b282:	3508      	adds	r5, #8
 800b284:	2d0c      	cmp	r5, #12
 800b286:	bf38      	it	cc
 800b288:	250c      	movcc	r5, #12
 800b28a:	2d00      	cmp	r5, #0
 800b28c:	4607      	mov	r7, r0
 800b28e:	db01      	blt.n	800b294 <_malloc_r+0x1c>
 800b290:	42a9      	cmp	r1, r5
 800b292:	d905      	bls.n	800b2a0 <_malloc_r+0x28>
 800b294:	230c      	movs	r3, #12
 800b296:	603b      	str	r3, [r7, #0]
 800b298:	2600      	movs	r6, #0
 800b29a:	4630      	mov	r0, r6
 800b29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2a0:	4e2e      	ldr	r6, [pc, #184]	; (800b35c <_malloc_r+0xe4>)
 800b2a2:	f000 fa25 	bl	800b6f0 <__malloc_lock>
 800b2a6:	6833      	ldr	r3, [r6, #0]
 800b2a8:	461c      	mov	r4, r3
 800b2aa:	bb34      	cbnz	r4, 800b2fa <_malloc_r+0x82>
 800b2ac:	4629      	mov	r1, r5
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	f7ff ffc2 	bl	800b238 <sbrk_aligned>
 800b2b4:	1c43      	adds	r3, r0, #1
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	d14d      	bne.n	800b356 <_malloc_r+0xde>
 800b2ba:	6834      	ldr	r4, [r6, #0]
 800b2bc:	4626      	mov	r6, r4
 800b2be:	2e00      	cmp	r6, #0
 800b2c0:	d140      	bne.n	800b344 <_malloc_r+0xcc>
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	4631      	mov	r1, r6
 800b2c6:	4638      	mov	r0, r7
 800b2c8:	eb04 0803 	add.w	r8, r4, r3
 800b2cc:	f000 f9a4 	bl	800b618 <_sbrk_r>
 800b2d0:	4580      	cmp	r8, r0
 800b2d2:	d13a      	bne.n	800b34a <_malloc_r+0xd2>
 800b2d4:	6821      	ldr	r1, [r4, #0]
 800b2d6:	3503      	adds	r5, #3
 800b2d8:	1a6d      	subs	r5, r5, r1
 800b2da:	f025 0503 	bic.w	r5, r5, #3
 800b2de:	3508      	adds	r5, #8
 800b2e0:	2d0c      	cmp	r5, #12
 800b2e2:	bf38      	it	cc
 800b2e4:	250c      	movcc	r5, #12
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	f7ff ffa5 	bl	800b238 <sbrk_aligned>
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	d02b      	beq.n	800b34a <_malloc_r+0xd2>
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	442b      	add	r3, r5
 800b2f6:	6023      	str	r3, [r4, #0]
 800b2f8:	e00e      	b.n	800b318 <_malloc_r+0xa0>
 800b2fa:	6822      	ldr	r2, [r4, #0]
 800b2fc:	1b52      	subs	r2, r2, r5
 800b2fe:	d41e      	bmi.n	800b33e <_malloc_r+0xc6>
 800b300:	2a0b      	cmp	r2, #11
 800b302:	d916      	bls.n	800b332 <_malloc_r+0xba>
 800b304:	1961      	adds	r1, r4, r5
 800b306:	42a3      	cmp	r3, r4
 800b308:	6025      	str	r5, [r4, #0]
 800b30a:	bf18      	it	ne
 800b30c:	6059      	strne	r1, [r3, #4]
 800b30e:	6863      	ldr	r3, [r4, #4]
 800b310:	bf08      	it	eq
 800b312:	6031      	streq	r1, [r6, #0]
 800b314:	5162      	str	r2, [r4, r5]
 800b316:	604b      	str	r3, [r1, #4]
 800b318:	4638      	mov	r0, r7
 800b31a:	f104 060b 	add.w	r6, r4, #11
 800b31e:	f000 f9ed 	bl	800b6fc <__malloc_unlock>
 800b322:	f026 0607 	bic.w	r6, r6, #7
 800b326:	1d23      	adds	r3, r4, #4
 800b328:	1af2      	subs	r2, r6, r3
 800b32a:	d0b6      	beq.n	800b29a <_malloc_r+0x22>
 800b32c:	1b9b      	subs	r3, r3, r6
 800b32e:	50a3      	str	r3, [r4, r2]
 800b330:	e7b3      	b.n	800b29a <_malloc_r+0x22>
 800b332:	6862      	ldr	r2, [r4, #4]
 800b334:	42a3      	cmp	r3, r4
 800b336:	bf0c      	ite	eq
 800b338:	6032      	streq	r2, [r6, #0]
 800b33a:	605a      	strne	r2, [r3, #4]
 800b33c:	e7ec      	b.n	800b318 <_malloc_r+0xa0>
 800b33e:	4623      	mov	r3, r4
 800b340:	6864      	ldr	r4, [r4, #4]
 800b342:	e7b2      	b.n	800b2aa <_malloc_r+0x32>
 800b344:	4634      	mov	r4, r6
 800b346:	6876      	ldr	r6, [r6, #4]
 800b348:	e7b9      	b.n	800b2be <_malloc_r+0x46>
 800b34a:	230c      	movs	r3, #12
 800b34c:	603b      	str	r3, [r7, #0]
 800b34e:	4638      	mov	r0, r7
 800b350:	f000 f9d4 	bl	800b6fc <__malloc_unlock>
 800b354:	e7a1      	b.n	800b29a <_malloc_r+0x22>
 800b356:	6025      	str	r5, [r4, #0]
 800b358:	e7de      	b.n	800b318 <_malloc_r+0xa0>
 800b35a:	bf00      	nop
 800b35c:	200008f4 	.word	0x200008f4

0800b360 <__ssputs_r>:
 800b360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b364:	688e      	ldr	r6, [r1, #8]
 800b366:	429e      	cmp	r6, r3
 800b368:	4682      	mov	sl, r0
 800b36a:	460c      	mov	r4, r1
 800b36c:	4690      	mov	r8, r2
 800b36e:	461f      	mov	r7, r3
 800b370:	d838      	bhi.n	800b3e4 <__ssputs_r+0x84>
 800b372:	898a      	ldrh	r2, [r1, #12]
 800b374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b378:	d032      	beq.n	800b3e0 <__ssputs_r+0x80>
 800b37a:	6825      	ldr	r5, [r4, #0]
 800b37c:	6909      	ldr	r1, [r1, #16]
 800b37e:	eba5 0901 	sub.w	r9, r5, r1
 800b382:	6965      	ldr	r5, [r4, #20]
 800b384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b38c:	3301      	adds	r3, #1
 800b38e:	444b      	add	r3, r9
 800b390:	106d      	asrs	r5, r5, #1
 800b392:	429d      	cmp	r5, r3
 800b394:	bf38      	it	cc
 800b396:	461d      	movcc	r5, r3
 800b398:	0553      	lsls	r3, r2, #21
 800b39a:	d531      	bpl.n	800b400 <__ssputs_r+0xa0>
 800b39c:	4629      	mov	r1, r5
 800b39e:	f7ff ff6b 	bl	800b278 <_malloc_r>
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	b950      	cbnz	r0, 800b3bc <__ssputs_r+0x5c>
 800b3a6:	230c      	movs	r3, #12
 800b3a8:	f8ca 3000 	str.w	r3, [sl]
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3b2:	81a3      	strh	r3, [r4, #12]
 800b3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3bc:	6921      	ldr	r1, [r4, #16]
 800b3be:	464a      	mov	r2, r9
 800b3c0:	f7fe f82e 	bl	8009420 <memcpy>
 800b3c4:	89a3      	ldrh	r3, [r4, #12]
 800b3c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ce:	81a3      	strh	r3, [r4, #12]
 800b3d0:	6126      	str	r6, [r4, #16]
 800b3d2:	6165      	str	r5, [r4, #20]
 800b3d4:	444e      	add	r6, r9
 800b3d6:	eba5 0509 	sub.w	r5, r5, r9
 800b3da:	6026      	str	r6, [r4, #0]
 800b3dc:	60a5      	str	r5, [r4, #8]
 800b3de:	463e      	mov	r6, r7
 800b3e0:	42be      	cmp	r6, r7
 800b3e2:	d900      	bls.n	800b3e6 <__ssputs_r+0x86>
 800b3e4:	463e      	mov	r6, r7
 800b3e6:	6820      	ldr	r0, [r4, #0]
 800b3e8:	4632      	mov	r2, r6
 800b3ea:	4641      	mov	r1, r8
 800b3ec:	f000 f966 	bl	800b6bc <memmove>
 800b3f0:	68a3      	ldr	r3, [r4, #8]
 800b3f2:	1b9b      	subs	r3, r3, r6
 800b3f4:	60a3      	str	r3, [r4, #8]
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	4433      	add	r3, r6
 800b3fa:	6023      	str	r3, [r4, #0]
 800b3fc:	2000      	movs	r0, #0
 800b3fe:	e7db      	b.n	800b3b8 <__ssputs_r+0x58>
 800b400:	462a      	mov	r2, r5
 800b402:	f000 f981 	bl	800b708 <_realloc_r>
 800b406:	4606      	mov	r6, r0
 800b408:	2800      	cmp	r0, #0
 800b40a:	d1e1      	bne.n	800b3d0 <__ssputs_r+0x70>
 800b40c:	6921      	ldr	r1, [r4, #16]
 800b40e:	4650      	mov	r0, sl
 800b410:	f7ff fec6 	bl	800b1a0 <_free_r>
 800b414:	e7c7      	b.n	800b3a6 <__ssputs_r+0x46>
	...

0800b418 <_svfiprintf_r>:
 800b418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41c:	4698      	mov	r8, r3
 800b41e:	898b      	ldrh	r3, [r1, #12]
 800b420:	061b      	lsls	r3, r3, #24
 800b422:	b09d      	sub	sp, #116	; 0x74
 800b424:	4607      	mov	r7, r0
 800b426:	460d      	mov	r5, r1
 800b428:	4614      	mov	r4, r2
 800b42a:	d50e      	bpl.n	800b44a <_svfiprintf_r+0x32>
 800b42c:	690b      	ldr	r3, [r1, #16]
 800b42e:	b963      	cbnz	r3, 800b44a <_svfiprintf_r+0x32>
 800b430:	2140      	movs	r1, #64	; 0x40
 800b432:	f7ff ff21 	bl	800b278 <_malloc_r>
 800b436:	6028      	str	r0, [r5, #0]
 800b438:	6128      	str	r0, [r5, #16]
 800b43a:	b920      	cbnz	r0, 800b446 <_svfiprintf_r+0x2e>
 800b43c:	230c      	movs	r3, #12
 800b43e:	603b      	str	r3, [r7, #0]
 800b440:	f04f 30ff 	mov.w	r0, #4294967295
 800b444:	e0d1      	b.n	800b5ea <_svfiprintf_r+0x1d2>
 800b446:	2340      	movs	r3, #64	; 0x40
 800b448:	616b      	str	r3, [r5, #20]
 800b44a:	2300      	movs	r3, #0
 800b44c:	9309      	str	r3, [sp, #36]	; 0x24
 800b44e:	2320      	movs	r3, #32
 800b450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b454:	f8cd 800c 	str.w	r8, [sp, #12]
 800b458:	2330      	movs	r3, #48	; 0x30
 800b45a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b604 <_svfiprintf_r+0x1ec>
 800b45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b462:	f04f 0901 	mov.w	r9, #1
 800b466:	4623      	mov	r3, r4
 800b468:	469a      	mov	sl, r3
 800b46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b46e:	b10a      	cbz	r2, 800b474 <_svfiprintf_r+0x5c>
 800b470:	2a25      	cmp	r2, #37	; 0x25
 800b472:	d1f9      	bne.n	800b468 <_svfiprintf_r+0x50>
 800b474:	ebba 0b04 	subs.w	fp, sl, r4
 800b478:	d00b      	beq.n	800b492 <_svfiprintf_r+0x7a>
 800b47a:	465b      	mov	r3, fp
 800b47c:	4622      	mov	r2, r4
 800b47e:	4629      	mov	r1, r5
 800b480:	4638      	mov	r0, r7
 800b482:	f7ff ff6d 	bl	800b360 <__ssputs_r>
 800b486:	3001      	adds	r0, #1
 800b488:	f000 80aa 	beq.w	800b5e0 <_svfiprintf_r+0x1c8>
 800b48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b48e:	445a      	add	r2, fp
 800b490:	9209      	str	r2, [sp, #36]	; 0x24
 800b492:	f89a 3000 	ldrb.w	r3, [sl]
 800b496:	2b00      	cmp	r3, #0
 800b498:	f000 80a2 	beq.w	800b5e0 <_svfiprintf_r+0x1c8>
 800b49c:	2300      	movs	r3, #0
 800b49e:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a6:	f10a 0a01 	add.w	sl, sl, #1
 800b4aa:	9304      	str	r3, [sp, #16]
 800b4ac:	9307      	str	r3, [sp, #28]
 800b4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4b2:	931a      	str	r3, [sp, #104]	; 0x68
 800b4b4:	4654      	mov	r4, sl
 800b4b6:	2205      	movs	r2, #5
 800b4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4bc:	4851      	ldr	r0, [pc, #324]	; (800b604 <_svfiprintf_r+0x1ec>)
 800b4be:	f7f4 fe97 	bl	80001f0 <memchr>
 800b4c2:	9a04      	ldr	r2, [sp, #16]
 800b4c4:	b9d8      	cbnz	r0, 800b4fe <_svfiprintf_r+0xe6>
 800b4c6:	06d0      	lsls	r0, r2, #27
 800b4c8:	bf44      	itt	mi
 800b4ca:	2320      	movmi	r3, #32
 800b4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4d0:	0711      	lsls	r1, r2, #28
 800b4d2:	bf44      	itt	mi
 800b4d4:	232b      	movmi	r3, #43	; 0x2b
 800b4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4da:	f89a 3000 	ldrb.w	r3, [sl]
 800b4de:	2b2a      	cmp	r3, #42	; 0x2a
 800b4e0:	d015      	beq.n	800b50e <_svfiprintf_r+0xf6>
 800b4e2:	9a07      	ldr	r2, [sp, #28]
 800b4e4:	4654      	mov	r4, sl
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	f04f 0c0a 	mov.w	ip, #10
 800b4ec:	4621      	mov	r1, r4
 800b4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4f2:	3b30      	subs	r3, #48	; 0x30
 800b4f4:	2b09      	cmp	r3, #9
 800b4f6:	d94e      	bls.n	800b596 <_svfiprintf_r+0x17e>
 800b4f8:	b1b0      	cbz	r0, 800b528 <_svfiprintf_r+0x110>
 800b4fa:	9207      	str	r2, [sp, #28]
 800b4fc:	e014      	b.n	800b528 <_svfiprintf_r+0x110>
 800b4fe:	eba0 0308 	sub.w	r3, r0, r8
 800b502:	fa09 f303 	lsl.w	r3, r9, r3
 800b506:	4313      	orrs	r3, r2
 800b508:	9304      	str	r3, [sp, #16]
 800b50a:	46a2      	mov	sl, r4
 800b50c:	e7d2      	b.n	800b4b4 <_svfiprintf_r+0x9c>
 800b50e:	9b03      	ldr	r3, [sp, #12]
 800b510:	1d19      	adds	r1, r3, #4
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	9103      	str	r1, [sp, #12]
 800b516:	2b00      	cmp	r3, #0
 800b518:	bfbb      	ittet	lt
 800b51a:	425b      	neglt	r3, r3
 800b51c:	f042 0202 	orrlt.w	r2, r2, #2
 800b520:	9307      	strge	r3, [sp, #28]
 800b522:	9307      	strlt	r3, [sp, #28]
 800b524:	bfb8      	it	lt
 800b526:	9204      	strlt	r2, [sp, #16]
 800b528:	7823      	ldrb	r3, [r4, #0]
 800b52a:	2b2e      	cmp	r3, #46	; 0x2e
 800b52c:	d10c      	bne.n	800b548 <_svfiprintf_r+0x130>
 800b52e:	7863      	ldrb	r3, [r4, #1]
 800b530:	2b2a      	cmp	r3, #42	; 0x2a
 800b532:	d135      	bne.n	800b5a0 <_svfiprintf_r+0x188>
 800b534:	9b03      	ldr	r3, [sp, #12]
 800b536:	1d1a      	adds	r2, r3, #4
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	9203      	str	r2, [sp, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	bfb8      	it	lt
 800b540:	f04f 33ff 	movlt.w	r3, #4294967295
 800b544:	3402      	adds	r4, #2
 800b546:	9305      	str	r3, [sp, #20]
 800b548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b614 <_svfiprintf_r+0x1fc>
 800b54c:	7821      	ldrb	r1, [r4, #0]
 800b54e:	2203      	movs	r2, #3
 800b550:	4650      	mov	r0, sl
 800b552:	f7f4 fe4d 	bl	80001f0 <memchr>
 800b556:	b140      	cbz	r0, 800b56a <_svfiprintf_r+0x152>
 800b558:	2340      	movs	r3, #64	; 0x40
 800b55a:	eba0 000a 	sub.w	r0, r0, sl
 800b55e:	fa03 f000 	lsl.w	r0, r3, r0
 800b562:	9b04      	ldr	r3, [sp, #16]
 800b564:	4303      	orrs	r3, r0
 800b566:	3401      	adds	r4, #1
 800b568:	9304      	str	r3, [sp, #16]
 800b56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56e:	4826      	ldr	r0, [pc, #152]	; (800b608 <_svfiprintf_r+0x1f0>)
 800b570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b574:	2206      	movs	r2, #6
 800b576:	f7f4 fe3b 	bl	80001f0 <memchr>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d038      	beq.n	800b5f0 <_svfiprintf_r+0x1d8>
 800b57e:	4b23      	ldr	r3, [pc, #140]	; (800b60c <_svfiprintf_r+0x1f4>)
 800b580:	bb1b      	cbnz	r3, 800b5ca <_svfiprintf_r+0x1b2>
 800b582:	9b03      	ldr	r3, [sp, #12]
 800b584:	3307      	adds	r3, #7
 800b586:	f023 0307 	bic.w	r3, r3, #7
 800b58a:	3308      	adds	r3, #8
 800b58c:	9303      	str	r3, [sp, #12]
 800b58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b590:	4433      	add	r3, r6
 800b592:	9309      	str	r3, [sp, #36]	; 0x24
 800b594:	e767      	b.n	800b466 <_svfiprintf_r+0x4e>
 800b596:	fb0c 3202 	mla	r2, ip, r2, r3
 800b59a:	460c      	mov	r4, r1
 800b59c:	2001      	movs	r0, #1
 800b59e:	e7a5      	b.n	800b4ec <_svfiprintf_r+0xd4>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	3401      	adds	r4, #1
 800b5a4:	9305      	str	r3, [sp, #20]
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	f04f 0c0a 	mov.w	ip, #10
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5b2:	3a30      	subs	r2, #48	; 0x30
 800b5b4:	2a09      	cmp	r2, #9
 800b5b6:	d903      	bls.n	800b5c0 <_svfiprintf_r+0x1a8>
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d0c5      	beq.n	800b548 <_svfiprintf_r+0x130>
 800b5bc:	9105      	str	r1, [sp, #20]
 800b5be:	e7c3      	b.n	800b548 <_svfiprintf_r+0x130>
 800b5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e7f0      	b.n	800b5ac <_svfiprintf_r+0x194>
 800b5ca:	ab03      	add	r3, sp, #12
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	462a      	mov	r2, r5
 800b5d0:	4b0f      	ldr	r3, [pc, #60]	; (800b610 <_svfiprintf_r+0x1f8>)
 800b5d2:	a904      	add	r1, sp, #16
 800b5d4:	4638      	mov	r0, r7
 800b5d6:	f7fd ffd9 	bl	800958c <_printf_float>
 800b5da:	1c42      	adds	r2, r0, #1
 800b5dc:	4606      	mov	r6, r0
 800b5de:	d1d6      	bne.n	800b58e <_svfiprintf_r+0x176>
 800b5e0:	89ab      	ldrh	r3, [r5, #12]
 800b5e2:	065b      	lsls	r3, r3, #25
 800b5e4:	f53f af2c 	bmi.w	800b440 <_svfiprintf_r+0x28>
 800b5e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5ea:	b01d      	add	sp, #116	; 0x74
 800b5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f0:	ab03      	add	r3, sp, #12
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	462a      	mov	r2, r5
 800b5f6:	4b06      	ldr	r3, [pc, #24]	; (800b610 <_svfiprintf_r+0x1f8>)
 800b5f8:	a904      	add	r1, sp, #16
 800b5fa:	4638      	mov	r0, r7
 800b5fc:	f7fe fa6a 	bl	8009ad4 <_printf_i>
 800b600:	e7eb      	b.n	800b5da <_svfiprintf_r+0x1c2>
 800b602:	bf00      	nop
 800b604:	0800ccbc 	.word	0x0800ccbc
 800b608:	0800ccc6 	.word	0x0800ccc6
 800b60c:	0800958d 	.word	0x0800958d
 800b610:	0800b361 	.word	0x0800b361
 800b614:	0800ccc2 	.word	0x0800ccc2

0800b618 <_sbrk_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4d06      	ldr	r5, [pc, #24]	; (800b634 <_sbrk_r+0x1c>)
 800b61c:	2300      	movs	r3, #0
 800b61e:	4604      	mov	r4, r0
 800b620:	4608      	mov	r0, r1
 800b622:	602b      	str	r3, [r5, #0]
 800b624:	f7f6 fbae 	bl	8001d84 <_sbrk>
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d102      	bne.n	800b632 <_sbrk_r+0x1a>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	b103      	cbz	r3, 800b632 <_sbrk_r+0x1a>
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	200008fc 	.word	0x200008fc

0800b638 <__assert_func>:
 800b638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b63a:	4614      	mov	r4, r2
 800b63c:	461a      	mov	r2, r3
 800b63e:	4b09      	ldr	r3, [pc, #36]	; (800b664 <__assert_func+0x2c>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4605      	mov	r5, r0
 800b644:	68d8      	ldr	r0, [r3, #12]
 800b646:	b14c      	cbz	r4, 800b65c <__assert_func+0x24>
 800b648:	4b07      	ldr	r3, [pc, #28]	; (800b668 <__assert_func+0x30>)
 800b64a:	9100      	str	r1, [sp, #0]
 800b64c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b650:	4906      	ldr	r1, [pc, #24]	; (800b66c <__assert_func+0x34>)
 800b652:	462b      	mov	r3, r5
 800b654:	f000 f80e 	bl	800b674 <fiprintf>
 800b658:	f000 faac 	bl	800bbb4 <abort>
 800b65c:	4b04      	ldr	r3, [pc, #16]	; (800b670 <__assert_func+0x38>)
 800b65e:	461c      	mov	r4, r3
 800b660:	e7f3      	b.n	800b64a <__assert_func+0x12>
 800b662:	bf00      	nop
 800b664:	20000014 	.word	0x20000014
 800b668:	0800cccd 	.word	0x0800cccd
 800b66c:	0800ccda 	.word	0x0800ccda
 800b670:	0800cd08 	.word	0x0800cd08

0800b674 <fiprintf>:
 800b674:	b40e      	push	{r1, r2, r3}
 800b676:	b503      	push	{r0, r1, lr}
 800b678:	4601      	mov	r1, r0
 800b67a:	ab03      	add	r3, sp, #12
 800b67c:	4805      	ldr	r0, [pc, #20]	; (800b694 <fiprintf+0x20>)
 800b67e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b682:	6800      	ldr	r0, [r0, #0]
 800b684:	9301      	str	r3, [sp, #4]
 800b686:	f000 f897 	bl	800b7b8 <_vfiprintf_r>
 800b68a:	b002      	add	sp, #8
 800b68c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b690:	b003      	add	sp, #12
 800b692:	4770      	bx	lr
 800b694:	20000014 	.word	0x20000014

0800b698 <__ascii_mbtowc>:
 800b698:	b082      	sub	sp, #8
 800b69a:	b901      	cbnz	r1, 800b69e <__ascii_mbtowc+0x6>
 800b69c:	a901      	add	r1, sp, #4
 800b69e:	b142      	cbz	r2, 800b6b2 <__ascii_mbtowc+0x1a>
 800b6a0:	b14b      	cbz	r3, 800b6b6 <__ascii_mbtowc+0x1e>
 800b6a2:	7813      	ldrb	r3, [r2, #0]
 800b6a4:	600b      	str	r3, [r1, #0]
 800b6a6:	7812      	ldrb	r2, [r2, #0]
 800b6a8:	1e10      	subs	r0, r2, #0
 800b6aa:	bf18      	it	ne
 800b6ac:	2001      	movne	r0, #1
 800b6ae:	b002      	add	sp, #8
 800b6b0:	4770      	bx	lr
 800b6b2:	4610      	mov	r0, r2
 800b6b4:	e7fb      	b.n	800b6ae <__ascii_mbtowc+0x16>
 800b6b6:	f06f 0001 	mvn.w	r0, #1
 800b6ba:	e7f8      	b.n	800b6ae <__ascii_mbtowc+0x16>

0800b6bc <memmove>:
 800b6bc:	4288      	cmp	r0, r1
 800b6be:	b510      	push	{r4, lr}
 800b6c0:	eb01 0402 	add.w	r4, r1, r2
 800b6c4:	d902      	bls.n	800b6cc <memmove+0x10>
 800b6c6:	4284      	cmp	r4, r0
 800b6c8:	4623      	mov	r3, r4
 800b6ca:	d807      	bhi.n	800b6dc <memmove+0x20>
 800b6cc:	1e43      	subs	r3, r0, #1
 800b6ce:	42a1      	cmp	r1, r4
 800b6d0:	d008      	beq.n	800b6e4 <memmove+0x28>
 800b6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6da:	e7f8      	b.n	800b6ce <memmove+0x12>
 800b6dc:	4402      	add	r2, r0
 800b6de:	4601      	mov	r1, r0
 800b6e0:	428a      	cmp	r2, r1
 800b6e2:	d100      	bne.n	800b6e6 <memmove+0x2a>
 800b6e4:	bd10      	pop	{r4, pc}
 800b6e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6ee:	e7f7      	b.n	800b6e0 <memmove+0x24>

0800b6f0 <__malloc_lock>:
 800b6f0:	4801      	ldr	r0, [pc, #4]	; (800b6f8 <__malloc_lock+0x8>)
 800b6f2:	f000 bc1f 	b.w	800bf34 <__retarget_lock_acquire_recursive>
 800b6f6:	bf00      	nop
 800b6f8:	20000900 	.word	0x20000900

0800b6fc <__malloc_unlock>:
 800b6fc:	4801      	ldr	r0, [pc, #4]	; (800b704 <__malloc_unlock+0x8>)
 800b6fe:	f000 bc1a 	b.w	800bf36 <__retarget_lock_release_recursive>
 800b702:	bf00      	nop
 800b704:	20000900 	.word	0x20000900

0800b708 <_realloc_r>:
 800b708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b70c:	4680      	mov	r8, r0
 800b70e:	4614      	mov	r4, r2
 800b710:	460e      	mov	r6, r1
 800b712:	b921      	cbnz	r1, 800b71e <_realloc_r+0x16>
 800b714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b718:	4611      	mov	r1, r2
 800b71a:	f7ff bdad 	b.w	800b278 <_malloc_r>
 800b71e:	b92a      	cbnz	r2, 800b72c <_realloc_r+0x24>
 800b720:	f7ff fd3e 	bl	800b1a0 <_free_r>
 800b724:	4625      	mov	r5, r4
 800b726:	4628      	mov	r0, r5
 800b728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b72c:	f000 fc6a 	bl	800c004 <_malloc_usable_size_r>
 800b730:	4284      	cmp	r4, r0
 800b732:	4607      	mov	r7, r0
 800b734:	d802      	bhi.n	800b73c <_realloc_r+0x34>
 800b736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b73a:	d812      	bhi.n	800b762 <_realloc_r+0x5a>
 800b73c:	4621      	mov	r1, r4
 800b73e:	4640      	mov	r0, r8
 800b740:	f7ff fd9a 	bl	800b278 <_malloc_r>
 800b744:	4605      	mov	r5, r0
 800b746:	2800      	cmp	r0, #0
 800b748:	d0ed      	beq.n	800b726 <_realloc_r+0x1e>
 800b74a:	42bc      	cmp	r4, r7
 800b74c:	4622      	mov	r2, r4
 800b74e:	4631      	mov	r1, r6
 800b750:	bf28      	it	cs
 800b752:	463a      	movcs	r2, r7
 800b754:	f7fd fe64 	bl	8009420 <memcpy>
 800b758:	4631      	mov	r1, r6
 800b75a:	4640      	mov	r0, r8
 800b75c:	f7ff fd20 	bl	800b1a0 <_free_r>
 800b760:	e7e1      	b.n	800b726 <_realloc_r+0x1e>
 800b762:	4635      	mov	r5, r6
 800b764:	e7df      	b.n	800b726 <_realloc_r+0x1e>

0800b766 <__sfputc_r>:
 800b766:	6893      	ldr	r3, [r2, #8]
 800b768:	3b01      	subs	r3, #1
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	b410      	push	{r4}
 800b76e:	6093      	str	r3, [r2, #8]
 800b770:	da08      	bge.n	800b784 <__sfputc_r+0x1e>
 800b772:	6994      	ldr	r4, [r2, #24]
 800b774:	42a3      	cmp	r3, r4
 800b776:	db01      	blt.n	800b77c <__sfputc_r+0x16>
 800b778:	290a      	cmp	r1, #10
 800b77a:	d103      	bne.n	800b784 <__sfputc_r+0x1e>
 800b77c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b780:	f000 b94a 	b.w	800ba18 <__swbuf_r>
 800b784:	6813      	ldr	r3, [r2, #0]
 800b786:	1c58      	adds	r0, r3, #1
 800b788:	6010      	str	r0, [r2, #0]
 800b78a:	7019      	strb	r1, [r3, #0]
 800b78c:	4608      	mov	r0, r1
 800b78e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <__sfputs_r>:
 800b794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b796:	4606      	mov	r6, r0
 800b798:	460f      	mov	r7, r1
 800b79a:	4614      	mov	r4, r2
 800b79c:	18d5      	adds	r5, r2, r3
 800b79e:	42ac      	cmp	r4, r5
 800b7a0:	d101      	bne.n	800b7a6 <__sfputs_r+0x12>
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	e007      	b.n	800b7b6 <__sfputs_r+0x22>
 800b7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7aa:	463a      	mov	r2, r7
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f7ff ffda 	bl	800b766 <__sfputc_r>
 800b7b2:	1c43      	adds	r3, r0, #1
 800b7b4:	d1f3      	bne.n	800b79e <__sfputs_r+0xa>
 800b7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b7b8 <_vfiprintf_r>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	460d      	mov	r5, r1
 800b7be:	b09d      	sub	sp, #116	; 0x74
 800b7c0:	4614      	mov	r4, r2
 800b7c2:	4698      	mov	r8, r3
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	b118      	cbz	r0, 800b7d0 <_vfiprintf_r+0x18>
 800b7c8:	6983      	ldr	r3, [r0, #24]
 800b7ca:	b90b      	cbnz	r3, 800b7d0 <_vfiprintf_r+0x18>
 800b7cc:	f000 fb14 	bl	800bdf8 <__sinit>
 800b7d0:	4b89      	ldr	r3, [pc, #548]	; (800b9f8 <_vfiprintf_r+0x240>)
 800b7d2:	429d      	cmp	r5, r3
 800b7d4:	d11b      	bne.n	800b80e <_vfiprintf_r+0x56>
 800b7d6:	6875      	ldr	r5, [r6, #4]
 800b7d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7da:	07d9      	lsls	r1, r3, #31
 800b7dc:	d405      	bmi.n	800b7ea <_vfiprintf_r+0x32>
 800b7de:	89ab      	ldrh	r3, [r5, #12]
 800b7e0:	059a      	lsls	r2, r3, #22
 800b7e2:	d402      	bmi.n	800b7ea <_vfiprintf_r+0x32>
 800b7e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7e6:	f000 fba5 	bl	800bf34 <__retarget_lock_acquire_recursive>
 800b7ea:	89ab      	ldrh	r3, [r5, #12]
 800b7ec:	071b      	lsls	r3, r3, #28
 800b7ee:	d501      	bpl.n	800b7f4 <_vfiprintf_r+0x3c>
 800b7f0:	692b      	ldr	r3, [r5, #16]
 800b7f2:	b9eb      	cbnz	r3, 800b830 <_vfiprintf_r+0x78>
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f000 f96e 	bl	800bad8 <__swsetup_r>
 800b7fc:	b1c0      	cbz	r0, 800b830 <_vfiprintf_r+0x78>
 800b7fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b800:	07dc      	lsls	r4, r3, #31
 800b802:	d50e      	bpl.n	800b822 <_vfiprintf_r+0x6a>
 800b804:	f04f 30ff 	mov.w	r0, #4294967295
 800b808:	b01d      	add	sp, #116	; 0x74
 800b80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80e:	4b7b      	ldr	r3, [pc, #492]	; (800b9fc <_vfiprintf_r+0x244>)
 800b810:	429d      	cmp	r5, r3
 800b812:	d101      	bne.n	800b818 <_vfiprintf_r+0x60>
 800b814:	68b5      	ldr	r5, [r6, #8]
 800b816:	e7df      	b.n	800b7d8 <_vfiprintf_r+0x20>
 800b818:	4b79      	ldr	r3, [pc, #484]	; (800ba00 <_vfiprintf_r+0x248>)
 800b81a:	429d      	cmp	r5, r3
 800b81c:	bf08      	it	eq
 800b81e:	68f5      	ldreq	r5, [r6, #12]
 800b820:	e7da      	b.n	800b7d8 <_vfiprintf_r+0x20>
 800b822:	89ab      	ldrh	r3, [r5, #12]
 800b824:	0598      	lsls	r0, r3, #22
 800b826:	d4ed      	bmi.n	800b804 <_vfiprintf_r+0x4c>
 800b828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b82a:	f000 fb84 	bl	800bf36 <__retarget_lock_release_recursive>
 800b82e:	e7e9      	b.n	800b804 <_vfiprintf_r+0x4c>
 800b830:	2300      	movs	r3, #0
 800b832:	9309      	str	r3, [sp, #36]	; 0x24
 800b834:	2320      	movs	r3, #32
 800b836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b83a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b83e:	2330      	movs	r3, #48	; 0x30
 800b840:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba04 <_vfiprintf_r+0x24c>
 800b844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b848:	f04f 0901 	mov.w	r9, #1
 800b84c:	4623      	mov	r3, r4
 800b84e:	469a      	mov	sl, r3
 800b850:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b854:	b10a      	cbz	r2, 800b85a <_vfiprintf_r+0xa2>
 800b856:	2a25      	cmp	r2, #37	; 0x25
 800b858:	d1f9      	bne.n	800b84e <_vfiprintf_r+0x96>
 800b85a:	ebba 0b04 	subs.w	fp, sl, r4
 800b85e:	d00b      	beq.n	800b878 <_vfiprintf_r+0xc0>
 800b860:	465b      	mov	r3, fp
 800b862:	4622      	mov	r2, r4
 800b864:	4629      	mov	r1, r5
 800b866:	4630      	mov	r0, r6
 800b868:	f7ff ff94 	bl	800b794 <__sfputs_r>
 800b86c:	3001      	adds	r0, #1
 800b86e:	f000 80aa 	beq.w	800b9c6 <_vfiprintf_r+0x20e>
 800b872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b874:	445a      	add	r2, fp
 800b876:	9209      	str	r2, [sp, #36]	; 0x24
 800b878:	f89a 3000 	ldrb.w	r3, [sl]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 80a2 	beq.w	800b9c6 <_vfiprintf_r+0x20e>
 800b882:	2300      	movs	r3, #0
 800b884:	f04f 32ff 	mov.w	r2, #4294967295
 800b888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b88c:	f10a 0a01 	add.w	sl, sl, #1
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	9307      	str	r3, [sp, #28]
 800b894:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b898:	931a      	str	r3, [sp, #104]	; 0x68
 800b89a:	4654      	mov	r4, sl
 800b89c:	2205      	movs	r2, #5
 800b89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a2:	4858      	ldr	r0, [pc, #352]	; (800ba04 <_vfiprintf_r+0x24c>)
 800b8a4:	f7f4 fca4 	bl	80001f0 <memchr>
 800b8a8:	9a04      	ldr	r2, [sp, #16]
 800b8aa:	b9d8      	cbnz	r0, 800b8e4 <_vfiprintf_r+0x12c>
 800b8ac:	06d1      	lsls	r1, r2, #27
 800b8ae:	bf44      	itt	mi
 800b8b0:	2320      	movmi	r3, #32
 800b8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8b6:	0713      	lsls	r3, r2, #28
 800b8b8:	bf44      	itt	mi
 800b8ba:	232b      	movmi	r3, #43	; 0x2b
 800b8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b8c6:	d015      	beq.n	800b8f4 <_vfiprintf_r+0x13c>
 800b8c8:	9a07      	ldr	r2, [sp, #28]
 800b8ca:	4654      	mov	r4, sl
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	f04f 0c0a 	mov.w	ip, #10
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8d8:	3b30      	subs	r3, #48	; 0x30
 800b8da:	2b09      	cmp	r3, #9
 800b8dc:	d94e      	bls.n	800b97c <_vfiprintf_r+0x1c4>
 800b8de:	b1b0      	cbz	r0, 800b90e <_vfiprintf_r+0x156>
 800b8e0:	9207      	str	r2, [sp, #28]
 800b8e2:	e014      	b.n	800b90e <_vfiprintf_r+0x156>
 800b8e4:	eba0 0308 	sub.w	r3, r0, r8
 800b8e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	9304      	str	r3, [sp, #16]
 800b8f0:	46a2      	mov	sl, r4
 800b8f2:	e7d2      	b.n	800b89a <_vfiprintf_r+0xe2>
 800b8f4:	9b03      	ldr	r3, [sp, #12]
 800b8f6:	1d19      	adds	r1, r3, #4
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	9103      	str	r1, [sp, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	bfbb      	ittet	lt
 800b900:	425b      	neglt	r3, r3
 800b902:	f042 0202 	orrlt.w	r2, r2, #2
 800b906:	9307      	strge	r3, [sp, #28]
 800b908:	9307      	strlt	r3, [sp, #28]
 800b90a:	bfb8      	it	lt
 800b90c:	9204      	strlt	r2, [sp, #16]
 800b90e:	7823      	ldrb	r3, [r4, #0]
 800b910:	2b2e      	cmp	r3, #46	; 0x2e
 800b912:	d10c      	bne.n	800b92e <_vfiprintf_r+0x176>
 800b914:	7863      	ldrb	r3, [r4, #1]
 800b916:	2b2a      	cmp	r3, #42	; 0x2a
 800b918:	d135      	bne.n	800b986 <_vfiprintf_r+0x1ce>
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	1d1a      	adds	r2, r3, #4
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	9203      	str	r2, [sp, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	bfb8      	it	lt
 800b926:	f04f 33ff 	movlt.w	r3, #4294967295
 800b92a:	3402      	adds	r4, #2
 800b92c:	9305      	str	r3, [sp, #20]
 800b92e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba14 <_vfiprintf_r+0x25c>
 800b932:	7821      	ldrb	r1, [r4, #0]
 800b934:	2203      	movs	r2, #3
 800b936:	4650      	mov	r0, sl
 800b938:	f7f4 fc5a 	bl	80001f0 <memchr>
 800b93c:	b140      	cbz	r0, 800b950 <_vfiprintf_r+0x198>
 800b93e:	2340      	movs	r3, #64	; 0x40
 800b940:	eba0 000a 	sub.w	r0, r0, sl
 800b944:	fa03 f000 	lsl.w	r0, r3, r0
 800b948:	9b04      	ldr	r3, [sp, #16]
 800b94a:	4303      	orrs	r3, r0
 800b94c:	3401      	adds	r4, #1
 800b94e:	9304      	str	r3, [sp, #16]
 800b950:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b954:	482c      	ldr	r0, [pc, #176]	; (800ba08 <_vfiprintf_r+0x250>)
 800b956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b95a:	2206      	movs	r2, #6
 800b95c:	f7f4 fc48 	bl	80001f0 <memchr>
 800b960:	2800      	cmp	r0, #0
 800b962:	d03f      	beq.n	800b9e4 <_vfiprintf_r+0x22c>
 800b964:	4b29      	ldr	r3, [pc, #164]	; (800ba0c <_vfiprintf_r+0x254>)
 800b966:	bb1b      	cbnz	r3, 800b9b0 <_vfiprintf_r+0x1f8>
 800b968:	9b03      	ldr	r3, [sp, #12]
 800b96a:	3307      	adds	r3, #7
 800b96c:	f023 0307 	bic.w	r3, r3, #7
 800b970:	3308      	adds	r3, #8
 800b972:	9303      	str	r3, [sp, #12]
 800b974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b976:	443b      	add	r3, r7
 800b978:	9309      	str	r3, [sp, #36]	; 0x24
 800b97a:	e767      	b.n	800b84c <_vfiprintf_r+0x94>
 800b97c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b980:	460c      	mov	r4, r1
 800b982:	2001      	movs	r0, #1
 800b984:	e7a5      	b.n	800b8d2 <_vfiprintf_r+0x11a>
 800b986:	2300      	movs	r3, #0
 800b988:	3401      	adds	r4, #1
 800b98a:	9305      	str	r3, [sp, #20]
 800b98c:	4619      	mov	r1, r3
 800b98e:	f04f 0c0a 	mov.w	ip, #10
 800b992:	4620      	mov	r0, r4
 800b994:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b998:	3a30      	subs	r2, #48	; 0x30
 800b99a:	2a09      	cmp	r2, #9
 800b99c:	d903      	bls.n	800b9a6 <_vfiprintf_r+0x1ee>
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d0c5      	beq.n	800b92e <_vfiprintf_r+0x176>
 800b9a2:	9105      	str	r1, [sp, #20]
 800b9a4:	e7c3      	b.n	800b92e <_vfiprintf_r+0x176>
 800b9a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e7f0      	b.n	800b992 <_vfiprintf_r+0x1da>
 800b9b0:	ab03      	add	r3, sp, #12
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	462a      	mov	r2, r5
 800b9b6:	4b16      	ldr	r3, [pc, #88]	; (800ba10 <_vfiprintf_r+0x258>)
 800b9b8:	a904      	add	r1, sp, #16
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	f7fd fde6 	bl	800958c <_printf_float>
 800b9c0:	4607      	mov	r7, r0
 800b9c2:	1c78      	adds	r0, r7, #1
 800b9c4:	d1d6      	bne.n	800b974 <_vfiprintf_r+0x1bc>
 800b9c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9c8:	07d9      	lsls	r1, r3, #31
 800b9ca:	d405      	bmi.n	800b9d8 <_vfiprintf_r+0x220>
 800b9cc:	89ab      	ldrh	r3, [r5, #12]
 800b9ce:	059a      	lsls	r2, r3, #22
 800b9d0:	d402      	bmi.n	800b9d8 <_vfiprintf_r+0x220>
 800b9d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9d4:	f000 faaf 	bl	800bf36 <__retarget_lock_release_recursive>
 800b9d8:	89ab      	ldrh	r3, [r5, #12]
 800b9da:	065b      	lsls	r3, r3, #25
 800b9dc:	f53f af12 	bmi.w	800b804 <_vfiprintf_r+0x4c>
 800b9e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9e2:	e711      	b.n	800b808 <_vfiprintf_r+0x50>
 800b9e4:	ab03      	add	r3, sp, #12
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	462a      	mov	r2, r5
 800b9ea:	4b09      	ldr	r3, [pc, #36]	; (800ba10 <_vfiprintf_r+0x258>)
 800b9ec:	a904      	add	r1, sp, #16
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f7fe f870 	bl	8009ad4 <_printf_i>
 800b9f4:	e7e4      	b.n	800b9c0 <_vfiprintf_r+0x208>
 800b9f6:	bf00      	nop
 800b9f8:	0800ce34 	.word	0x0800ce34
 800b9fc:	0800ce54 	.word	0x0800ce54
 800ba00:	0800ce14 	.word	0x0800ce14
 800ba04:	0800ccbc 	.word	0x0800ccbc
 800ba08:	0800ccc6 	.word	0x0800ccc6
 800ba0c:	0800958d 	.word	0x0800958d
 800ba10:	0800b795 	.word	0x0800b795
 800ba14:	0800ccc2 	.word	0x0800ccc2

0800ba18 <__swbuf_r>:
 800ba18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1a:	460e      	mov	r6, r1
 800ba1c:	4614      	mov	r4, r2
 800ba1e:	4605      	mov	r5, r0
 800ba20:	b118      	cbz	r0, 800ba2a <__swbuf_r+0x12>
 800ba22:	6983      	ldr	r3, [r0, #24]
 800ba24:	b90b      	cbnz	r3, 800ba2a <__swbuf_r+0x12>
 800ba26:	f000 f9e7 	bl	800bdf8 <__sinit>
 800ba2a:	4b21      	ldr	r3, [pc, #132]	; (800bab0 <__swbuf_r+0x98>)
 800ba2c:	429c      	cmp	r4, r3
 800ba2e:	d12b      	bne.n	800ba88 <__swbuf_r+0x70>
 800ba30:	686c      	ldr	r4, [r5, #4]
 800ba32:	69a3      	ldr	r3, [r4, #24]
 800ba34:	60a3      	str	r3, [r4, #8]
 800ba36:	89a3      	ldrh	r3, [r4, #12]
 800ba38:	071a      	lsls	r2, r3, #28
 800ba3a:	d52f      	bpl.n	800ba9c <__swbuf_r+0x84>
 800ba3c:	6923      	ldr	r3, [r4, #16]
 800ba3e:	b36b      	cbz	r3, 800ba9c <__swbuf_r+0x84>
 800ba40:	6923      	ldr	r3, [r4, #16]
 800ba42:	6820      	ldr	r0, [r4, #0]
 800ba44:	1ac0      	subs	r0, r0, r3
 800ba46:	6963      	ldr	r3, [r4, #20]
 800ba48:	b2f6      	uxtb	r6, r6
 800ba4a:	4283      	cmp	r3, r0
 800ba4c:	4637      	mov	r7, r6
 800ba4e:	dc04      	bgt.n	800ba5a <__swbuf_r+0x42>
 800ba50:	4621      	mov	r1, r4
 800ba52:	4628      	mov	r0, r5
 800ba54:	f000 f93c 	bl	800bcd0 <_fflush_r>
 800ba58:	bb30      	cbnz	r0, 800baa8 <__swbuf_r+0x90>
 800ba5a:	68a3      	ldr	r3, [r4, #8]
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	60a3      	str	r3, [r4, #8]
 800ba60:	6823      	ldr	r3, [r4, #0]
 800ba62:	1c5a      	adds	r2, r3, #1
 800ba64:	6022      	str	r2, [r4, #0]
 800ba66:	701e      	strb	r6, [r3, #0]
 800ba68:	6963      	ldr	r3, [r4, #20]
 800ba6a:	3001      	adds	r0, #1
 800ba6c:	4283      	cmp	r3, r0
 800ba6e:	d004      	beq.n	800ba7a <__swbuf_r+0x62>
 800ba70:	89a3      	ldrh	r3, [r4, #12]
 800ba72:	07db      	lsls	r3, r3, #31
 800ba74:	d506      	bpl.n	800ba84 <__swbuf_r+0x6c>
 800ba76:	2e0a      	cmp	r6, #10
 800ba78:	d104      	bne.n	800ba84 <__swbuf_r+0x6c>
 800ba7a:	4621      	mov	r1, r4
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	f000 f927 	bl	800bcd0 <_fflush_r>
 800ba82:	b988      	cbnz	r0, 800baa8 <__swbuf_r+0x90>
 800ba84:	4638      	mov	r0, r7
 800ba86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba88:	4b0a      	ldr	r3, [pc, #40]	; (800bab4 <__swbuf_r+0x9c>)
 800ba8a:	429c      	cmp	r4, r3
 800ba8c:	d101      	bne.n	800ba92 <__swbuf_r+0x7a>
 800ba8e:	68ac      	ldr	r4, [r5, #8]
 800ba90:	e7cf      	b.n	800ba32 <__swbuf_r+0x1a>
 800ba92:	4b09      	ldr	r3, [pc, #36]	; (800bab8 <__swbuf_r+0xa0>)
 800ba94:	429c      	cmp	r4, r3
 800ba96:	bf08      	it	eq
 800ba98:	68ec      	ldreq	r4, [r5, #12]
 800ba9a:	e7ca      	b.n	800ba32 <__swbuf_r+0x1a>
 800ba9c:	4621      	mov	r1, r4
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f000 f81a 	bl	800bad8 <__swsetup_r>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d0cb      	beq.n	800ba40 <__swbuf_r+0x28>
 800baa8:	f04f 37ff 	mov.w	r7, #4294967295
 800baac:	e7ea      	b.n	800ba84 <__swbuf_r+0x6c>
 800baae:	bf00      	nop
 800bab0:	0800ce34 	.word	0x0800ce34
 800bab4:	0800ce54 	.word	0x0800ce54
 800bab8:	0800ce14 	.word	0x0800ce14

0800babc <__ascii_wctomb>:
 800babc:	b149      	cbz	r1, 800bad2 <__ascii_wctomb+0x16>
 800babe:	2aff      	cmp	r2, #255	; 0xff
 800bac0:	bf85      	ittet	hi
 800bac2:	238a      	movhi	r3, #138	; 0x8a
 800bac4:	6003      	strhi	r3, [r0, #0]
 800bac6:	700a      	strbls	r2, [r1, #0]
 800bac8:	f04f 30ff 	movhi.w	r0, #4294967295
 800bacc:	bf98      	it	ls
 800bace:	2001      	movls	r0, #1
 800bad0:	4770      	bx	lr
 800bad2:	4608      	mov	r0, r1
 800bad4:	4770      	bx	lr
	...

0800bad8 <__swsetup_r>:
 800bad8:	4b32      	ldr	r3, [pc, #200]	; (800bba4 <__swsetup_r+0xcc>)
 800bada:	b570      	push	{r4, r5, r6, lr}
 800badc:	681d      	ldr	r5, [r3, #0]
 800bade:	4606      	mov	r6, r0
 800bae0:	460c      	mov	r4, r1
 800bae2:	b125      	cbz	r5, 800baee <__swsetup_r+0x16>
 800bae4:	69ab      	ldr	r3, [r5, #24]
 800bae6:	b913      	cbnz	r3, 800baee <__swsetup_r+0x16>
 800bae8:	4628      	mov	r0, r5
 800baea:	f000 f985 	bl	800bdf8 <__sinit>
 800baee:	4b2e      	ldr	r3, [pc, #184]	; (800bba8 <__swsetup_r+0xd0>)
 800baf0:	429c      	cmp	r4, r3
 800baf2:	d10f      	bne.n	800bb14 <__swsetup_r+0x3c>
 800baf4:	686c      	ldr	r4, [r5, #4]
 800baf6:	89a3      	ldrh	r3, [r4, #12]
 800baf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bafc:	0719      	lsls	r1, r3, #28
 800bafe:	d42c      	bmi.n	800bb5a <__swsetup_r+0x82>
 800bb00:	06dd      	lsls	r5, r3, #27
 800bb02:	d411      	bmi.n	800bb28 <__swsetup_r+0x50>
 800bb04:	2309      	movs	r3, #9
 800bb06:	6033      	str	r3, [r6, #0]
 800bb08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb0c:	81a3      	strh	r3, [r4, #12]
 800bb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb12:	e03e      	b.n	800bb92 <__swsetup_r+0xba>
 800bb14:	4b25      	ldr	r3, [pc, #148]	; (800bbac <__swsetup_r+0xd4>)
 800bb16:	429c      	cmp	r4, r3
 800bb18:	d101      	bne.n	800bb1e <__swsetup_r+0x46>
 800bb1a:	68ac      	ldr	r4, [r5, #8]
 800bb1c:	e7eb      	b.n	800baf6 <__swsetup_r+0x1e>
 800bb1e:	4b24      	ldr	r3, [pc, #144]	; (800bbb0 <__swsetup_r+0xd8>)
 800bb20:	429c      	cmp	r4, r3
 800bb22:	bf08      	it	eq
 800bb24:	68ec      	ldreq	r4, [r5, #12]
 800bb26:	e7e6      	b.n	800baf6 <__swsetup_r+0x1e>
 800bb28:	0758      	lsls	r0, r3, #29
 800bb2a:	d512      	bpl.n	800bb52 <__swsetup_r+0x7a>
 800bb2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb2e:	b141      	cbz	r1, 800bb42 <__swsetup_r+0x6a>
 800bb30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb34:	4299      	cmp	r1, r3
 800bb36:	d002      	beq.n	800bb3e <__swsetup_r+0x66>
 800bb38:	4630      	mov	r0, r6
 800bb3a:	f7ff fb31 	bl	800b1a0 <_free_r>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	6363      	str	r3, [r4, #52]	; 0x34
 800bb42:	89a3      	ldrh	r3, [r4, #12]
 800bb44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb48:	81a3      	strh	r3, [r4, #12]
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	6063      	str	r3, [r4, #4]
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	89a3      	ldrh	r3, [r4, #12]
 800bb54:	f043 0308 	orr.w	r3, r3, #8
 800bb58:	81a3      	strh	r3, [r4, #12]
 800bb5a:	6923      	ldr	r3, [r4, #16]
 800bb5c:	b94b      	cbnz	r3, 800bb72 <__swsetup_r+0x9a>
 800bb5e:	89a3      	ldrh	r3, [r4, #12]
 800bb60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb68:	d003      	beq.n	800bb72 <__swsetup_r+0x9a>
 800bb6a:	4621      	mov	r1, r4
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	f000 fa09 	bl	800bf84 <__smakebuf_r>
 800bb72:	89a0      	ldrh	r0, [r4, #12]
 800bb74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb78:	f010 0301 	ands.w	r3, r0, #1
 800bb7c:	d00a      	beq.n	800bb94 <__swsetup_r+0xbc>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	60a3      	str	r3, [r4, #8]
 800bb82:	6963      	ldr	r3, [r4, #20]
 800bb84:	425b      	negs	r3, r3
 800bb86:	61a3      	str	r3, [r4, #24]
 800bb88:	6923      	ldr	r3, [r4, #16]
 800bb8a:	b943      	cbnz	r3, 800bb9e <__swsetup_r+0xc6>
 800bb8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb90:	d1ba      	bne.n	800bb08 <__swsetup_r+0x30>
 800bb92:	bd70      	pop	{r4, r5, r6, pc}
 800bb94:	0781      	lsls	r1, r0, #30
 800bb96:	bf58      	it	pl
 800bb98:	6963      	ldrpl	r3, [r4, #20]
 800bb9a:	60a3      	str	r3, [r4, #8]
 800bb9c:	e7f4      	b.n	800bb88 <__swsetup_r+0xb0>
 800bb9e:	2000      	movs	r0, #0
 800bba0:	e7f7      	b.n	800bb92 <__swsetup_r+0xba>
 800bba2:	bf00      	nop
 800bba4:	20000014 	.word	0x20000014
 800bba8:	0800ce34 	.word	0x0800ce34
 800bbac:	0800ce54 	.word	0x0800ce54
 800bbb0:	0800ce14 	.word	0x0800ce14

0800bbb4 <abort>:
 800bbb4:	b508      	push	{r3, lr}
 800bbb6:	2006      	movs	r0, #6
 800bbb8:	f000 fa54 	bl	800c064 <raise>
 800bbbc:	2001      	movs	r0, #1
 800bbbe:	f7f6 f869 	bl	8001c94 <_exit>
	...

0800bbc4 <__sflush_r>:
 800bbc4:	898a      	ldrh	r2, [r1, #12]
 800bbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbca:	4605      	mov	r5, r0
 800bbcc:	0710      	lsls	r0, r2, #28
 800bbce:	460c      	mov	r4, r1
 800bbd0:	d458      	bmi.n	800bc84 <__sflush_r+0xc0>
 800bbd2:	684b      	ldr	r3, [r1, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	dc05      	bgt.n	800bbe4 <__sflush_r+0x20>
 800bbd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	dc02      	bgt.n	800bbe4 <__sflush_r+0x20>
 800bbde:	2000      	movs	r0, #0
 800bbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbe6:	2e00      	cmp	r6, #0
 800bbe8:	d0f9      	beq.n	800bbde <__sflush_r+0x1a>
 800bbea:	2300      	movs	r3, #0
 800bbec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbf0:	682f      	ldr	r7, [r5, #0]
 800bbf2:	602b      	str	r3, [r5, #0]
 800bbf4:	d032      	beq.n	800bc5c <__sflush_r+0x98>
 800bbf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	075a      	lsls	r2, r3, #29
 800bbfc:	d505      	bpl.n	800bc0a <__sflush_r+0x46>
 800bbfe:	6863      	ldr	r3, [r4, #4]
 800bc00:	1ac0      	subs	r0, r0, r3
 800bc02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc04:	b10b      	cbz	r3, 800bc0a <__sflush_r+0x46>
 800bc06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc08:	1ac0      	subs	r0, r0, r3
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc10:	6a21      	ldr	r1, [r4, #32]
 800bc12:	4628      	mov	r0, r5
 800bc14:	47b0      	blx	r6
 800bc16:	1c43      	adds	r3, r0, #1
 800bc18:	89a3      	ldrh	r3, [r4, #12]
 800bc1a:	d106      	bne.n	800bc2a <__sflush_r+0x66>
 800bc1c:	6829      	ldr	r1, [r5, #0]
 800bc1e:	291d      	cmp	r1, #29
 800bc20:	d82c      	bhi.n	800bc7c <__sflush_r+0xb8>
 800bc22:	4a2a      	ldr	r2, [pc, #168]	; (800bccc <__sflush_r+0x108>)
 800bc24:	40ca      	lsrs	r2, r1
 800bc26:	07d6      	lsls	r6, r2, #31
 800bc28:	d528      	bpl.n	800bc7c <__sflush_r+0xb8>
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	6062      	str	r2, [r4, #4]
 800bc2e:	04d9      	lsls	r1, r3, #19
 800bc30:	6922      	ldr	r2, [r4, #16]
 800bc32:	6022      	str	r2, [r4, #0]
 800bc34:	d504      	bpl.n	800bc40 <__sflush_r+0x7c>
 800bc36:	1c42      	adds	r2, r0, #1
 800bc38:	d101      	bne.n	800bc3e <__sflush_r+0x7a>
 800bc3a:	682b      	ldr	r3, [r5, #0]
 800bc3c:	b903      	cbnz	r3, 800bc40 <__sflush_r+0x7c>
 800bc3e:	6560      	str	r0, [r4, #84]	; 0x54
 800bc40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc42:	602f      	str	r7, [r5, #0]
 800bc44:	2900      	cmp	r1, #0
 800bc46:	d0ca      	beq.n	800bbde <__sflush_r+0x1a>
 800bc48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc4c:	4299      	cmp	r1, r3
 800bc4e:	d002      	beq.n	800bc56 <__sflush_r+0x92>
 800bc50:	4628      	mov	r0, r5
 800bc52:	f7ff faa5 	bl	800b1a0 <_free_r>
 800bc56:	2000      	movs	r0, #0
 800bc58:	6360      	str	r0, [r4, #52]	; 0x34
 800bc5a:	e7c1      	b.n	800bbe0 <__sflush_r+0x1c>
 800bc5c:	6a21      	ldr	r1, [r4, #32]
 800bc5e:	2301      	movs	r3, #1
 800bc60:	4628      	mov	r0, r5
 800bc62:	47b0      	blx	r6
 800bc64:	1c41      	adds	r1, r0, #1
 800bc66:	d1c7      	bne.n	800bbf8 <__sflush_r+0x34>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d0c4      	beq.n	800bbf8 <__sflush_r+0x34>
 800bc6e:	2b1d      	cmp	r3, #29
 800bc70:	d001      	beq.n	800bc76 <__sflush_r+0xb2>
 800bc72:	2b16      	cmp	r3, #22
 800bc74:	d101      	bne.n	800bc7a <__sflush_r+0xb6>
 800bc76:	602f      	str	r7, [r5, #0]
 800bc78:	e7b1      	b.n	800bbde <__sflush_r+0x1a>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	e7ad      	b.n	800bbe0 <__sflush_r+0x1c>
 800bc84:	690f      	ldr	r7, [r1, #16]
 800bc86:	2f00      	cmp	r7, #0
 800bc88:	d0a9      	beq.n	800bbde <__sflush_r+0x1a>
 800bc8a:	0793      	lsls	r3, r2, #30
 800bc8c:	680e      	ldr	r6, [r1, #0]
 800bc8e:	bf08      	it	eq
 800bc90:	694b      	ldreq	r3, [r1, #20]
 800bc92:	600f      	str	r7, [r1, #0]
 800bc94:	bf18      	it	ne
 800bc96:	2300      	movne	r3, #0
 800bc98:	eba6 0807 	sub.w	r8, r6, r7
 800bc9c:	608b      	str	r3, [r1, #8]
 800bc9e:	f1b8 0f00 	cmp.w	r8, #0
 800bca2:	dd9c      	ble.n	800bbde <__sflush_r+0x1a>
 800bca4:	6a21      	ldr	r1, [r4, #32]
 800bca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bca8:	4643      	mov	r3, r8
 800bcaa:	463a      	mov	r2, r7
 800bcac:	4628      	mov	r0, r5
 800bcae:	47b0      	blx	r6
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	dc06      	bgt.n	800bcc2 <__sflush_r+0xfe>
 800bcb4:	89a3      	ldrh	r3, [r4, #12]
 800bcb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcba:	81a3      	strh	r3, [r4, #12]
 800bcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc0:	e78e      	b.n	800bbe0 <__sflush_r+0x1c>
 800bcc2:	4407      	add	r7, r0
 800bcc4:	eba8 0800 	sub.w	r8, r8, r0
 800bcc8:	e7e9      	b.n	800bc9e <__sflush_r+0xda>
 800bcca:	bf00      	nop
 800bccc:	20400001 	.word	0x20400001

0800bcd0 <_fflush_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	690b      	ldr	r3, [r1, #16]
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	b913      	cbnz	r3, 800bce0 <_fflush_r+0x10>
 800bcda:	2500      	movs	r5, #0
 800bcdc:	4628      	mov	r0, r5
 800bcde:	bd38      	pop	{r3, r4, r5, pc}
 800bce0:	b118      	cbz	r0, 800bcea <_fflush_r+0x1a>
 800bce2:	6983      	ldr	r3, [r0, #24]
 800bce4:	b90b      	cbnz	r3, 800bcea <_fflush_r+0x1a>
 800bce6:	f000 f887 	bl	800bdf8 <__sinit>
 800bcea:	4b14      	ldr	r3, [pc, #80]	; (800bd3c <_fflush_r+0x6c>)
 800bcec:	429c      	cmp	r4, r3
 800bcee:	d11b      	bne.n	800bd28 <_fflush_r+0x58>
 800bcf0:	686c      	ldr	r4, [r5, #4]
 800bcf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d0ef      	beq.n	800bcda <_fflush_r+0xa>
 800bcfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcfc:	07d0      	lsls	r0, r2, #31
 800bcfe:	d404      	bmi.n	800bd0a <_fflush_r+0x3a>
 800bd00:	0599      	lsls	r1, r3, #22
 800bd02:	d402      	bmi.n	800bd0a <_fflush_r+0x3a>
 800bd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd06:	f000 f915 	bl	800bf34 <__retarget_lock_acquire_recursive>
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	f7ff ff59 	bl	800bbc4 <__sflush_r>
 800bd12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd14:	07da      	lsls	r2, r3, #31
 800bd16:	4605      	mov	r5, r0
 800bd18:	d4e0      	bmi.n	800bcdc <_fflush_r+0xc>
 800bd1a:	89a3      	ldrh	r3, [r4, #12]
 800bd1c:	059b      	lsls	r3, r3, #22
 800bd1e:	d4dd      	bmi.n	800bcdc <_fflush_r+0xc>
 800bd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd22:	f000 f908 	bl	800bf36 <__retarget_lock_release_recursive>
 800bd26:	e7d9      	b.n	800bcdc <_fflush_r+0xc>
 800bd28:	4b05      	ldr	r3, [pc, #20]	; (800bd40 <_fflush_r+0x70>)
 800bd2a:	429c      	cmp	r4, r3
 800bd2c:	d101      	bne.n	800bd32 <_fflush_r+0x62>
 800bd2e:	68ac      	ldr	r4, [r5, #8]
 800bd30:	e7df      	b.n	800bcf2 <_fflush_r+0x22>
 800bd32:	4b04      	ldr	r3, [pc, #16]	; (800bd44 <_fflush_r+0x74>)
 800bd34:	429c      	cmp	r4, r3
 800bd36:	bf08      	it	eq
 800bd38:	68ec      	ldreq	r4, [r5, #12]
 800bd3a:	e7da      	b.n	800bcf2 <_fflush_r+0x22>
 800bd3c:	0800ce34 	.word	0x0800ce34
 800bd40:	0800ce54 	.word	0x0800ce54
 800bd44:	0800ce14 	.word	0x0800ce14

0800bd48 <std>:
 800bd48:	2300      	movs	r3, #0
 800bd4a:	b510      	push	{r4, lr}
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	e9c0 3300 	strd	r3, r3, [r0]
 800bd52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd56:	6083      	str	r3, [r0, #8]
 800bd58:	8181      	strh	r1, [r0, #12]
 800bd5a:	6643      	str	r3, [r0, #100]	; 0x64
 800bd5c:	81c2      	strh	r2, [r0, #14]
 800bd5e:	6183      	str	r3, [r0, #24]
 800bd60:	4619      	mov	r1, r3
 800bd62:	2208      	movs	r2, #8
 800bd64:	305c      	adds	r0, #92	; 0x5c
 800bd66:	f7fd fb69 	bl	800943c <memset>
 800bd6a:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <std+0x38>)
 800bd6c:	6263      	str	r3, [r4, #36]	; 0x24
 800bd6e:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <std+0x3c>)
 800bd70:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd72:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <std+0x40>)
 800bd74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd76:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <std+0x44>)
 800bd78:	6224      	str	r4, [r4, #32]
 800bd7a:	6323      	str	r3, [r4, #48]	; 0x30
 800bd7c:	bd10      	pop	{r4, pc}
 800bd7e:	bf00      	nop
 800bd80:	0800c09d 	.word	0x0800c09d
 800bd84:	0800c0bf 	.word	0x0800c0bf
 800bd88:	0800c0f7 	.word	0x0800c0f7
 800bd8c:	0800c11b 	.word	0x0800c11b

0800bd90 <_cleanup_r>:
 800bd90:	4901      	ldr	r1, [pc, #4]	; (800bd98 <_cleanup_r+0x8>)
 800bd92:	f000 b8af 	b.w	800bef4 <_fwalk_reent>
 800bd96:	bf00      	nop
 800bd98:	0800bcd1 	.word	0x0800bcd1

0800bd9c <__sfmoreglue>:
 800bd9c:	b570      	push	{r4, r5, r6, lr}
 800bd9e:	2268      	movs	r2, #104	; 0x68
 800bda0:	1e4d      	subs	r5, r1, #1
 800bda2:	4355      	muls	r5, r2
 800bda4:	460e      	mov	r6, r1
 800bda6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bdaa:	f7ff fa65 	bl	800b278 <_malloc_r>
 800bdae:	4604      	mov	r4, r0
 800bdb0:	b140      	cbz	r0, 800bdc4 <__sfmoreglue+0x28>
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	e9c0 1600 	strd	r1, r6, [r0]
 800bdb8:	300c      	adds	r0, #12
 800bdba:	60a0      	str	r0, [r4, #8]
 800bdbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bdc0:	f7fd fb3c 	bl	800943c <memset>
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	bd70      	pop	{r4, r5, r6, pc}

0800bdc8 <__sfp_lock_acquire>:
 800bdc8:	4801      	ldr	r0, [pc, #4]	; (800bdd0 <__sfp_lock_acquire+0x8>)
 800bdca:	f000 b8b3 	b.w	800bf34 <__retarget_lock_acquire_recursive>
 800bdce:	bf00      	nop
 800bdd0:	20000901 	.word	0x20000901

0800bdd4 <__sfp_lock_release>:
 800bdd4:	4801      	ldr	r0, [pc, #4]	; (800bddc <__sfp_lock_release+0x8>)
 800bdd6:	f000 b8ae 	b.w	800bf36 <__retarget_lock_release_recursive>
 800bdda:	bf00      	nop
 800bddc:	20000901 	.word	0x20000901

0800bde0 <__sinit_lock_acquire>:
 800bde0:	4801      	ldr	r0, [pc, #4]	; (800bde8 <__sinit_lock_acquire+0x8>)
 800bde2:	f000 b8a7 	b.w	800bf34 <__retarget_lock_acquire_recursive>
 800bde6:	bf00      	nop
 800bde8:	20000902 	.word	0x20000902

0800bdec <__sinit_lock_release>:
 800bdec:	4801      	ldr	r0, [pc, #4]	; (800bdf4 <__sinit_lock_release+0x8>)
 800bdee:	f000 b8a2 	b.w	800bf36 <__retarget_lock_release_recursive>
 800bdf2:	bf00      	nop
 800bdf4:	20000902 	.word	0x20000902

0800bdf8 <__sinit>:
 800bdf8:	b510      	push	{r4, lr}
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	f7ff fff0 	bl	800bde0 <__sinit_lock_acquire>
 800be00:	69a3      	ldr	r3, [r4, #24]
 800be02:	b11b      	cbz	r3, 800be0c <__sinit+0x14>
 800be04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be08:	f7ff bff0 	b.w	800bdec <__sinit_lock_release>
 800be0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be10:	6523      	str	r3, [r4, #80]	; 0x50
 800be12:	4b13      	ldr	r3, [pc, #76]	; (800be60 <__sinit+0x68>)
 800be14:	4a13      	ldr	r2, [pc, #76]	; (800be64 <__sinit+0x6c>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	62a2      	str	r2, [r4, #40]	; 0x28
 800be1a:	42a3      	cmp	r3, r4
 800be1c:	bf04      	itt	eq
 800be1e:	2301      	moveq	r3, #1
 800be20:	61a3      	streq	r3, [r4, #24]
 800be22:	4620      	mov	r0, r4
 800be24:	f000 f820 	bl	800be68 <__sfp>
 800be28:	6060      	str	r0, [r4, #4]
 800be2a:	4620      	mov	r0, r4
 800be2c:	f000 f81c 	bl	800be68 <__sfp>
 800be30:	60a0      	str	r0, [r4, #8]
 800be32:	4620      	mov	r0, r4
 800be34:	f000 f818 	bl	800be68 <__sfp>
 800be38:	2200      	movs	r2, #0
 800be3a:	60e0      	str	r0, [r4, #12]
 800be3c:	2104      	movs	r1, #4
 800be3e:	6860      	ldr	r0, [r4, #4]
 800be40:	f7ff ff82 	bl	800bd48 <std>
 800be44:	68a0      	ldr	r0, [r4, #8]
 800be46:	2201      	movs	r2, #1
 800be48:	2109      	movs	r1, #9
 800be4a:	f7ff ff7d 	bl	800bd48 <std>
 800be4e:	68e0      	ldr	r0, [r4, #12]
 800be50:	2202      	movs	r2, #2
 800be52:	2112      	movs	r1, #18
 800be54:	f7ff ff78 	bl	800bd48 <std>
 800be58:	2301      	movs	r3, #1
 800be5a:	61a3      	str	r3, [r4, #24]
 800be5c:	e7d2      	b.n	800be04 <__sinit+0xc>
 800be5e:	bf00      	nop
 800be60:	0800ca98 	.word	0x0800ca98
 800be64:	0800bd91 	.word	0x0800bd91

0800be68 <__sfp>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	4607      	mov	r7, r0
 800be6c:	f7ff ffac 	bl	800bdc8 <__sfp_lock_acquire>
 800be70:	4b1e      	ldr	r3, [pc, #120]	; (800beec <__sfp+0x84>)
 800be72:	681e      	ldr	r6, [r3, #0]
 800be74:	69b3      	ldr	r3, [r6, #24]
 800be76:	b913      	cbnz	r3, 800be7e <__sfp+0x16>
 800be78:	4630      	mov	r0, r6
 800be7a:	f7ff ffbd 	bl	800bdf8 <__sinit>
 800be7e:	3648      	adds	r6, #72	; 0x48
 800be80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be84:	3b01      	subs	r3, #1
 800be86:	d503      	bpl.n	800be90 <__sfp+0x28>
 800be88:	6833      	ldr	r3, [r6, #0]
 800be8a:	b30b      	cbz	r3, 800bed0 <__sfp+0x68>
 800be8c:	6836      	ldr	r6, [r6, #0]
 800be8e:	e7f7      	b.n	800be80 <__sfp+0x18>
 800be90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be94:	b9d5      	cbnz	r5, 800becc <__sfp+0x64>
 800be96:	4b16      	ldr	r3, [pc, #88]	; (800bef0 <__sfp+0x88>)
 800be98:	60e3      	str	r3, [r4, #12]
 800be9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be9e:	6665      	str	r5, [r4, #100]	; 0x64
 800bea0:	f000 f847 	bl	800bf32 <__retarget_lock_init_recursive>
 800bea4:	f7ff ff96 	bl	800bdd4 <__sfp_lock_release>
 800bea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800beac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800beb0:	6025      	str	r5, [r4, #0]
 800beb2:	61a5      	str	r5, [r4, #24]
 800beb4:	2208      	movs	r2, #8
 800beb6:	4629      	mov	r1, r5
 800beb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bebc:	f7fd fabe 	bl	800943c <memset>
 800bec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bec8:	4620      	mov	r0, r4
 800beca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800becc:	3468      	adds	r4, #104	; 0x68
 800bece:	e7d9      	b.n	800be84 <__sfp+0x1c>
 800bed0:	2104      	movs	r1, #4
 800bed2:	4638      	mov	r0, r7
 800bed4:	f7ff ff62 	bl	800bd9c <__sfmoreglue>
 800bed8:	4604      	mov	r4, r0
 800beda:	6030      	str	r0, [r6, #0]
 800bedc:	2800      	cmp	r0, #0
 800bede:	d1d5      	bne.n	800be8c <__sfp+0x24>
 800bee0:	f7ff ff78 	bl	800bdd4 <__sfp_lock_release>
 800bee4:	230c      	movs	r3, #12
 800bee6:	603b      	str	r3, [r7, #0]
 800bee8:	e7ee      	b.n	800bec8 <__sfp+0x60>
 800beea:	bf00      	nop
 800beec:	0800ca98 	.word	0x0800ca98
 800bef0:	ffff0001 	.word	0xffff0001

0800bef4 <_fwalk_reent>:
 800bef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bef8:	4606      	mov	r6, r0
 800befa:	4688      	mov	r8, r1
 800befc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf00:	2700      	movs	r7, #0
 800bf02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf06:	f1b9 0901 	subs.w	r9, r9, #1
 800bf0a:	d505      	bpl.n	800bf18 <_fwalk_reent+0x24>
 800bf0c:	6824      	ldr	r4, [r4, #0]
 800bf0e:	2c00      	cmp	r4, #0
 800bf10:	d1f7      	bne.n	800bf02 <_fwalk_reent+0xe>
 800bf12:	4638      	mov	r0, r7
 800bf14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf18:	89ab      	ldrh	r3, [r5, #12]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d907      	bls.n	800bf2e <_fwalk_reent+0x3a>
 800bf1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf22:	3301      	adds	r3, #1
 800bf24:	d003      	beq.n	800bf2e <_fwalk_reent+0x3a>
 800bf26:	4629      	mov	r1, r5
 800bf28:	4630      	mov	r0, r6
 800bf2a:	47c0      	blx	r8
 800bf2c:	4307      	orrs	r7, r0
 800bf2e:	3568      	adds	r5, #104	; 0x68
 800bf30:	e7e9      	b.n	800bf06 <_fwalk_reent+0x12>

0800bf32 <__retarget_lock_init_recursive>:
 800bf32:	4770      	bx	lr

0800bf34 <__retarget_lock_acquire_recursive>:
 800bf34:	4770      	bx	lr

0800bf36 <__retarget_lock_release_recursive>:
 800bf36:	4770      	bx	lr

0800bf38 <__swhatbuf_r>:
 800bf38:	b570      	push	{r4, r5, r6, lr}
 800bf3a:	460e      	mov	r6, r1
 800bf3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf40:	2900      	cmp	r1, #0
 800bf42:	b096      	sub	sp, #88	; 0x58
 800bf44:	4614      	mov	r4, r2
 800bf46:	461d      	mov	r5, r3
 800bf48:	da08      	bge.n	800bf5c <__swhatbuf_r+0x24>
 800bf4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	602a      	str	r2, [r5, #0]
 800bf52:	061a      	lsls	r2, r3, #24
 800bf54:	d410      	bmi.n	800bf78 <__swhatbuf_r+0x40>
 800bf56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf5a:	e00e      	b.n	800bf7a <__swhatbuf_r+0x42>
 800bf5c:	466a      	mov	r2, sp
 800bf5e:	f000 f903 	bl	800c168 <_fstat_r>
 800bf62:	2800      	cmp	r0, #0
 800bf64:	dbf1      	blt.n	800bf4a <__swhatbuf_r+0x12>
 800bf66:	9a01      	ldr	r2, [sp, #4]
 800bf68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf70:	425a      	negs	r2, r3
 800bf72:	415a      	adcs	r2, r3
 800bf74:	602a      	str	r2, [r5, #0]
 800bf76:	e7ee      	b.n	800bf56 <__swhatbuf_r+0x1e>
 800bf78:	2340      	movs	r3, #64	; 0x40
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	b016      	add	sp, #88	; 0x58
 800bf80:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf84 <__smakebuf_r>:
 800bf84:	898b      	ldrh	r3, [r1, #12]
 800bf86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf88:	079d      	lsls	r5, r3, #30
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	460c      	mov	r4, r1
 800bf8e:	d507      	bpl.n	800bfa0 <__smakebuf_r+0x1c>
 800bf90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf94:	6023      	str	r3, [r4, #0]
 800bf96:	6123      	str	r3, [r4, #16]
 800bf98:	2301      	movs	r3, #1
 800bf9a:	6163      	str	r3, [r4, #20]
 800bf9c:	b002      	add	sp, #8
 800bf9e:	bd70      	pop	{r4, r5, r6, pc}
 800bfa0:	ab01      	add	r3, sp, #4
 800bfa2:	466a      	mov	r2, sp
 800bfa4:	f7ff ffc8 	bl	800bf38 <__swhatbuf_r>
 800bfa8:	9900      	ldr	r1, [sp, #0]
 800bfaa:	4605      	mov	r5, r0
 800bfac:	4630      	mov	r0, r6
 800bfae:	f7ff f963 	bl	800b278 <_malloc_r>
 800bfb2:	b948      	cbnz	r0, 800bfc8 <__smakebuf_r+0x44>
 800bfb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfb8:	059a      	lsls	r2, r3, #22
 800bfba:	d4ef      	bmi.n	800bf9c <__smakebuf_r+0x18>
 800bfbc:	f023 0303 	bic.w	r3, r3, #3
 800bfc0:	f043 0302 	orr.w	r3, r3, #2
 800bfc4:	81a3      	strh	r3, [r4, #12]
 800bfc6:	e7e3      	b.n	800bf90 <__smakebuf_r+0xc>
 800bfc8:	4b0d      	ldr	r3, [pc, #52]	; (800c000 <__smakebuf_r+0x7c>)
 800bfca:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	6020      	str	r0, [r4, #0]
 800bfd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfd4:	81a3      	strh	r3, [r4, #12]
 800bfd6:	9b00      	ldr	r3, [sp, #0]
 800bfd8:	6163      	str	r3, [r4, #20]
 800bfda:	9b01      	ldr	r3, [sp, #4]
 800bfdc:	6120      	str	r0, [r4, #16]
 800bfde:	b15b      	cbz	r3, 800bff8 <__smakebuf_r+0x74>
 800bfe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	f000 f8d1 	bl	800c18c <_isatty_r>
 800bfea:	b128      	cbz	r0, 800bff8 <__smakebuf_r+0x74>
 800bfec:	89a3      	ldrh	r3, [r4, #12]
 800bfee:	f023 0303 	bic.w	r3, r3, #3
 800bff2:	f043 0301 	orr.w	r3, r3, #1
 800bff6:	81a3      	strh	r3, [r4, #12]
 800bff8:	89a0      	ldrh	r0, [r4, #12]
 800bffa:	4305      	orrs	r5, r0
 800bffc:	81a5      	strh	r5, [r4, #12]
 800bffe:	e7cd      	b.n	800bf9c <__smakebuf_r+0x18>
 800c000:	0800bd91 	.word	0x0800bd91

0800c004 <_malloc_usable_size_r>:
 800c004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c008:	1f18      	subs	r0, r3, #4
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	bfbc      	itt	lt
 800c00e:	580b      	ldrlt	r3, [r1, r0]
 800c010:	18c0      	addlt	r0, r0, r3
 800c012:	4770      	bx	lr

0800c014 <_raise_r>:
 800c014:	291f      	cmp	r1, #31
 800c016:	b538      	push	{r3, r4, r5, lr}
 800c018:	4604      	mov	r4, r0
 800c01a:	460d      	mov	r5, r1
 800c01c:	d904      	bls.n	800c028 <_raise_r+0x14>
 800c01e:	2316      	movs	r3, #22
 800c020:	6003      	str	r3, [r0, #0]
 800c022:	f04f 30ff 	mov.w	r0, #4294967295
 800c026:	bd38      	pop	{r3, r4, r5, pc}
 800c028:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c02a:	b112      	cbz	r2, 800c032 <_raise_r+0x1e>
 800c02c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c030:	b94b      	cbnz	r3, 800c046 <_raise_r+0x32>
 800c032:	4620      	mov	r0, r4
 800c034:	f000 f830 	bl	800c098 <_getpid_r>
 800c038:	462a      	mov	r2, r5
 800c03a:	4601      	mov	r1, r0
 800c03c:	4620      	mov	r0, r4
 800c03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c042:	f000 b817 	b.w	800c074 <_kill_r>
 800c046:	2b01      	cmp	r3, #1
 800c048:	d00a      	beq.n	800c060 <_raise_r+0x4c>
 800c04a:	1c59      	adds	r1, r3, #1
 800c04c:	d103      	bne.n	800c056 <_raise_r+0x42>
 800c04e:	2316      	movs	r3, #22
 800c050:	6003      	str	r3, [r0, #0]
 800c052:	2001      	movs	r0, #1
 800c054:	e7e7      	b.n	800c026 <_raise_r+0x12>
 800c056:	2400      	movs	r4, #0
 800c058:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c05c:	4628      	mov	r0, r5
 800c05e:	4798      	blx	r3
 800c060:	2000      	movs	r0, #0
 800c062:	e7e0      	b.n	800c026 <_raise_r+0x12>

0800c064 <raise>:
 800c064:	4b02      	ldr	r3, [pc, #8]	; (800c070 <raise+0xc>)
 800c066:	4601      	mov	r1, r0
 800c068:	6818      	ldr	r0, [r3, #0]
 800c06a:	f7ff bfd3 	b.w	800c014 <_raise_r>
 800c06e:	bf00      	nop
 800c070:	20000014 	.word	0x20000014

0800c074 <_kill_r>:
 800c074:	b538      	push	{r3, r4, r5, lr}
 800c076:	4d07      	ldr	r5, [pc, #28]	; (800c094 <_kill_r+0x20>)
 800c078:	2300      	movs	r3, #0
 800c07a:	4604      	mov	r4, r0
 800c07c:	4608      	mov	r0, r1
 800c07e:	4611      	mov	r1, r2
 800c080:	602b      	str	r3, [r5, #0]
 800c082:	f7f5 fdf7 	bl	8001c74 <_kill>
 800c086:	1c43      	adds	r3, r0, #1
 800c088:	d102      	bne.n	800c090 <_kill_r+0x1c>
 800c08a:	682b      	ldr	r3, [r5, #0]
 800c08c:	b103      	cbz	r3, 800c090 <_kill_r+0x1c>
 800c08e:	6023      	str	r3, [r4, #0]
 800c090:	bd38      	pop	{r3, r4, r5, pc}
 800c092:	bf00      	nop
 800c094:	200008fc 	.word	0x200008fc

0800c098 <_getpid_r>:
 800c098:	f7f5 bde4 	b.w	8001c64 <_getpid>

0800c09c <__sread>:
 800c09c:	b510      	push	{r4, lr}
 800c09e:	460c      	mov	r4, r1
 800c0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a4:	f000 f894 	bl	800c1d0 <_read_r>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	bfab      	itete	ge
 800c0ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0ae:	89a3      	ldrhlt	r3, [r4, #12]
 800c0b0:	181b      	addge	r3, r3, r0
 800c0b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0b6:	bfac      	ite	ge
 800c0b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0ba:	81a3      	strhlt	r3, [r4, #12]
 800c0bc:	bd10      	pop	{r4, pc}

0800c0be <__swrite>:
 800c0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c2:	461f      	mov	r7, r3
 800c0c4:	898b      	ldrh	r3, [r1, #12]
 800c0c6:	05db      	lsls	r3, r3, #23
 800c0c8:	4605      	mov	r5, r0
 800c0ca:	460c      	mov	r4, r1
 800c0cc:	4616      	mov	r6, r2
 800c0ce:	d505      	bpl.n	800c0dc <__swrite+0x1e>
 800c0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f000 f868 	bl	800c1ac <_lseek_r>
 800c0dc:	89a3      	ldrh	r3, [r4, #12]
 800c0de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0e6:	81a3      	strh	r3, [r4, #12]
 800c0e8:	4632      	mov	r2, r6
 800c0ea:	463b      	mov	r3, r7
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f2:	f000 b817 	b.w	800c124 <_write_r>

0800c0f6 <__sseek>:
 800c0f6:	b510      	push	{r4, lr}
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0fe:	f000 f855 	bl	800c1ac <_lseek_r>
 800c102:	1c43      	adds	r3, r0, #1
 800c104:	89a3      	ldrh	r3, [r4, #12]
 800c106:	bf15      	itete	ne
 800c108:	6560      	strne	r0, [r4, #84]	; 0x54
 800c10a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c10e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c112:	81a3      	strheq	r3, [r4, #12]
 800c114:	bf18      	it	ne
 800c116:	81a3      	strhne	r3, [r4, #12]
 800c118:	bd10      	pop	{r4, pc}

0800c11a <__sclose>:
 800c11a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c11e:	f000 b813 	b.w	800c148 <_close_r>
	...

0800c124 <_write_r>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	4d07      	ldr	r5, [pc, #28]	; (800c144 <_write_r+0x20>)
 800c128:	4604      	mov	r4, r0
 800c12a:	4608      	mov	r0, r1
 800c12c:	4611      	mov	r1, r2
 800c12e:	2200      	movs	r2, #0
 800c130:	602a      	str	r2, [r5, #0]
 800c132:	461a      	mov	r2, r3
 800c134:	f7f5 fdd5 	bl	8001ce2 <_write>
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	d102      	bne.n	800c142 <_write_r+0x1e>
 800c13c:	682b      	ldr	r3, [r5, #0]
 800c13e:	b103      	cbz	r3, 800c142 <_write_r+0x1e>
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	bd38      	pop	{r3, r4, r5, pc}
 800c144:	200008fc 	.word	0x200008fc

0800c148 <_close_r>:
 800c148:	b538      	push	{r3, r4, r5, lr}
 800c14a:	4d06      	ldr	r5, [pc, #24]	; (800c164 <_close_r+0x1c>)
 800c14c:	2300      	movs	r3, #0
 800c14e:	4604      	mov	r4, r0
 800c150:	4608      	mov	r0, r1
 800c152:	602b      	str	r3, [r5, #0]
 800c154:	f7f5 fde1 	bl	8001d1a <_close>
 800c158:	1c43      	adds	r3, r0, #1
 800c15a:	d102      	bne.n	800c162 <_close_r+0x1a>
 800c15c:	682b      	ldr	r3, [r5, #0]
 800c15e:	b103      	cbz	r3, 800c162 <_close_r+0x1a>
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	bd38      	pop	{r3, r4, r5, pc}
 800c164:	200008fc 	.word	0x200008fc

0800c168 <_fstat_r>:
 800c168:	b538      	push	{r3, r4, r5, lr}
 800c16a:	4d07      	ldr	r5, [pc, #28]	; (800c188 <_fstat_r+0x20>)
 800c16c:	2300      	movs	r3, #0
 800c16e:	4604      	mov	r4, r0
 800c170:	4608      	mov	r0, r1
 800c172:	4611      	mov	r1, r2
 800c174:	602b      	str	r3, [r5, #0]
 800c176:	f7f5 fddc 	bl	8001d32 <_fstat>
 800c17a:	1c43      	adds	r3, r0, #1
 800c17c:	d102      	bne.n	800c184 <_fstat_r+0x1c>
 800c17e:	682b      	ldr	r3, [r5, #0]
 800c180:	b103      	cbz	r3, 800c184 <_fstat_r+0x1c>
 800c182:	6023      	str	r3, [r4, #0]
 800c184:	bd38      	pop	{r3, r4, r5, pc}
 800c186:	bf00      	nop
 800c188:	200008fc 	.word	0x200008fc

0800c18c <_isatty_r>:
 800c18c:	b538      	push	{r3, r4, r5, lr}
 800c18e:	4d06      	ldr	r5, [pc, #24]	; (800c1a8 <_isatty_r+0x1c>)
 800c190:	2300      	movs	r3, #0
 800c192:	4604      	mov	r4, r0
 800c194:	4608      	mov	r0, r1
 800c196:	602b      	str	r3, [r5, #0]
 800c198:	f7f5 fddb 	bl	8001d52 <_isatty>
 800c19c:	1c43      	adds	r3, r0, #1
 800c19e:	d102      	bne.n	800c1a6 <_isatty_r+0x1a>
 800c1a0:	682b      	ldr	r3, [r5, #0]
 800c1a2:	b103      	cbz	r3, 800c1a6 <_isatty_r+0x1a>
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
 800c1a8:	200008fc 	.word	0x200008fc

0800c1ac <_lseek_r>:
 800c1ac:	b538      	push	{r3, r4, r5, lr}
 800c1ae:	4d07      	ldr	r5, [pc, #28]	; (800c1cc <_lseek_r+0x20>)
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	4608      	mov	r0, r1
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	602a      	str	r2, [r5, #0]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	f7f5 fdd4 	bl	8001d68 <_lseek>
 800c1c0:	1c43      	adds	r3, r0, #1
 800c1c2:	d102      	bne.n	800c1ca <_lseek_r+0x1e>
 800c1c4:	682b      	ldr	r3, [r5, #0]
 800c1c6:	b103      	cbz	r3, 800c1ca <_lseek_r+0x1e>
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	bd38      	pop	{r3, r4, r5, pc}
 800c1cc:	200008fc 	.word	0x200008fc

0800c1d0 <_read_r>:
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	4d07      	ldr	r5, [pc, #28]	; (800c1f0 <_read_r+0x20>)
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	4608      	mov	r0, r1
 800c1d8:	4611      	mov	r1, r2
 800c1da:	2200      	movs	r2, #0
 800c1dc:	602a      	str	r2, [r5, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	f7f5 fd62 	bl	8001ca8 <_read>
 800c1e4:	1c43      	adds	r3, r0, #1
 800c1e6:	d102      	bne.n	800c1ee <_read_r+0x1e>
 800c1e8:	682b      	ldr	r3, [r5, #0]
 800c1ea:	b103      	cbz	r3, 800c1ee <_read_r+0x1e>
 800c1ec:	6023      	str	r3, [r4, #0]
 800c1ee:	bd38      	pop	{r3, r4, r5, pc}
 800c1f0:	200008fc 	.word	0x200008fc

0800c1f4 <_init>:
 800c1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f6:	bf00      	nop
 800c1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1fa:	bc08      	pop	{r3}
 800c1fc:	469e      	mov	lr, r3
 800c1fe:	4770      	bx	lr

0800c200 <_fini>:
 800c200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c202:	bf00      	nop
 800c204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c206:	bc08      	pop	{r3}
 800c208:	469e      	mov	lr, r3
 800c20a:	4770      	bx	lr
